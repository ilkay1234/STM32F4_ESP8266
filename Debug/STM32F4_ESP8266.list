
STM32F4_ESP8266.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000208c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  0800221c  0800221c  0001221c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002430  08002430  00012430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002438  08002438  00012438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800243c  0800243c  0001243c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000000  08002440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
  8 .bss          00000374  20000084  20000084  00020084  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200003f8  200003f8  00020084  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 11 .debug_info   00009296  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001b1e  00000000  00000000  0002934a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002d03  00000000  00000000  0002ae68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000618  00000000  00000000  0002db70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a0  00000000  00000000  0002e188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000032a8  00000000  00000000  0002e928  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002933  00000000  00000000  00031bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00034503  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001304  00000000  00000000  00034580  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002204 	.word	0x08002204

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08002204 	.word	0x08002204

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000582:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <HAL_InitTick+0x3c>)
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_InitTick+0x40>)
{
 8000586:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000588:	7818      	ldrb	r0, [r3, #0]
 800058a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000592:	6810      	ldr	r0, [r2, #0]
 8000594:	fbb0 f0f3 	udiv	r0, r0, r3
 8000598:	f000 f8aa 	bl	80006f0 <HAL_SYSTICK_Config>
 800059c:	4604      	mov	r4, r0
 800059e:	b958      	cbnz	r0, 80005b8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a0:	2d0f      	cmp	r5, #15
 80005a2:	d809      	bhi.n	80005b8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a4:	4602      	mov	r2, r0
 80005a6:	4629      	mov	r1, r5
 80005a8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ac:	f000 f85e 	bl	800066c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <HAL_InitTick+0x44>)
 80005b2:	4620      	mov	r0, r4
 80005b4:	601d      	str	r5, [r3, #0]
 80005b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005b8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ba:	bd38      	pop	{r3, r4, r5, pc}
 80005bc:	2000001c 	.word	0x2000001c
 80005c0:	20000000 	.word	0x20000000
 80005c4:	20000004 	.word	0x20000004

080005c8 <HAL_Init>:
{
 80005c8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <HAL_Init+0x30>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005d2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005da:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005e2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f000 f82f 	bl	8000648 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f7ff ffc8 	bl	8000580 <HAL_InitTick>
  HAL_MspInit();
 80005f0:	f001 f894 	bl	800171c <HAL_MspInit>
}
 80005f4:	2000      	movs	r0, #0
 80005f6:	bd08      	pop	{r3, pc}
 80005f8:	40023c00 	.word	0x40023c00

080005fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005fc:	4a03      	ldr	r2, [pc, #12]	; (800060c <HAL_IncTick+0x10>)
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <HAL_IncTick+0x14>)
 8000600:	6811      	ldr	r1, [r2, #0]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	440b      	add	r3, r1
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	200000b4 	.word	0x200000b4
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000614:	4b01      	ldr	r3, [pc, #4]	; (800061c <HAL_GetTick+0x8>)
 8000616:	6818      	ldr	r0, [r3, #0]
}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	200000b4 	.word	0x200000b4

08000620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000620:	b538      	push	{r3, r4, r5, lr}
 8000622:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000624:	f7ff fff6 	bl	8000614 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000628:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800062a:	bf1c      	itt	ne
 800062c:	4b05      	ldrne	r3, [pc, #20]	; (8000644 <HAL_Delay+0x24>)
 800062e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000630:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000632:	bf18      	it	ne
 8000634:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000636:	f7ff ffed 	bl	8000614 <HAL_GetTick>
 800063a:	1b40      	subs	r0, r0, r5
 800063c:	4284      	cmp	r4, r0
 800063e:	d8fa      	bhi.n	8000636 <HAL_Delay+0x16>
  {
  }
}
 8000640:	bd38      	pop	{r3, r4, r5, pc}
 8000642:	bf00      	nop
 8000644:	20000000 	.word	0x20000000

08000648 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000648:	4a07      	ldr	r2, [pc, #28]	; (8000668 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800064a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000650:	041b      	lsls	r3, r3, #16
 8000652:	0c1b      	lsrs	r3, r3, #16
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000658:	0200      	lsls	r0, r0, #8
 800065a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000662:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000664:	60d3      	str	r3, [r2, #12]
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	68dc      	ldr	r4, [r3, #12]
 8000672:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000676:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800067c:	2b04      	cmp	r3, #4
 800067e:	bf28      	it	cs
 8000680:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000682:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000684:	f04f 0501 	mov.w	r5, #1
 8000688:	fa05 f303 	lsl.w	r3, r5, r3
 800068c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000690:	bf8c      	ite	hi
 8000692:	3c03      	subhi	r4, #3
 8000694:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000696:	4019      	ands	r1, r3
 8000698:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800069a:	fa05 f404 	lsl.w	r4, r5, r4
 800069e:	3c01      	subs	r4, #1
 80006a0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80006a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a4:	ea42 0201 	orr.w	r2, r2, r1
 80006a8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	bfad      	iteet	ge
 80006ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	f000 000f 	andlt.w	r0, r0, #15
 80006b6:	4b06      	ldrlt	r3, [pc, #24]	; (80006d0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	bfb5      	itete	lt
 80006be:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00
 80006d0:	e000ed14 	.word	0xe000ed14

080006d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006d4:	2800      	cmp	r0, #0
 80006d6:	db08      	blt.n	80006ea <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006d8:	0942      	lsrs	r2, r0, #5
 80006da:	2301      	movs	r3, #1
 80006dc:	f000 001f 	and.w	r0, r0, #31
 80006e0:	fa03 f000 	lsl.w	r0, r3, r0
 80006e4:	4b01      	ldr	r3, [pc, #4]	; (80006ec <HAL_NVIC_EnableIRQ+0x18>)
 80006e6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006ea:	4770      	bx	lr
 80006ec:	e000e100 	.word	0xe000e100

080006f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f0:	3801      	subs	r0, #1
 80006f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006f6:	d20a      	bcs.n	800070e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	4a07      	ldr	r2, [pc, #28]	; (8000718 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006fc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fe:	21f0      	movs	r1, #240	; 0xf0
 8000700:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000704:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000706:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000708:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800070e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000e010 	.word	0xe000e010
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800071c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000720:	2b02      	cmp	r3, #2
 8000722:	d003      	beq.n	800072c <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000728:	2001      	movs	r0, #1
 800072a:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800072c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800072e:	2305      	movs	r3, #5
 8000730:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000734:	6813      	ldr	r3, [r2, #0]
 8000736:	f023 0301 	bic.w	r3, r3, #1
 800073a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800073c:	2000      	movs	r0, #0
}
 800073e:	4770      	bx	lr

08000740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000744:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000746:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000748:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80008f8 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800074c:	4a68      	ldr	r2, [pc, #416]	; (80008f0 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800074e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80008fc <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000752:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000754:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000756:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000758:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 800075a:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800075c:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800075e:	42ac      	cmp	r4, r5
 8000760:	f040 80b0 	bne.w	80008c4 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000764:	684c      	ldr	r4, [r1, #4]
 8000766:	f024 0c10 	bic.w	ip, r4, #16
 800076a:	f10c 36ff 	add.w	r6, ip, #4294967295
 800076e:	2e01      	cmp	r6, #1
 8000770:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000774:	d812      	bhi.n	800079c <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000776:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000778:	2603      	movs	r6, #3
 800077a:	fa06 f60e 	lsl.w	r6, r6, lr
 800077e:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000782:	68ce      	ldr	r6, [r1, #12]
 8000784:	fa06 f60e 	lsl.w	r6, r6, lr
 8000788:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800078a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800078c:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800078e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000792:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000796:	409e      	lsls	r6, r3
 8000798:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800079a:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800079c:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 800079e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007a0:	fa06 f60e 	lsl.w	r6, r6, lr
 80007a4:	43f6      	mvns	r6, r6
 80007a6:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007aa:	688f      	ldr	r7, [r1, #8]
 80007ac:	fa07 f70e 	lsl.w	r7, r7, lr
 80007b0:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007b4:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80007b8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007ba:	d116      	bne.n	80007ea <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80007bc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80007c0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007c4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80007c8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007cc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80007d0:	f04f 0c0f 	mov.w	ip, #15
 80007d4:	fa0c fc0b 	lsl.w	ip, ip, fp
 80007d8:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007dc:	690f      	ldr	r7, [r1, #16]
 80007de:	fa07 f70b 	lsl.w	r7, r7, fp
 80007e2:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80007e6:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80007ea:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007ec:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007ee:	f004 0703 	and.w	r7, r4, #3
 80007f2:	fa07 fe0e 	lsl.w	lr, r7, lr
 80007f6:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80007fa:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007fc:	00e6      	lsls	r6, r4, #3
 80007fe:	d561      	bpl.n	80008c4 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000800:	f04f 0b00 	mov.w	fp, #0
 8000804:	f8cd b00c 	str.w	fp, [sp, #12]
 8000808:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800080c:	4e39      	ldr	r6, [pc, #228]	; (80008f4 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000812:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000816:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800081a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800081e:	9703      	str	r7, [sp, #12]
 8000820:	9f03      	ldr	r7, [sp, #12]
 8000822:	f023 0703 	bic.w	r7, r3, #3
 8000826:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800082a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800082e:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000832:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000836:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800083a:	f04f 0e0f 	mov.w	lr, #15
 800083e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000842:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000844:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000848:	d043      	beq.n	80008d2 <HAL_GPIO_Init+0x192>
 800084a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800084e:	42b0      	cmp	r0, r6
 8000850:	d041      	beq.n	80008d6 <HAL_GPIO_Init+0x196>
 8000852:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000856:	42b0      	cmp	r0, r6
 8000858:	d03f      	beq.n	80008da <HAL_GPIO_Init+0x19a>
 800085a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800085e:	42b0      	cmp	r0, r6
 8000860:	d03d      	beq.n	80008de <HAL_GPIO_Init+0x19e>
 8000862:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000866:	42b0      	cmp	r0, r6
 8000868:	d03b      	beq.n	80008e2 <HAL_GPIO_Init+0x1a2>
 800086a:	4548      	cmp	r0, r9
 800086c:	d03b      	beq.n	80008e6 <HAL_GPIO_Init+0x1a6>
 800086e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000872:	42b0      	cmp	r0, r6
 8000874:	d039      	beq.n	80008ea <HAL_GPIO_Init+0x1aa>
 8000876:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800087a:	42b0      	cmp	r0, r6
 800087c:	bf14      	ite	ne
 800087e:	2608      	movne	r6, #8
 8000880:	2607      	moveq	r6, #7
 8000882:	fa06 f60c 	lsl.w	r6, r6, ip
 8000886:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800088a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800088c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800088e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000890:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000894:	bf0c      	ite	eq
 8000896:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000898:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800089a:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 800089c:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800089e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80008a2:	bf0c      	ite	eq
 80008a4:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80008a6:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80008a8:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008aa:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008ac:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80008b0:	bf0c      	ite	eq
 80008b2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80008b4:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80008b6:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80008b8:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008ba:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008bc:	bf54      	ite	pl
 80008be:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80008c0:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80008c2:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008c4:	3301      	adds	r3, #1
 80008c6:	2b10      	cmp	r3, #16
 80008c8:	f47f af45 	bne.w	8000756 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008cc:	b005      	add	sp, #20
 80008ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008d2:	465e      	mov	r6, fp
 80008d4:	e7d5      	b.n	8000882 <HAL_GPIO_Init+0x142>
 80008d6:	2601      	movs	r6, #1
 80008d8:	e7d3      	b.n	8000882 <HAL_GPIO_Init+0x142>
 80008da:	2602      	movs	r6, #2
 80008dc:	e7d1      	b.n	8000882 <HAL_GPIO_Init+0x142>
 80008de:	2603      	movs	r6, #3
 80008e0:	e7cf      	b.n	8000882 <HAL_GPIO_Init+0x142>
 80008e2:	2604      	movs	r6, #4
 80008e4:	e7cd      	b.n	8000882 <HAL_GPIO_Init+0x142>
 80008e6:	2605      	movs	r6, #5
 80008e8:	e7cb      	b.n	8000882 <HAL_GPIO_Init+0x142>
 80008ea:	2606      	movs	r6, #6
 80008ec:	e7c9      	b.n	8000882 <HAL_GPIO_Init+0x142>
 80008ee:	bf00      	nop
 80008f0:	40013c00 	.word	0x40013c00
 80008f4:	40020000 	.word	0x40020000
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40021400 	.word	0x40021400

08000900 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000900:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000904:	4604      	mov	r4, r0
 8000906:	b908      	cbnz	r0, 800090c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000908:	2001      	movs	r0, #1
 800090a:	e03f      	b.n	800098c <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800090c:	6803      	ldr	r3, [r0, #0]
 800090e:	07dd      	lsls	r5, r3, #31
 8000910:	d410      	bmi.n	8000934 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000912:	6823      	ldr	r3, [r4, #0]
 8000914:	0798      	lsls	r0, r3, #30
 8000916:	d45a      	bmi.n	80009ce <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000918:	6823      	ldr	r3, [r4, #0]
 800091a:	071a      	lsls	r2, r3, #28
 800091c:	f100 809c 	bmi.w	8000a58 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000920:	6823      	ldr	r3, [r4, #0]
 8000922:	075b      	lsls	r3, r3, #29
 8000924:	f100 80ba 	bmi.w	8000a9c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000928:	69a0      	ldr	r0, [r4, #24]
 800092a:	2800      	cmp	r0, #0
 800092c:	f040 811b 	bne.w	8000b66 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000930:	2000      	movs	r0, #0
 8000932:	e02b      	b.n	800098c <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000934:	4ba4      	ldr	r3, [pc, #656]	; (8000bc8 <HAL_RCC_OscConfig+0x2c8>)
 8000936:	689a      	ldr	r2, [r3, #8]
 8000938:	f002 020c 	and.w	r2, r2, #12
 800093c:	2a04      	cmp	r2, #4
 800093e:	d007      	beq.n	8000950 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000940:	689a      	ldr	r2, [r3, #8]
 8000942:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000946:	2a08      	cmp	r2, #8
 8000948:	d10a      	bne.n	8000960 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	0259      	lsls	r1, r3, #9
 800094e:	d507      	bpl.n	8000960 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000950:	4b9d      	ldr	r3, [pc, #628]	; (8000bc8 <HAL_RCC_OscConfig+0x2c8>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	039a      	lsls	r2, r3, #14
 8000956:	d5dc      	bpl.n	8000912 <HAL_RCC_OscConfig+0x12>
 8000958:	6863      	ldr	r3, [r4, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1d9      	bne.n	8000912 <HAL_RCC_OscConfig+0x12>
 800095e:	e7d3      	b.n	8000908 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000960:	6863      	ldr	r3, [r4, #4]
 8000962:	4d99      	ldr	r5, [pc, #612]	; (8000bc8 <HAL_RCC_OscConfig+0x2c8>)
 8000964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000968:	d113      	bne.n	8000992 <HAL_RCC_OscConfig+0x92>
 800096a:	682b      	ldr	r3, [r5, #0]
 800096c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000970:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000972:	f7ff fe4f 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000976:	4d94      	ldr	r5, [pc, #592]	; (8000bc8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000978:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800097a:	682b      	ldr	r3, [r5, #0]
 800097c:	039b      	lsls	r3, r3, #14
 800097e:	d4c8      	bmi.n	8000912 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000980:	f7ff fe48 	bl	8000614 <HAL_GetTick>
 8000984:	1b80      	subs	r0, r0, r6
 8000986:	2864      	cmp	r0, #100	; 0x64
 8000988:	d9f7      	bls.n	800097a <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800098a:	2003      	movs	r0, #3
}
 800098c:	b002      	add	sp, #8
 800098e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000992:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000996:	d104      	bne.n	80009a2 <HAL_RCC_OscConfig+0xa2>
 8000998:	682b      	ldr	r3, [r5, #0]
 800099a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800099e:	602b      	str	r3, [r5, #0]
 80009a0:	e7e3      	b.n	800096a <HAL_RCC_OscConfig+0x6a>
 80009a2:	682a      	ldr	r2, [r5, #0]
 80009a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009a8:	602a      	str	r2, [r5, #0]
 80009aa:	682a      	ldr	r2, [r5, #0]
 80009ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80009b0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d1dd      	bne.n	8000972 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 80009b6:	f7ff fe2d 	bl	8000614 <HAL_GetTick>
 80009ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009bc:	682b      	ldr	r3, [r5, #0]
 80009be:	039f      	lsls	r7, r3, #14
 80009c0:	d5a7      	bpl.n	8000912 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009c2:	f7ff fe27 	bl	8000614 <HAL_GetTick>
 80009c6:	1b80      	subs	r0, r0, r6
 80009c8:	2864      	cmp	r0, #100	; 0x64
 80009ca:	d9f7      	bls.n	80009bc <HAL_RCC_OscConfig+0xbc>
 80009cc:	e7dd      	b.n	800098a <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009ce:	4b7e      	ldr	r3, [pc, #504]	; (8000bc8 <HAL_RCC_OscConfig+0x2c8>)
 80009d0:	689a      	ldr	r2, [r3, #8]
 80009d2:	f012 0f0c 	tst.w	r2, #12
 80009d6:	d007      	beq.n	80009e8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009d8:	689a      	ldr	r2, [r3, #8]
 80009da:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009de:	2a08      	cmp	r2, #8
 80009e0:	d111      	bne.n	8000a06 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	025e      	lsls	r6, r3, #9
 80009e6:	d40e      	bmi.n	8000a06 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009e8:	4b77      	ldr	r3, [pc, #476]	; (8000bc8 <HAL_RCC_OscConfig+0x2c8>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	0795      	lsls	r5, r2, #30
 80009ee:	d502      	bpl.n	80009f6 <HAL_RCC_OscConfig+0xf6>
 80009f0:	68e2      	ldr	r2, [r4, #12]
 80009f2:	2a01      	cmp	r2, #1
 80009f4:	d188      	bne.n	8000908 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	6921      	ldr	r1, [r4, #16]
 80009fa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80009fe:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000a02:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a04:	e788      	b.n	8000918 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a06:	68e2      	ldr	r2, [r4, #12]
 8000a08:	4b70      	ldr	r3, [pc, #448]	; (8000bcc <HAL_RCC_OscConfig+0x2cc>)
 8000a0a:	b1b2      	cbz	r2, 8000a3a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a10:	f7ff fe00 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a14:	4d6c      	ldr	r5, [pc, #432]	; (8000bc8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000a16:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a18:	682b      	ldr	r3, [r5, #0]
 8000a1a:	0798      	lsls	r0, r3, #30
 8000a1c:	d507      	bpl.n	8000a2e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a1e:	682b      	ldr	r3, [r5, #0]
 8000a20:	6922      	ldr	r2, [r4, #16]
 8000a22:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a26:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a2a:	602b      	str	r3, [r5, #0]
 8000a2c:	e774      	b.n	8000918 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a2e:	f7ff fdf1 	bl	8000614 <HAL_GetTick>
 8000a32:	1b80      	subs	r0, r0, r6
 8000a34:	2802      	cmp	r0, #2
 8000a36:	d9ef      	bls.n	8000a18 <HAL_RCC_OscConfig+0x118>
 8000a38:	e7a7      	b.n	800098a <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000a3a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a3c:	f7ff fdea 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a40:	4d61      	ldr	r5, [pc, #388]	; (8000bc8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000a42:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a44:	682b      	ldr	r3, [r5, #0]
 8000a46:	0799      	lsls	r1, r3, #30
 8000a48:	f57f af66 	bpl.w	8000918 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a4c:	f7ff fde2 	bl	8000614 <HAL_GetTick>
 8000a50:	1b80      	subs	r0, r0, r6
 8000a52:	2802      	cmp	r0, #2
 8000a54:	d9f6      	bls.n	8000a44 <HAL_RCC_OscConfig+0x144>
 8000a56:	e798      	b.n	800098a <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a58:	6962      	ldr	r2, [r4, #20]
 8000a5a:	4b5d      	ldr	r3, [pc, #372]	; (8000bd0 <HAL_RCC_OscConfig+0x2d0>)
 8000a5c:	b17a      	cbz	r2, 8000a7e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a5e:	2201      	movs	r2, #1
 8000a60:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a62:	f7ff fdd7 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a66:	4d58      	ldr	r5, [pc, #352]	; (8000bc8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a68:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a6a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a6c:	079f      	lsls	r7, r3, #30
 8000a6e:	f53f af57 	bmi.w	8000920 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a72:	f7ff fdcf 	bl	8000614 <HAL_GetTick>
 8000a76:	1b80      	subs	r0, r0, r6
 8000a78:	2802      	cmp	r0, #2
 8000a7a:	d9f6      	bls.n	8000a6a <HAL_RCC_OscConfig+0x16a>
 8000a7c:	e785      	b.n	800098a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000a7e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a80:	f7ff fdc8 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a84:	4d50      	ldr	r5, [pc, #320]	; (8000bc8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a86:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a88:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a8a:	0798      	lsls	r0, r3, #30
 8000a8c:	f57f af48 	bpl.w	8000920 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a90:	f7ff fdc0 	bl	8000614 <HAL_GetTick>
 8000a94:	1b80      	subs	r0, r0, r6
 8000a96:	2802      	cmp	r0, #2
 8000a98:	d9f6      	bls.n	8000a88 <HAL_RCC_OscConfig+0x188>
 8000a9a:	e776      	b.n	800098a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a9c:	4b4a      	ldr	r3, [pc, #296]	; (8000bc8 <HAL_RCC_OscConfig+0x2c8>)
 8000a9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aa0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000aa4:	d128      	bne.n	8000af8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	9201      	str	r2, [sp, #4]
 8000aa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aaa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000aae:	641a      	str	r2, [r3, #64]	; 0x40
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	9301      	str	r3, [sp, #4]
 8000ab8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000aba:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000abc:	4d45      	ldr	r5, [pc, #276]	; (8000bd4 <HAL_RCC_OscConfig+0x2d4>)
 8000abe:	682b      	ldr	r3, [r5, #0]
 8000ac0:	05d9      	lsls	r1, r3, #23
 8000ac2:	d51b      	bpl.n	8000afc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ac4:	68a3      	ldr	r3, [r4, #8]
 8000ac6:	4d40      	ldr	r5, [pc, #256]	; (8000bc8 <HAL_RCC_OscConfig+0x2c8>)
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d127      	bne.n	8000b1c <HAL_RCC_OscConfig+0x21c>
 8000acc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000ad4:	f7ff fd9e 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ad8:	4d3b      	ldr	r5, [pc, #236]	; (8000bc8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000ada:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000adc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ae0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ae2:	079b      	lsls	r3, r3, #30
 8000ae4:	d539      	bpl.n	8000b5a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	f43f af1e 	beq.w	8000928 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000aec:	4a36      	ldr	r2, [pc, #216]	; (8000bc8 <HAL_RCC_OscConfig+0x2c8>)
 8000aee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40
 8000af6:	e717      	b.n	8000928 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000af8:	2600      	movs	r6, #0
 8000afa:	e7df      	b.n	8000abc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000afc:	682b      	ldr	r3, [r5, #0]
 8000afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b02:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000b04:	f7ff fd86 	bl	8000614 <HAL_GetTick>
 8000b08:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b0a:	682b      	ldr	r3, [r5, #0]
 8000b0c:	05da      	lsls	r2, r3, #23
 8000b0e:	d4d9      	bmi.n	8000ac4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b10:	f7ff fd80 	bl	8000614 <HAL_GetTick>
 8000b14:	1bc0      	subs	r0, r0, r7
 8000b16:	2802      	cmp	r0, #2
 8000b18:	d9f7      	bls.n	8000b0a <HAL_RCC_OscConfig+0x20a>
 8000b1a:	e736      	b.n	800098a <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b1c:	2b05      	cmp	r3, #5
 8000b1e:	d104      	bne.n	8000b2a <HAL_RCC_OscConfig+0x22a>
 8000b20:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b22:	f043 0304 	orr.w	r3, r3, #4
 8000b26:	672b      	str	r3, [r5, #112]	; 0x70
 8000b28:	e7d0      	b.n	8000acc <HAL_RCC_OscConfig+0x1cc>
 8000b2a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b2c:	f022 0201 	bic.w	r2, r2, #1
 8000b30:	672a      	str	r2, [r5, #112]	; 0x70
 8000b32:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b34:	f022 0204 	bic.w	r2, r2, #4
 8000b38:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d1ca      	bne.n	8000ad4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b3e:	f7ff fd69 	bl	8000614 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b42:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b46:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b48:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b4a:	0798      	lsls	r0, r3, #30
 8000b4c:	d5cb      	bpl.n	8000ae6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b4e:	f7ff fd61 	bl	8000614 <HAL_GetTick>
 8000b52:	1bc0      	subs	r0, r0, r7
 8000b54:	4540      	cmp	r0, r8
 8000b56:	d9f7      	bls.n	8000b48 <HAL_RCC_OscConfig+0x248>
 8000b58:	e717      	b.n	800098a <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b5a:	f7ff fd5b 	bl	8000614 <HAL_GetTick>
 8000b5e:	1bc0      	subs	r0, r0, r7
 8000b60:	4540      	cmp	r0, r8
 8000b62:	d9bd      	bls.n	8000ae0 <HAL_RCC_OscConfig+0x1e0>
 8000b64:	e711      	b.n	800098a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b66:	4d18      	ldr	r5, [pc, #96]	; (8000bc8 <HAL_RCC_OscConfig+0x2c8>)
 8000b68:	68ab      	ldr	r3, [r5, #8]
 8000b6a:	f003 030c 	and.w	r3, r3, #12
 8000b6e:	2b08      	cmp	r3, #8
 8000b70:	d047      	beq.n	8000c02 <HAL_RCC_OscConfig+0x302>
 8000b72:	4e19      	ldr	r6, [pc, #100]	; (8000bd8 <HAL_RCC_OscConfig+0x2d8>)
 8000b74:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b76:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000b78:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b7a:	d135      	bne.n	8000be8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b7c:	f7ff fd4a 	bl	8000614 <HAL_GetTick>
 8000b80:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b82:	682b      	ldr	r3, [r5, #0]
 8000b84:	0199      	lsls	r1, r3, #6
 8000b86:	d429      	bmi.n	8000bdc <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b88:	6a22      	ldr	r2, [r4, #32]
 8000b8a:	69e3      	ldr	r3, [r4, #28]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b90:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b94:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b96:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b9a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b9c:	4c0a      	ldr	r4, [pc, #40]	; (8000bc8 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b9e:	0852      	lsrs	r2, r2, #1
 8000ba0:	3a01      	subs	r2, #1
 8000ba2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ba6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ba8:	2301      	movs	r3, #1
 8000baa:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000bac:	f7ff fd32 	bl	8000614 <HAL_GetTick>
 8000bb0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bb2:	6823      	ldr	r3, [r4, #0]
 8000bb4:	019a      	lsls	r2, r3, #6
 8000bb6:	f53f aebb 	bmi.w	8000930 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bba:	f7ff fd2b 	bl	8000614 <HAL_GetTick>
 8000bbe:	1b40      	subs	r0, r0, r5
 8000bc0:	2802      	cmp	r0, #2
 8000bc2:	d9f6      	bls.n	8000bb2 <HAL_RCC_OscConfig+0x2b2>
 8000bc4:	e6e1      	b.n	800098a <HAL_RCC_OscConfig+0x8a>
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	42470000 	.word	0x42470000
 8000bd0:	42470e80 	.word	0x42470e80
 8000bd4:	40007000 	.word	0x40007000
 8000bd8:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bdc:	f7ff fd1a 	bl	8000614 <HAL_GetTick>
 8000be0:	1bc0      	subs	r0, r0, r7
 8000be2:	2802      	cmp	r0, #2
 8000be4:	d9cd      	bls.n	8000b82 <HAL_RCC_OscConfig+0x282>
 8000be6:	e6d0      	b.n	800098a <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000be8:	f7ff fd14 	bl	8000614 <HAL_GetTick>
 8000bec:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bee:	682b      	ldr	r3, [r5, #0]
 8000bf0:	019b      	lsls	r3, r3, #6
 8000bf2:	f57f ae9d 	bpl.w	8000930 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bf6:	f7ff fd0d 	bl	8000614 <HAL_GetTick>
 8000bfa:	1b00      	subs	r0, r0, r4
 8000bfc:	2802      	cmp	r0, #2
 8000bfe:	d9f6      	bls.n	8000bee <HAL_RCC_OscConfig+0x2ee>
 8000c00:	e6c3      	b.n	800098a <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c02:	2801      	cmp	r0, #1
 8000c04:	f43f aec2 	beq.w	800098c <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8000c08:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c0a:	69e3      	ldr	r3, [r4, #28]
 8000c0c:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000c10:	429a      	cmp	r2, r3
 8000c12:	f47f ae79 	bne.w	8000908 <HAL_RCC_OscConfig+0x8>
 8000c16:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000c18:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	f47f ae73 	bne.w	8000908 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000c22:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000c28:	4003      	ands	r3, r0
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	f47f ae6c 	bne.w	8000908 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000c30:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000c32:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000c36:	4293      	cmp	r3, r2
 8000c38:	f47f ae66 	bne.w	8000908 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000c3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000c3e:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000c42:	1ac0      	subs	r0, r0, r3
 8000c44:	bf18      	it	ne
 8000c46:	2001      	movne	r0, #1
 8000c48:	e6a0      	b.n	800098c <HAL_RCC_OscConfig+0x8c>
 8000c4a:	bf00      	nop

08000c4c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c4c:	4913      	ldr	r1, [pc, #76]	; (8000c9c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000c4e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c50:	688b      	ldr	r3, [r1, #8]
 8000c52:	f003 030c 	and.w	r3, r3, #12
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	d003      	beq.n	8000c62 <HAL_RCC_GetSysClockFreq+0x16>
 8000c5a:	2b08      	cmp	r3, #8
 8000c5c:	d003      	beq.n	8000c66 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c5e:	4810      	ldr	r0, [pc, #64]	; (8000ca0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c60:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c62:	4810      	ldr	r0, [pc, #64]	; (8000ca4 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c64:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c66:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c68:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c6a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c6c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c70:	bf14      	ite	ne
 8000c72:	480c      	ldrne	r0, [pc, #48]	; (8000ca4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c74:	480a      	ldreq	r0, [pc, #40]	; (8000ca0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c76:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c7a:	bf18      	it	ne
 8000c7c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c7e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c82:	fba1 0100 	umull	r0, r1, r1, r0
 8000c86:	f7ff faf3 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c8a:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <HAL_RCC_GetSysClockFreq+0x50>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c92:	3301      	adds	r3, #1
 8000c94:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c96:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c9a:	bd08      	pop	{r3, pc}
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	00f42400 	.word	0x00f42400
 8000ca4:	007a1200 	.word	0x007a1200

08000ca8 <HAL_RCC_ClockConfig>:
{
 8000ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cac:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000cae:	4604      	mov	r4, r0
 8000cb0:	b910      	cbnz	r0, 8000cb8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000cb8:	4b44      	ldr	r3, [pc, #272]	; (8000dcc <HAL_RCC_ClockConfig+0x124>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	f002 020f 	and.w	r2, r2, #15
 8000cc0:	428a      	cmp	r2, r1
 8000cc2:	d329      	bcc.n	8000d18 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cc4:	6821      	ldr	r1, [r4, #0]
 8000cc6:	078f      	lsls	r7, r1, #30
 8000cc8:	d42e      	bmi.n	8000d28 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cca:	07c8      	lsls	r0, r1, #31
 8000ccc:	d441      	bmi.n	8000d52 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000cce:	4b3f      	ldr	r3, [pc, #252]	; (8000dcc <HAL_RCC_ClockConfig+0x124>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	f002 020f 	and.w	r2, r2, #15
 8000cd6:	4295      	cmp	r5, r2
 8000cd8:	d367      	bcc.n	8000daa <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cda:	6822      	ldr	r2, [r4, #0]
 8000cdc:	0751      	lsls	r1, r2, #29
 8000cde:	d46d      	bmi.n	8000dbc <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ce0:	0713      	lsls	r3, r2, #28
 8000ce2:	d507      	bpl.n	8000cf4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ce4:	4a3a      	ldr	r2, [pc, #232]	; (8000dd0 <HAL_RCC_ClockConfig+0x128>)
 8000ce6:	6921      	ldr	r1, [r4, #16]
 8000ce8:	6893      	ldr	r3, [r2, #8]
 8000cea:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000cee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cf2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cf4:	f7ff ffaa 	bl	8000c4c <HAL_RCC_GetSysClockFreq>
 8000cf8:	4b35      	ldr	r3, [pc, #212]	; (8000dd0 <HAL_RCC_ClockConfig+0x128>)
 8000cfa:	4a36      	ldr	r2, [pc, #216]	; (8000dd4 <HAL_RCC_ClockConfig+0x12c>)
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d02:	5cd3      	ldrb	r3, [r2, r3]
 8000d04:	40d8      	lsrs	r0, r3
 8000d06:	4b34      	ldr	r3, [pc, #208]	; (8000dd8 <HAL_RCC_ClockConfig+0x130>)
 8000d08:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000d0a:	4b34      	ldr	r3, [pc, #208]	; (8000ddc <HAL_RCC_ClockConfig+0x134>)
 8000d0c:	6818      	ldr	r0, [r3, #0]
 8000d0e:	f7ff fc37 	bl	8000580 <HAL_InitTick>
  return HAL_OK;
 8000d12:	2000      	movs	r0, #0
 8000d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d18:	b2ca      	uxtb	r2, r1
 8000d1a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 030f 	and.w	r3, r3, #15
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d1c5      	bne.n	8000cb2 <HAL_RCC_ClockConfig+0xa>
 8000d26:	e7cd      	b.n	8000cc4 <HAL_RCC_ClockConfig+0x1c>
 8000d28:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d2a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d2e:	bf1e      	ittt	ne
 8000d30:	689a      	ldrne	r2, [r3, #8]
 8000d32:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000d36:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d38:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d3a:	bf42      	ittt	mi
 8000d3c:	689a      	ldrmi	r2, [r3, #8]
 8000d3e:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000d42:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d44:	689a      	ldr	r2, [r3, #8]
 8000d46:	68a0      	ldr	r0, [r4, #8]
 8000d48:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d4c:	4302      	orrs	r2, r0
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	e7bb      	b.n	8000cca <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d52:	6862      	ldr	r2, [r4, #4]
 8000d54:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <HAL_RCC_ClockConfig+0x128>)
 8000d56:	2a01      	cmp	r2, #1
 8000d58:	d11d      	bne.n	8000d96 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d60:	d0a7      	beq.n	8000cb2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d62:	4e1b      	ldr	r6, [pc, #108]	; (8000dd0 <HAL_RCC_ClockConfig+0x128>)
 8000d64:	68b3      	ldr	r3, [r6, #8]
 8000d66:	f023 0303 	bic.w	r3, r3, #3
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d6e:	f7ff fc51 	bl	8000614 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d72:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d76:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d78:	68b3      	ldr	r3, [r6, #8]
 8000d7a:	6862      	ldr	r2, [r4, #4]
 8000d7c:	f003 030c 	and.w	r3, r3, #12
 8000d80:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d84:	d0a3      	beq.n	8000cce <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d86:	f7ff fc45 	bl	8000614 <HAL_GetTick>
 8000d8a:	1bc0      	subs	r0, r0, r7
 8000d8c:	4540      	cmp	r0, r8
 8000d8e:	d9f3      	bls.n	8000d78 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000d90:	2003      	movs	r0, #3
}
 8000d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d96:	1e91      	subs	r1, r2, #2
 8000d98:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d9a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d9c:	d802      	bhi.n	8000da4 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d9e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000da2:	e7dd      	b.n	8000d60 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da4:	f013 0f02 	tst.w	r3, #2
 8000da8:	e7da      	b.n	8000d60 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000daa:	b2ea      	uxtb	r2, r5
 8000dac:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 030f 	and.w	r3, r3, #15
 8000db4:	429d      	cmp	r5, r3
 8000db6:	f47f af7c 	bne.w	8000cb2 <HAL_RCC_ClockConfig+0xa>
 8000dba:	e78e      	b.n	8000cda <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dbc:	4904      	ldr	r1, [pc, #16]	; (8000dd0 <HAL_RCC_ClockConfig+0x128>)
 8000dbe:	68e0      	ldr	r0, [r4, #12]
 8000dc0:	688b      	ldr	r3, [r1, #8]
 8000dc2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000dc6:	4303      	orrs	r3, r0
 8000dc8:	608b      	str	r3, [r1, #8]
 8000dca:	e789      	b.n	8000ce0 <HAL_RCC_ClockConfig+0x38>
 8000dcc:	40023c00 	.word	0x40023c00
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	080023e2 	.word	0x080023e2
 8000dd8:	2000001c 	.word	0x2000001c
 8000ddc:	20000004 	.word	0x20000004

08000de0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000dea:	5cd3      	ldrb	r3, [r2, r3]
 8000dec:	4a03      	ldr	r2, [pc, #12]	; (8000dfc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000dee:	6810      	ldr	r0, [r2, #0]
}
 8000df0:	40d8      	lsrs	r0, r3
 8000df2:	4770      	bx	lr
 8000df4:	40023800 	.word	0x40023800
 8000df8:	080023f2 	.word	0x080023f2
 8000dfc:	2000001c 	.word	0x2000001c

08000e00 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000e0a:	5cd3      	ldrb	r3, [r2, r3]
 8000e0c:	4a03      	ldr	r2, [pc, #12]	; (8000e1c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e0e:	6810      	ldr	r0, [r2, #0]
}
 8000e10:	40d8      	lsrs	r0, r3
 8000e12:	4770      	bx	lr
 8000e14:	40023800 	.word	0x40023800
 8000e18:	080023f2 	.word	0x080023f2
 8000e1c:	2000001c 	.word	0x2000001c

08000e20 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000e20:	6803      	ldr	r3, [r0, #0]
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000e28:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000e2a:	695a      	ldr	r2, [r3, #20]
 8000e2c:	f022 0201 	bic.w	r2, r2, #1
 8000e30:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000e32:	2320      	movs	r3, #32
 8000e34:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000e38:	4770      	bx	lr
	...

08000e3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000e3c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e3e:	6803      	ldr	r3, [r0, #0]
 8000e40:	68c1      	ldr	r1, [r0, #12]
 8000e42:	691a      	ldr	r2, [r3, #16]
{
 8000e44:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e46:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e4e:	6925      	ldr	r5, [r4, #16]
 8000e50:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8000e52:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e54:	69c0      	ldr	r0, [r0, #28]
 8000e56:	432a      	orrs	r2, r5
 8000e58:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000e5a:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e5e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8000e60:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e64:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8000e66:	430a      	orrs	r2, r1
 8000e68:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000e6a:	695a      	ldr	r2, [r3, #20]
 8000e6c:	69a1      	ldr	r1, [r4, #24]
 8000e6e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000e72:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e74:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000e78:	615a      	str	r2, [r3, #20]
 8000e7a:	4a25      	ldr	r2, [pc, #148]	; (8000f10 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e7c:	d129      	bne.n	8000ed2 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d003      	beq.n	8000e8a <UART_SetConfig+0x4e>
 8000e82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d120      	bne.n	8000ecc <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000e8a:	f7ff ffb9 	bl	8000e00 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000e8e:	6862      	ldr	r2, [r4, #4]
 8000e90:	6825      	ldr	r5, [r4, #0]
 8000e92:	1892      	adds	r2, r2, r2
 8000e94:	f04f 0300 	mov.w	r3, #0
 8000e98:	f04f 0119 	mov.w	r1, #25
 8000e9c:	415b      	adcs	r3, r3
 8000e9e:	fba0 0101 	umull	r0, r1, r0, r1
 8000ea2:	f7ff f9e5 	bl	8000270 <__aeabi_uldivmod>
 8000ea6:	2164      	movs	r1, #100	; 0x64
 8000ea8:	fbb0 f4f1 	udiv	r4, r0, r1
 8000eac:	fb01 0314 	mls	r3, r1, r4, r0
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	3332      	adds	r3, #50	; 0x32
 8000eb4:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb8:	f003 0207 	and.w	r2, r3, #7
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8000ec2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000ec6:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000ec8:	60ab      	str	r3, [r5, #8]
 8000eca:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8000ecc:	f7ff ff88 	bl	8000de0 <HAL_RCC_GetPCLK1Freq>
 8000ed0:	e7dd      	b.n	8000e8e <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d002      	beq.n	8000edc <UART_SetConfig+0xa0>
 8000ed6:	4a0f      	ldr	r2, [pc, #60]	; (8000f14 <UART_SetConfig+0xd8>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d116      	bne.n	8000f0a <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8000edc:	f7ff ff90 	bl	8000e00 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000ee0:	6863      	ldr	r3, [r4, #4]
 8000ee2:	6825      	ldr	r5, [r4, #0]
 8000ee4:	2119      	movs	r1, #25
 8000ee6:	009a      	lsls	r2, r3, #2
 8000ee8:	fba0 0101 	umull	r0, r1, r0, r1
 8000eec:	0f9b      	lsrs	r3, r3, #30
 8000eee:	f7ff f9bf 	bl	8000270 <__aeabi_uldivmod>
 8000ef2:	2264      	movs	r2, #100	; 0x64
 8000ef4:	fbb0 f1f2 	udiv	r1, r0, r2
 8000ef8:	fb02 0311 	mls	r3, r2, r1, r0
 8000efc:	011b      	lsls	r3, r3, #4
 8000efe:	3332      	adds	r3, #50	; 0x32
 8000f00:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f04:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8000f08:	e7de      	b.n	8000ec8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8000f0a:	f7ff ff69 	bl	8000de0 <HAL_RCC_GetPCLK1Freq>
 8000f0e:	e7e7      	b.n	8000ee0 <UART_SetConfig+0xa4>
 8000f10:	40011000 	.word	0x40011000
 8000f14:	40011400 	.word	0x40011400

08000f18 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f1a:	4604      	mov	r4, r0
 8000f1c:	460e      	mov	r6, r1
 8000f1e:	4617      	mov	r7, r2
 8000f20:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000f22:	6821      	ldr	r1, [r4, #0]
 8000f24:	680b      	ldr	r3, [r1, #0]
 8000f26:	ea36 0303 	bics.w	r3, r6, r3
 8000f2a:	d101      	bne.n	8000f30 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000f2c:	2000      	movs	r0, #0
}
 8000f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000f30:	1c6b      	adds	r3, r5, #1
 8000f32:	d0f7      	beq.n	8000f24 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f34:	b995      	cbnz	r5, 8000f5c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000f36:	6823      	ldr	r3, [r4, #0]
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000f3e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f40:	695a      	ldr	r2, [r3, #20]
 8000f42:	f022 0201 	bic.w	r2, r2, #1
 8000f46:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000f48:	2320      	movs	r3, #32
 8000f4a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000f4e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000f52:	2300      	movs	r3, #0
 8000f54:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000f58:	2003      	movs	r0, #3
 8000f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f5c:	f7ff fb5a 	bl	8000614 <HAL_GetTick>
 8000f60:	1bc0      	subs	r0, r0, r7
 8000f62:	4285      	cmp	r5, r0
 8000f64:	d2dd      	bcs.n	8000f22 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000f66:	e7e6      	b.n	8000f36 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000f68 <HAL_UART_Init>:
{
 8000f68:	b510      	push	{r4, lr}
  if (huart == NULL)
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	b340      	cbz	r0, 8000fc0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8000f6e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f76:	b91b      	cbnz	r3, 8000f80 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000f78:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000f7c:	f000 fbea 	bl	8001754 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8000f80:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000f82:	2324      	movs	r3, #36	; 0x24
 8000f84:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000f88:	68d3      	ldr	r3, [r2, #12]
 8000f8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f8e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000f90:	4620      	mov	r0, r4
 8000f92:	f7ff ff53 	bl	8000e3c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f96:	6823      	ldr	r3, [r4, #0]
 8000f98:	691a      	ldr	r2, [r3, #16]
 8000f9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000f9e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000fa0:	695a      	ldr	r2, [r3, #20]
 8000fa2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000fa6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000fa8:	68da      	ldr	r2, [r3, #12]
 8000faa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000fae:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fb0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8000fb2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fb4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000fb6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000fba:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000fbe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fc0:	2001      	movs	r0, #1
}
 8000fc2:	bd10      	pop	{r4, pc}

08000fc4 <HAL_UART_Transmit>:
{
 8000fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fc8:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8000fca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000fce:	2b20      	cmp	r3, #32
{
 8000fd0:	4604      	mov	r4, r0
 8000fd2:	460d      	mov	r5, r1
 8000fd4:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8000fd6:	d151      	bne.n	800107c <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8000fd8:	2900      	cmp	r1, #0
 8000fda:	d04c      	beq.n	8001076 <HAL_UART_Transmit+0xb2>
 8000fdc:	2a00      	cmp	r2, #0
 8000fde:	d04a      	beq.n	8001076 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8000fe0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d049      	beq.n	800107c <HAL_UART_Transmit+0xb8>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fee:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000ff2:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ff4:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000ff8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000ffc:	f7ff fb0a 	bl	8000614 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001000:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001004:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001006:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 800100a:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 800100e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001010:	b29b      	uxth	r3, r3
 8001012:	b95b      	cbnz	r3, 800102c <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001014:	463b      	mov	r3, r7
 8001016:	4632      	mov	r2, r6
 8001018:	2140      	movs	r1, #64	; 0x40
 800101a:	4620      	mov	r0, r4
 800101c:	f7ff ff7c 	bl	8000f18 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001020:	b9a0      	cbnz	r0, 800104c <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 8001022:	2320      	movs	r3, #32
 8001024:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 800102c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800102e:	3b01      	subs	r3, #1
 8001030:	b29b      	uxth	r3, r3
 8001032:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001034:	68a3      	ldr	r3, [r4, #8]
 8001036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800103a:	4632      	mov	r2, r6
 800103c:	463b      	mov	r3, r7
 800103e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001042:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001044:	d10e      	bne.n	8001064 <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001046:	f7ff ff67 	bl	8000f18 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800104a:	b110      	cbz	r0, 8001052 <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 800104c:	2003      	movs	r0, #3
 800104e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001052:	882b      	ldrh	r3, [r5, #0]
 8001054:	6822      	ldr	r2, [r4, #0]
 8001056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800105a:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800105c:	6923      	ldr	r3, [r4, #16]
 800105e:	b943      	cbnz	r3, 8001072 <HAL_UART_Transmit+0xae>
          pData += 2U;
 8001060:	3502      	adds	r5, #2
 8001062:	e7d4      	b.n	800100e <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001064:	f7ff ff58 	bl	8000f18 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001068:	2800      	cmp	r0, #0
 800106a:	d1ef      	bne.n	800104c <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800106c:	6823      	ldr	r3, [r4, #0]
 800106e:	782a      	ldrb	r2, [r5, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	3501      	adds	r5, #1
 8001074:	e7cb      	b.n	800100e <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 8001076:	2001      	movs	r0, #1
 8001078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800107c:	2002      	movs	r0, #2
}
 800107e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001082 <HAL_UART_TxCpltCallback>:
 8001082:	4770      	bx	lr

08001084 <HAL_UART_RxCpltCallback>:
 8001084:	4770      	bx	lr

08001086 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001086:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800108a:	2b22      	cmp	r3, #34	; 0x22
{
 800108c:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800108e:	d136      	bne.n	80010fe <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001090:	6883      	ldr	r3, [r0, #8]
 8001092:	6901      	ldr	r1, [r0, #16]
 8001094:	6802      	ldr	r2, [r0, #0]
 8001096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800109a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800109c:	d123      	bne.n	80010e6 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800109e:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80010a0:	b9e9      	cbnz	r1, 80010de <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80010a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010a6:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80010aa:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80010ac:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80010ae:	3c01      	subs	r4, #1
 80010b0:	b2a4      	uxth	r4, r4
 80010b2:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80010b4:	b98c      	cbnz	r4, 80010da <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80010b6:	6803      	ldr	r3, [r0, #0]
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	f022 0220 	bic.w	r2, r2, #32
 80010be:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010c6:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80010c8:	695a      	ldr	r2, [r3, #20]
 80010ca:	f022 0201 	bic.w	r2, r2, #1
 80010ce:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80010d0:	2320      	movs	r3, #32
 80010d2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80010d6:	f7ff ffd5 	bl	8001084 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 80010da:	2000      	movs	r0, #0
}
 80010dc:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	f823 2b01 	strh.w	r2, [r3], #1
 80010e4:	e7e1      	b.n	80010aa <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80010e6:	b921      	cbnz	r1, 80010f2 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80010e8:	1c59      	adds	r1, r3, #1
 80010ea:	6852      	ldr	r2, [r2, #4]
 80010ec:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	e7dc      	b.n	80010ac <UART_Receive_IT+0x26>
 80010f2:	6852      	ldr	r2, [r2, #4]
 80010f4:	1c59      	adds	r1, r3, #1
 80010f6:	6281      	str	r1, [r0, #40]	; 0x28
 80010f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010fc:	e7f7      	b.n	80010ee <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80010fe:	2002      	movs	r0, #2
 8001100:	bd10      	pop	{r4, pc}

08001102 <HAL_UART_ErrorCallback>:
 8001102:	4770      	bx	lr

08001104 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001104:	6803      	ldr	r3, [r0, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001108:	68d9      	ldr	r1, [r3, #12]
{
 800110a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 800110c:	0716      	lsls	r6, r2, #28
{
 800110e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001110:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8001112:	d107      	bne.n	8001124 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001114:	0696      	lsls	r6, r2, #26
 8001116:	d55c      	bpl.n	80011d2 <HAL_UART_IRQHandler+0xce>
 8001118:	068d      	lsls	r5, r1, #26
 800111a:	d55a      	bpl.n	80011d2 <HAL_UART_IRQHandler+0xce>
}
 800111c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001120:	f7ff bfb1 	b.w	8001086 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001124:	f015 0501 	ands.w	r5, r5, #1
 8001128:	d102      	bne.n	8001130 <HAL_UART_IRQHandler+0x2c>
 800112a:	f411 7f90 	tst.w	r1, #288	; 0x120
 800112e:	d050      	beq.n	80011d2 <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001130:	07d0      	lsls	r0, r2, #31
 8001132:	d505      	bpl.n	8001140 <HAL_UART_IRQHandler+0x3c>
 8001134:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001136:	bf42      	ittt	mi
 8001138:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800113a:	f043 0301 	orrmi.w	r3, r3, #1
 800113e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001140:	0756      	lsls	r6, r2, #29
 8001142:	d504      	bpl.n	800114e <HAL_UART_IRQHandler+0x4a>
 8001144:	b11d      	cbz	r5, 800114e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001146:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800114e:	0790      	lsls	r0, r2, #30
 8001150:	d504      	bpl.n	800115c <HAL_UART_IRQHandler+0x58>
 8001152:	b11d      	cbz	r5, 800115c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001154:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001156:	f043 0304 	orr.w	r3, r3, #4
 800115a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800115c:	0713      	lsls	r3, r2, #28
 800115e:	d506      	bpl.n	800116e <HAL_UART_IRQHandler+0x6a>
 8001160:	068e      	lsls	r6, r1, #26
 8001162:	d400      	bmi.n	8001166 <HAL_UART_IRQHandler+0x62>
 8001164:	b11d      	cbz	r5, 800116e <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001166:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001168:	f043 0308 	orr.w	r3, r3, #8
 800116c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800116e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001170:	2b00      	cmp	r3, #0
 8001172:	d066      	beq.n	8001242 <HAL_UART_IRQHandler+0x13e>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001174:	0695      	lsls	r5, r2, #26
 8001176:	d504      	bpl.n	8001182 <HAL_UART_IRQHandler+0x7e>
 8001178:	0688      	lsls	r0, r1, #26
 800117a:	d502      	bpl.n	8001182 <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 800117c:	4620      	mov	r0, r4
 800117e:	f7ff ff82 	bl	8001086 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001182:	6823      	ldr	r3, [r4, #0]
 8001184:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001186:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001188:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 800118a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800118c:	d402      	bmi.n	8001194 <HAL_UART_IRQHandler+0x90>
 800118e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001192:	d01a      	beq.n	80011ca <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 8001194:	f7ff fe44 	bl	8000e20 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001198:	6823      	ldr	r3, [r4, #0]
 800119a:	695a      	ldr	r2, [r3, #20]
 800119c:	0652      	lsls	r2, r2, #25
 800119e:	d510      	bpl.n	80011c2 <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80011a0:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80011a2:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80011a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011a8:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80011aa:	b150      	cbz	r0, 80011c2 <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80011ac:	4b25      	ldr	r3, [pc, #148]	; (8001244 <HAL_UART_IRQHandler+0x140>)
 80011ae:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80011b0:	f7ff fab4 	bl	800071c <HAL_DMA_Abort_IT>
 80011b4:	2800      	cmp	r0, #0
 80011b6:	d044      	beq.n	8001242 <HAL_UART_IRQHandler+0x13e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80011b8:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80011ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80011be:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80011c0:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80011c2:	4620      	mov	r0, r4
 80011c4:	f7ff ff9d 	bl	8001102 <HAL_UART_ErrorCallback>
 80011c8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80011ca:	f7ff ff9a 	bl	8001102 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011ce:	63e5      	str	r5, [r4, #60]	; 0x3c
 80011d0:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80011d2:	0616      	lsls	r6, r2, #24
 80011d4:	d527      	bpl.n	8001226 <HAL_UART_IRQHandler+0x122>
 80011d6:	060d      	lsls	r5, r1, #24
 80011d8:	d525      	bpl.n	8001226 <HAL_UART_IRQHandler+0x122>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80011da:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80011de:	2a21      	cmp	r2, #33	; 0x21
 80011e0:	d12f      	bne.n	8001242 <HAL_UART_IRQHandler+0x13e>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80011e2:	68a2      	ldr	r2, [r4, #8]
 80011e4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80011e8:	6a22      	ldr	r2, [r4, #32]
 80011ea:	d117      	bne.n	800121c <HAL_UART_IRQHandler+0x118>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80011ec:	8811      	ldrh	r1, [r2, #0]
 80011ee:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80011f2:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80011f4:	6921      	ldr	r1, [r4, #16]
 80011f6:	b979      	cbnz	r1, 8001218 <HAL_UART_IRQHandler+0x114>
        huart->pTxBuffPtr += 2U;
 80011f8:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80011fa:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80011fc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80011fe:	3a01      	subs	r2, #1
 8001200:	b292      	uxth	r2, r2
 8001202:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001204:	b9ea      	cbnz	r2, 8001242 <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001206:	68da      	ldr	r2, [r3, #12]
 8001208:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800120c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800120e:	68da      	ldr	r2, [r3, #12]
 8001210:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001218:	3201      	adds	r2, #1
 800121a:	e7ee      	b.n	80011fa <HAL_UART_IRQHandler+0xf6>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800121c:	1c51      	adds	r1, r2, #1
 800121e:	6221      	str	r1, [r4, #32]
 8001220:	7812      	ldrb	r2, [r2, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	e7ea      	b.n	80011fc <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001226:	0650      	lsls	r0, r2, #25
 8001228:	d50b      	bpl.n	8001242 <HAL_UART_IRQHandler+0x13e>
 800122a:	064a      	lsls	r2, r1, #25
 800122c:	d509      	bpl.n	8001242 <HAL_UART_IRQHandler+0x13e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800122e:	68da      	ldr	r2, [r3, #12]
 8001230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001234:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001236:	2320      	movs	r3, #32
 8001238:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800123c:	4620      	mov	r0, r4
 800123e:	f7ff ff20 	bl	8001082 <HAL_UART_TxCpltCallback>
 8001242:	bd70      	pop	{r4, r5, r6, pc}
 8001244:	08001249 	.word	0x08001249

08001248 <UART_DMAAbortOnError>:
{
 8001248:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800124a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 800124c:	2300      	movs	r3, #0
 800124e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001250:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001252:	f7ff ff56 	bl	8001102 <HAL_UART_ErrorCallback>
 8001256:	bd08      	pop	{r3, pc}

08001258 <Clear_ESP_Buffer>:
		}
		}

}

void Clear_ESP_Buffer(void){
 8001258:	2300      	movs	r3, #0

	uint16_t i;
	for(i= 0; i < ESP_Buffer_Boyutu; i++){
		Esp_Veri_Buffer[i] = 0;
 800125a:	4905      	ldr	r1, [pc, #20]	; (8001270 <Clear_ESP_Buffer+0x18>)
 800125c:	461a      	mov	r2, r3
 800125e:	545a      	strb	r2, [r3, r1]
 8001260:	3301      	adds	r3, #1
	for(i= 0; i < ESP_Buffer_Boyutu; i++){
 8001262:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001266:	d1fa      	bne.n	800125e <Clear_ESP_Buffer+0x6>
	}
	Sayac = 0;
 8001268:	4b02      	ldr	r3, [pc, #8]	; (8001274 <Clear_ESP_Buffer+0x1c>)
 800126a:	801a      	strh	r2, [r3, #0]
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	200000b8 	.word	0x200000b8
 8001274:	200000a2 	.word	0x200000a2

08001278 <SystemClock_Config>:
{
 8001278:	b530      	push	{r4, r5, lr}
 800127a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127c:	2230      	movs	r2, #48	; 0x30
 800127e:	2100      	movs	r1, #0
 8001280:	a808      	add	r0, sp, #32
 8001282:	f000 fb77 	bl	8001974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001286:	2100      	movs	r1, #0
 8001288:	2214      	movs	r2, #20
 800128a:	a803      	add	r0, sp, #12
 800128c:	f000 fb72 	bl	8001974 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001290:	2400      	movs	r4, #0
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <SystemClock_Config+0x8c>)
 8001294:	9401      	str	r4, [sp, #4]
 8001296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001298:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800129c:	641a      	str	r2, [r3, #64]	; 0x40
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a8:	4b17      	ldr	r3, [pc, #92]	; (8001308 <SystemClock_Config+0x90>)
 80012aa:	9402      	str	r4, [sp, #8]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012b6:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012bc:	9302      	str	r3, [sp, #8]
 80012be:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c0:	2301      	movs	r3, #1
 80012c2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012c4:	2310      	movs	r3, #16
 80012c6:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012c8:	2308      	movs	r3, #8
 80012ca:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012cc:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ce:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012d0:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d2:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012d4:	2304      	movs	r3, #4
 80012d6:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d8:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012da:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012dc:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012de:	f7ff fb0f 	bl	8000900 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e2:	230f      	movs	r3, #15
 80012e4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012ea:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012ec:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012f2:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f4:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f6:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012f8:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012fa:	f7ff fcd5 	bl	8000ca8 <HAL_RCC_ClockConfig>
}
 80012fe:	b015      	add	sp, #84	; 0x54
 8001300:	bd30      	pop	{r4, r5, pc}
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	40007000 	.word	0x40007000

0800130c <main>:
{
 800130c:	b58f      	push	{r0, r1, r2, r3, r7, lr}
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130e:	2400      	movs	r4, #0
  HAL_Init();
 8001310:	f7ff f95a 	bl	80005c8 <HAL_Init>
  SystemClock_Config();
 8001314:	f7ff ffb0 	bl	8001278 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001318:	4bac      	ldr	r3, [pc, #688]	; (80015cc <main+0x2c0>)
 800131a:	9401      	str	r4, [sp, #4]
 800131c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  huart2.Instance = USART2;
 800131e:	4dac      	ldr	r5, [pc, #688]	; (80015d0 <main+0x2c4>)
	switch(Case){
 8001320:	f8df 8318 	ldr.w	r8, [pc, #792]	; 800163c <main+0x330>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001324:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001328:	631a      	str	r2, [r3, #48]	; 0x30
 800132a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800132c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001330:	9201      	str	r2, [sp, #4]
 8001332:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	9402      	str	r4, [sp, #8]
 8001336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001338:	f042 0201 	orr.w	r2, r2, #1
 800133c:	631a      	str	r2, [r3, #48]	; 0x30
 800133e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001340:	f002 0201 	and.w	r2, r2, #1
 8001344:	9202      	str	r2, [sp, #8]
 8001346:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001348:	9403      	str	r4, [sp, #12]
 800134a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800134c:	f042 0202 	orr.w	r2, r2, #2
 8001350:	631a      	str	r2, [r3, #48]	; 0x30
 8001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001354:	60ac      	str	r4, [r5, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	9303      	str	r3, [sp, #12]
 800135c:	9b03      	ldr	r3, [sp, #12]
  huart2.Init.BaudRate = 115200;
 800135e:	4b9d      	ldr	r3, [pc, #628]	; (80015d4 <main+0x2c8>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001360:	60ec      	str	r4, [r5, #12]
  huart2.Init.BaudRate = 115200;
 8001362:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001366:	260c      	movs	r6, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001368:	4628      	mov	r0, r5
  huart2.Init.BaudRate = 115200;
 800136a:	e885 0088 	stmia.w	r5, {r3, r7}
  huart2.Init.Parity = UART_PARITY_NONE;
 800136e:	612c      	str	r4, [r5, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001370:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001372:	61ec      	str	r4, [r5, #28]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001374:	616e      	str	r6, [r5, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001376:	f7ff fdf7 	bl	8000f68 <HAL_UART_Init>
  huart3.Instance = USART3;
 800137a:	4897      	ldr	r0, [pc, #604]	; (80015d8 <main+0x2cc>)
 800137c:	4b97      	ldr	r3, [pc, #604]	; (80015dc <main+0x2d0>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800137e:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8001380:	e880 0088 	stmia.w	r0, {r3, r7}
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001384:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001386:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001388:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800138a:	61c4      	str	r4, [r0, #28]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800138c:	6146      	str	r6, [r0, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800138e:	f7ff fdeb 	bl	8000f68 <HAL_UART_Init>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8001392:	682a      	ldr	r2, [r5, #0]
		if(strstr(Esp_Veri_Buffer,"OK")){
 8001394:	4d92      	ldr	r5, [pc, #584]	; (80015e0 <main+0x2d4>)
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8001396:	68d3      	ldr	r3, [r2, #12]
 8001398:	f043 0320 	orr.w	r3, r3, #32
 800139c:	60d3      	str	r3, [r2, #12]
 800139e:	4644      	mov	r4, r8
	switch(Case){
 80013a0:	f898 3000 	ldrb.w	r3, [r8]
 80013a4:	2b0b      	cmp	r3, #11
 80013a6:	d8fd      	bhi.n	80013a4 <main+0x98>
 80013a8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80013ac:	001e000c 	.word	0x001e000c
 80013b0:	00500043 	.word	0x00500043
 80013b4:	008f007c 	.word	0x008f007c
 80013b8:	00dc00cb 	.word	0x00dc00cb
 80013bc:	015b014a 	.word	0x015b014a
 80013c0:	01880177 	.word	0x01880177
		HAL_UART_Transmit(&huart2,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"AT\r\n"), 1000);
 80013c4:	4987      	ldr	r1, [pc, #540]	; (80015e4 <main+0x2d8>)
 80013c6:	4888      	ldr	r0, [pc, #544]	; (80015e8 <main+0x2dc>)
 80013c8:	f000 fb00 	bl	80019cc <strcpy>
 80013cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d0:	2204      	movs	r2, #4
 80013d2:	4985      	ldr	r1, [pc, #532]	; (80015e8 <main+0x2dc>)
 80013d4:	487e      	ldr	r0, [pc, #504]	; (80015d0 <main+0x2c4>)
 80013d6:	f7ff fdf5 	bl	8000fc4 <HAL_UART_Transmit>
		Case = 1;
 80013da:	2301      	movs	r3, #1
		HAL_Delay(2000);
 80013dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
		Case = 3;
 80013e0:	7023      	strb	r3, [r4, #0]
		HAL_Delay(2000);
 80013e2:	f7ff f91d 	bl	8000620 <HAL_Delay>
 80013e6:	e7db      	b.n	80013a0 <main+0x94>
		if(strstr(Esp_Veri_Buffer,"OK")){
 80013e8:	4629      	mov	r1, r5
 80013ea:	4880      	ldr	r0, [pc, #512]	; (80015ec <main+0x2e0>)
 80013ec:	f000 faf6 	bl	80019dc <strstr>
 80013f0:	4606      	mov	r6, r0
 80013f2:	b178      	cbz	r0, 8001414 <main+0x108>
			Clear_ESP_Buffer();
 80013f4:	f7ff ff30 	bl	8001258 <Clear_ESP_Buffer>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Module Erisildi!"), 1000);
 80013f8:	497d      	ldr	r1, [pc, #500]	; (80015f0 <main+0x2e4>)
 80013fa:	487b      	ldr	r0, [pc, #492]	; (80015e8 <main+0x2dc>)
 80013fc:	f000 fae6 	bl	80019cc <strcpy>
 8001400:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001404:	2210      	movs	r2, #16
 8001406:	4978      	ldr	r1, [pc, #480]	; (80015e8 <main+0x2dc>)
 8001408:	4873      	ldr	r0, [pc, #460]	; (80015d8 <main+0x2cc>)
 800140a:	f7ff fddb 	bl	8000fc4 <HAL_UART_Transmit>
			Case = 2;
 800140e:	2302      	movs	r3, #2
			Case = 10;
 8001410:	7023      	strb	r3, [r4, #0]
 8001412:	e7c5      	b.n	80013a0 <main+0x94>
			Clear_ESP_Buffer();
 8001414:	f7ff ff20 	bl	8001258 <Clear_ESP_Buffer>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Module Erisilemedi!"), 1000);
 8001418:	4976      	ldr	r1, [pc, #472]	; (80015f4 <main+0x2e8>)
 800141a:	4873      	ldr	r0, [pc, #460]	; (80015e8 <main+0x2dc>)
 800141c:	f000 fad6 	bl	80019cc <strcpy>
 8001420:	4971      	ldr	r1, [pc, #452]	; (80015e8 <main+0x2dc>)
 8001422:	486d      	ldr	r0, [pc, #436]	; (80015d8 <main+0x2cc>)
 8001424:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001428:	2213      	movs	r2, #19
			HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CWMODE=1\r\n"), 1000);
 800142a:	f7ff fdcb 	bl	8000fc4 <HAL_UART_Transmit>
			Case = 0;
 800142e:	7026      	strb	r6, [r4, #0]
 8001430:	e7b6      	b.n	80013a0 <main+0x94>
		HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CWMODE?\r\n"), 1000);
 8001432:	4971      	ldr	r1, [pc, #452]	; (80015f8 <main+0x2ec>)
 8001434:	486c      	ldr	r0, [pc, #432]	; (80015e8 <main+0x2dc>)
 8001436:	f000 fac9 	bl	80019cc <strcpy>
 800143a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143e:	220c      	movs	r2, #12
 8001440:	4969      	ldr	r1, [pc, #420]	; (80015e8 <main+0x2dc>)
 8001442:	4863      	ldr	r0, [pc, #396]	; (80015d0 <main+0x2c4>)
 8001444:	f7ff fdbe 	bl	8000fc4 <HAL_UART_Transmit>
		Case = 3;
 8001448:	2303      	movs	r3, #3
 800144a:	e7c7      	b.n	80013dc <main+0xd0>
		if(strstr(Esp_Veri_Buffer,"+CWMODE:1")){
 800144c:	496b      	ldr	r1, [pc, #428]	; (80015fc <main+0x2f0>)
 800144e:	4867      	ldr	r0, [pc, #412]	; (80015ec <main+0x2e0>)
 8001450:	f000 fac4 	bl	80019dc <strstr>
 8001454:	4606      	mov	r6, r0
 8001456:	b170      	cbz	r0, 8001476 <main+0x16a>
			Clear_ESP_Buffer();
 8001458:	f7ff fefe 	bl	8001258 <Clear_ESP_Buffer>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Mod ayari dogru!\r\n"), 1000);
 800145c:	4968      	ldr	r1, [pc, #416]	; (8001600 <main+0x2f4>)
 800145e:	4862      	ldr	r0, [pc, #392]	; (80015e8 <main+0x2dc>)
 8001460:	f000 fab4 	bl	80019cc <strcpy>
 8001464:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001468:	2212      	movs	r2, #18
 800146a:	495f      	ldr	r1, [pc, #380]	; (80015e8 <main+0x2dc>)
 800146c:	485a      	ldr	r0, [pc, #360]	; (80015d8 <main+0x2cc>)
 800146e:	f7ff fda9 	bl	8000fc4 <HAL_UART_Transmit>
			Case = 4;
 8001472:	2304      	movs	r3, #4
 8001474:	e7cc      	b.n	8001410 <main+0x104>
			Clear_ESP_Buffer();
 8001476:	f7ff feef 	bl	8001258 <Clear_ESP_Buffer>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Mod ayari yanlis!\r\n"), 1000);
 800147a:	4962      	ldr	r1, [pc, #392]	; (8001604 <main+0x2f8>)
 800147c:	485a      	ldr	r0, [pc, #360]	; (80015e8 <main+0x2dc>)
 800147e:	f000 faa5 	bl	80019cc <strcpy>
 8001482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001486:	2213      	movs	r2, #19
 8001488:	4957      	ldr	r1, [pc, #348]	; (80015e8 <main+0x2dc>)
 800148a:	4853      	ldr	r0, [pc, #332]	; (80015d8 <main+0x2cc>)
 800148c:	f7ff fd9a 	bl	8000fc4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CWMODE=1\r\n"), 1000);
 8001490:	495d      	ldr	r1, [pc, #372]	; (8001608 <main+0x2fc>)
 8001492:	4855      	ldr	r0, [pc, #340]	; (80015e8 <main+0x2dc>)
 8001494:	f000 fa9a 	bl	80019cc <strcpy>
 8001498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149c:	220d      	movs	r2, #13
 800149e:	4952      	ldr	r1, [pc, #328]	; (80015e8 <main+0x2dc>)
 80014a0:	484b      	ldr	r0, [pc, #300]	; (80015d0 <main+0x2c4>)
 80014a2:	e7c2      	b.n	800142a <main+0x11e>
		HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CWJAP=\"%s\",\"%s\"\r\n",SSID,PW), 1000);
 80014a4:	4b59      	ldr	r3, [pc, #356]	; (800160c <main+0x300>)
 80014a6:	4a5a      	ldr	r2, [pc, #360]	; (8001610 <main+0x304>)
 80014a8:	495a      	ldr	r1, [pc, #360]	; (8001614 <main+0x308>)
 80014aa:	484f      	ldr	r0, [pc, #316]	; (80015e8 <main+0x2dc>)
 80014ac:	f000 fa6a 	bl	8001984 <siprintf>
 80014b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b4:	b282      	uxth	r2, r0
 80014b6:	494c      	ldr	r1, [pc, #304]	; (80015e8 <main+0x2dc>)
 80014b8:	4845      	ldr	r0, [pc, #276]	; (80015d0 <main+0x2c4>)
 80014ba:	f7ff fd83 	bl	8000fc4 <HAL_UART_Transmit>
		HAL_Delay(2000);
 80014be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014c2:	f7ff f8ad 	bl	8000620 <HAL_Delay>
		Case = 5;
 80014c6:	2305      	movs	r3, #5
 80014c8:	e7a2      	b.n	8001410 <main+0x104>
		if(strstr(Esp_Veri_Buffer,"OK")){
 80014ca:	4629      	mov	r1, r5
 80014cc:	4847      	ldr	r0, [pc, #284]	; (80015ec <main+0x2e0>)
 80014ce:	f000 fa85 	bl	80019dc <strstr>
 80014d2:	4607      	mov	r7, r0
 80014d4:	b170      	cbz	r0, 80014f4 <main+0x1e8>
			Clear_ESP_Buffer();
 80014d6:	f7ff febf 	bl	8001258 <Clear_ESP_Buffer>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Baglanti yapildi!\r\n"), 1000);
 80014da:	494f      	ldr	r1, [pc, #316]	; (8001618 <main+0x30c>)
 80014dc:	4842      	ldr	r0, [pc, #264]	; (80015e8 <main+0x2dc>)
 80014de:	f000 fa75 	bl	80019cc <strcpy>
 80014e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e6:	2213      	movs	r2, #19
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"IP Alinamadi!! Tekrar deneniyor!!!\r\n"), 1000);
 80014e8:	493f      	ldr	r1, [pc, #252]	; (80015e8 <main+0x2dc>)
 80014ea:	483b      	ldr	r0, [pc, #236]	; (80015d8 <main+0x2cc>)
 80014ec:	f7ff fd6a 	bl	8000fc4 <HAL_UART_Transmit>
			Case = 6;
 80014f0:	2306      	movs	r3, #6
 80014f2:	e78d      	b.n	8001410 <main+0x104>
			Clear_ESP_Buffer();
 80014f4:	f7ff feb0 	bl	8001258 <Clear_ESP_Buffer>
			baglanti_sayaci++;
 80014f8:	4e48      	ldr	r6, [pc, #288]	; (800161c <main+0x310>)
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Baglanti yapilamadi! Bekleniyor!!\r\n"), 1000);
 80014fa:	4949      	ldr	r1, [pc, #292]	; (8001620 <main+0x314>)
 80014fc:	483a      	ldr	r0, [pc, #232]	; (80015e8 <main+0x2dc>)
 80014fe:	f000 fa65 	bl	80019cc <strcpy>
 8001502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001506:	2223      	movs	r2, #35	; 0x23
 8001508:	4937      	ldr	r1, [pc, #220]	; (80015e8 <main+0x2dc>)
 800150a:	4833      	ldr	r0, [pc, #204]	; (80015d8 <main+0x2cc>)
 800150c:	f7ff fd5a 	bl	8000fc4 <HAL_UART_Transmit>
			baglanti_sayaci++;
 8001510:	6833      	ldr	r3, [r6, #0]
			HAL_Delay(2000);
 8001512:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
			baglanti_sayaci++;
 8001516:	3301      	adds	r3, #1
 8001518:	6033      	str	r3, [r6, #0]
			HAL_Delay(2000);
 800151a:	f7ff f881 	bl	8000620 <HAL_Delay>
			if (baglanti_sayaci == 5){
 800151e:	6833      	ldr	r3, [r6, #0]
 8001520:	2b05      	cmp	r3, #5
 8001522:	f47f af3d 	bne.w	80013a0 <main+0x94>
				HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Baglanti basarisiz. Tekrar deneniyor!!!\r\n"), 1000);
 8001526:	493f      	ldr	r1, [pc, #252]	; (8001624 <main+0x318>)
 8001528:	482f      	ldr	r0, [pc, #188]	; (80015e8 <main+0x2dc>)
 800152a:	f000 fa4f 	bl	80019cc <strcpy>
 800152e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001532:	2229      	movs	r2, #41	; 0x29
 8001534:	492c      	ldr	r1, [pc, #176]	; (80015e8 <main+0x2dc>)
 8001536:	4828      	ldr	r0, [pc, #160]	; (80015d8 <main+0x2cc>)
 8001538:	f7ff fd44 	bl	8000fc4 <HAL_UART_Transmit>
				Case = 0;
 800153c:	7027      	strb	r7, [r4, #0]
				baglanti_sayaci = 0;
 800153e:	6037      	str	r7, [r6, #0]
 8001540:	e72e      	b.n	80013a0 <main+0x94>
		HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CIFSR\r\n"), 1000);
 8001542:	4939      	ldr	r1, [pc, #228]	; (8001628 <main+0x31c>)
 8001544:	4828      	ldr	r0, [pc, #160]	; (80015e8 <main+0x2dc>)
 8001546:	f000 fa41 	bl	80019cc <strcpy>
 800154a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154e:	220a      	movs	r2, #10
 8001550:	4925      	ldr	r1, [pc, #148]	; (80015e8 <main+0x2dc>)
 8001552:	481f      	ldr	r0, [pc, #124]	; (80015d0 <main+0x2c4>)
 8001554:	f7ff fd36 	bl	8000fc4 <HAL_UART_Transmit>
		HAL_Delay(2000);
 8001558:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800155c:	f7ff f860 	bl	8000620 <HAL_Delay>
		Case = 7;
 8001560:	2307      	movs	r3, #7
 8001562:	e755      	b.n	8001410 <main+0x104>
		if(strstr(Esp_Veri_Buffer,"OK")){
 8001564:	4629      	mov	r1, r5
 8001566:	4821      	ldr	r0, [pc, #132]	; (80015ec <main+0x2e0>)
 8001568:	f000 fa38 	bl	80019dc <strstr>
 800156c:	b320      	cbz	r0, 80015b8 <main+0x2ac>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"IP Alindi!!!\r\n"), 1000);
 800156e:	492f      	ldr	r1, [pc, #188]	; (800162c <main+0x320>)
 8001570:	481d      	ldr	r0, [pc, #116]	; (80015e8 <main+0x2dc>)
 8001572:	f000 fa2b 	bl	80019cc <strcpy>
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	220e      	movs	r2, #14
 800157c:	491a      	ldr	r1, [pc, #104]	; (80015e8 <main+0x2dc>)
 800157e:	4816      	ldr	r0, [pc, #88]	; (80015d8 <main+0x2cc>)
 8001580:	f7ff fd20 	bl	8000fc4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Cihaz IP = \r\n"), 1000);
 8001584:	492a      	ldr	r1, [pc, #168]	; (8001630 <main+0x324>)
 8001586:	4818      	ldr	r0, [pc, #96]	; (80015e8 <main+0x2dc>)
 8001588:	f000 fa20 	bl	80019cc <strcpy>
 800158c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001590:	220d      	movs	r2, #13
 8001592:	4915      	ldr	r1, [pc, #84]	; (80015e8 <main+0x2dc>)
 8001594:	4810      	ldr	r0, [pc, #64]	; (80015d8 <main+0x2cc>)
 8001596:	f7ff fd15 	bl	8000fc4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer, &Esp_Veri_Buffer[11]), 1000);
 800159a:	4926      	ldr	r1, [pc, #152]	; (8001634 <main+0x328>)
 800159c:	4812      	ldr	r0, [pc, #72]	; (80015e8 <main+0x2dc>)
 800159e:	f000 f9f1 	bl	8001984 <siprintf>
 80015a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a6:	b282      	uxth	r2, r0
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Coklu baglanti dogrulanamadi!!!!\r\n"), 1000);
 80015a8:	490f      	ldr	r1, [pc, #60]	; (80015e8 <main+0x2dc>)
 80015aa:	480b      	ldr	r0, [pc, #44]	; (80015d8 <main+0x2cc>)
 80015ac:	f7ff fd0a 	bl	8000fc4 <HAL_UART_Transmit>
			Clear_ESP_Buffer();
 80015b0:	f7ff fe52 	bl	8001258 <Clear_ESP_Buffer>
			Case = 8;
 80015b4:	2308      	movs	r3, #8
 80015b6:	e72b      	b.n	8001410 <main+0x104>
			Clear_ESP_Buffer();
 80015b8:	f7ff fe4e 	bl	8001258 <Clear_ESP_Buffer>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"IP Alinamadi!! Tekrar deneniyor!!!\r\n"), 1000);
 80015bc:	491e      	ldr	r1, [pc, #120]	; (8001638 <main+0x32c>)
 80015be:	480a      	ldr	r0, [pc, #40]	; (80015e8 <main+0x2dc>)
 80015c0:	f000 fa04 	bl	80019cc <strcpy>
 80015c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c8:	2224      	movs	r2, #36	; 0x24
 80015ca:	e78d      	b.n	80014e8 <main+0x1dc>
 80015cc:	40023800 	.word	0x40023800
 80015d0:	200003b4 	.word	0x200003b4
 80015d4:	40004400 	.word	0x40004400
 80015d8:	200002ac 	.word	0x200002ac
 80015dc:	40004800 	.word	0x40004800
 80015e0:	08002221 	.word	0x08002221
 80015e4:	0800221c 	.word	0x0800221c
 80015e8:	20000350 	.word	0x20000350
 80015ec:	200000b8 	.word	0x200000b8
 80015f0:	08002224 	.word	0x08002224
 80015f4:	08002235 	.word	0x08002235
 80015f8:	08002249 	.word	0x08002249
 80015fc:	08002256 	.word	0x08002256
 8001600:	08002260 	.word	0x08002260
 8001604:	08002273 	.word	0x08002273
 8001608:	08002287 	.word	0x08002287
 800160c:	2000000f 	.word	0x2000000f
 8001610:	20000008 	.word	0x20000008
 8001614:	08002295 	.word	0x08002295
 8001618:	080022aa 	.word	0x080022aa
 800161c:	200000a4 	.word	0x200000a4
 8001620:	080022be 	.word	0x080022be
 8001624:	080022e2 	.word	0x080022e2
 8001628:	0800230c 	.word	0x0800230c
 800162c:	08002317 	.word	0x08002317
 8001630:	08002326 	.word	0x08002326
 8001634:	200000c3 	.word	0x200000c3
 8001638:	08002334 	.word	0x08002334
 800163c:	200000a0 	.word	0x200000a0
		HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CIPMUX=1\r\n"), 1000);
 8001640:	492c      	ldr	r1, [pc, #176]	; (80016f4 <main+0x3e8>)
 8001642:	482d      	ldr	r0, [pc, #180]	; (80016f8 <main+0x3ec>)
 8001644:	f000 f9c2 	bl	80019cc <strcpy>
 8001648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800164c:	220d      	movs	r2, #13
 800164e:	492a      	ldr	r1, [pc, #168]	; (80016f8 <main+0x3ec>)
 8001650:	482a      	ldr	r0, [pc, #168]	; (80016fc <main+0x3f0>)
 8001652:	f7ff fcb7 	bl	8000fc4 <HAL_UART_Transmit>
		HAL_Delay(2000);
 8001656:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800165a:	f7fe ffe1 	bl	8000620 <HAL_Delay>
		Case = 9;
 800165e:	2309      	movs	r3, #9
 8001660:	e6d6      	b.n	8001410 <main+0x104>
		if(strstr(Esp_Veri_Buffer,"OK")){
 8001662:	4629      	mov	r1, r5
 8001664:	4826      	ldr	r0, [pc, #152]	; (8001700 <main+0x3f4>)
 8001666:	f000 f9b9 	bl	80019dc <strstr>
 800166a:	b170      	cbz	r0, 800168a <main+0x37e>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Coklu baglanti dogrulandi!!!!\r\n"), 1000);
 800166c:	4925      	ldr	r1, [pc, #148]	; (8001704 <main+0x3f8>)
 800166e:	4822      	ldr	r0, [pc, #136]	; (80016f8 <main+0x3ec>)
 8001670:	f000 f9ac 	bl	80019cc <strcpy>
 8001674:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001678:	221f      	movs	r2, #31
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Server baslamadi\r\n"), 1000);
 800167a:	491f      	ldr	r1, [pc, #124]	; (80016f8 <main+0x3ec>)
 800167c:	4822      	ldr	r0, [pc, #136]	; (8001708 <main+0x3fc>)
 800167e:	f7ff fca1 	bl	8000fc4 <HAL_UART_Transmit>
			Clear_ESP_Buffer();
 8001682:	f7ff fde9 	bl	8001258 <Clear_ESP_Buffer>
			Case = 10;
 8001686:	230a      	movs	r3, #10
 8001688:	e6c2      	b.n	8001410 <main+0x104>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Coklu baglanti dogrulanamadi!!!!\r\n"), 1000);
 800168a:	4920      	ldr	r1, [pc, #128]	; (800170c <main+0x400>)
 800168c:	481a      	ldr	r0, [pc, #104]	; (80016f8 <main+0x3ec>)
 800168e:	f000 f99d 	bl	80019cc <strcpy>
 8001692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001696:	2222      	movs	r2, #34	; 0x22
 8001698:	e786      	b.n	80015a8 <main+0x29c>
		HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CIPSERVER=1,80\r\n"), 1000);
 800169a:	491d      	ldr	r1, [pc, #116]	; (8001710 <main+0x404>)
 800169c:	4816      	ldr	r0, [pc, #88]	; (80016f8 <main+0x3ec>)
 800169e:	f000 f995 	bl	80019cc <strcpy>
 80016a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a6:	2213      	movs	r2, #19
 80016a8:	4913      	ldr	r1, [pc, #76]	; (80016f8 <main+0x3ec>)
 80016aa:	4814      	ldr	r0, [pc, #80]	; (80016fc <main+0x3f0>)
 80016ac:	f7ff fc8a 	bl	8000fc4 <HAL_UART_Transmit>
		HAL_Delay(2000);
 80016b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016b4:	f7fe ffb4 	bl	8000620 <HAL_Delay>
		Case = 11;
 80016b8:	230b      	movs	r3, #11
 80016ba:	e6a9      	b.n	8001410 <main+0x104>
		if(strstr(Esp_Veri_Buffer,"OK")){
 80016bc:	4629      	mov	r1, r5
 80016be:	4810      	ldr	r0, [pc, #64]	; (8001700 <main+0x3f4>)
 80016c0:	f000 f98c 	bl	80019dc <strstr>
 80016c4:	b170      	cbz	r0, 80016e4 <main+0x3d8>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Server basladi\r\n"), 1000);
 80016c6:	4913      	ldr	r1, [pc, #76]	; (8001714 <main+0x408>)
 80016c8:	480b      	ldr	r0, [pc, #44]	; (80016f8 <main+0x3ec>)
 80016ca:	f000 f97f 	bl	80019cc <strcpy>
 80016ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d2:	2210      	movs	r2, #16
 80016d4:	4908      	ldr	r1, [pc, #32]	; (80016f8 <main+0x3ec>)
 80016d6:	480c      	ldr	r0, [pc, #48]	; (8001708 <main+0x3fc>)
 80016d8:	f7ff fc74 	bl	8000fc4 <HAL_UART_Transmit>
			Clear_ESP_Buffer();
 80016dc:	f7ff fdbc 	bl	8001258 <Clear_ESP_Buffer>
			Case = 12;
 80016e0:	230c      	movs	r3, #12
 80016e2:	e695      	b.n	8001410 <main+0x104>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Server baslamadi\r\n"), 1000);
 80016e4:	490c      	ldr	r1, [pc, #48]	; (8001718 <main+0x40c>)
 80016e6:	4804      	ldr	r0, [pc, #16]	; (80016f8 <main+0x3ec>)
 80016e8:	f000 f970 	bl	80019cc <strcpy>
 80016ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f0:	2212      	movs	r2, #18
 80016f2:	e7c2      	b.n	800167a <main+0x36e>
 80016f4:	08002359 	.word	0x08002359
 80016f8:	20000350 	.word	0x20000350
 80016fc:	200003b4 	.word	0x200003b4
 8001700:	200000b8 	.word	0x200000b8
 8001704:	08002367 	.word	0x08002367
 8001708:	200002ac 	.word	0x200002ac
 800170c:	08002387 	.word	0x08002387
 8001710:	080023aa 	.word	0x080023aa
 8001714:	080023be 	.word	0x080023be
 8001718:	080023cf 	.word	0x080023cf

0800171c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800171c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <HAL_MspInit+0x34>)
 8001720:	2100      	movs	r1, #0
 8001722:	9100      	str	r1, [sp, #0]
 8001724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001726:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800172a:	645a      	str	r2, [r3, #68]	; 0x44
 800172c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800172e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001732:	9200      	str	r2, [sp, #0]
 8001734:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	9101      	str	r1, [sp, #4]
 8001738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800173a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800173e:	641a      	str	r2, [r3, #64]	; 0x40
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174a:	b002      	add	sp, #8
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800

08001754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001754:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001756:	2214      	movs	r2, #20
{
 8001758:	b08a      	sub	sp, #40	; 0x28
 800175a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	2100      	movs	r1, #0
 800175e:	eb0d 0002 	add.w	r0, sp, r2
 8001762:	f000 f907 	bl	8001974 <memset>
  if(huart->Instance==USART2)
 8001766:	6823      	ldr	r3, [r4, #0]
 8001768:	4a2c      	ldr	r2, [pc, #176]	; (800181c <HAL_UART_MspInit+0xc8>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d12d      	bne.n	80017ca <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800176e:	4b2c      	ldr	r3, [pc, #176]	; (8001820 <HAL_UART_MspInit+0xcc>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	482c      	ldr	r0, [pc, #176]	; (8001824 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001772:	2400      	movs	r4, #0
 8001774:	9401      	str	r4, [sp, #4]
 8001776:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001778:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800177c:	641a      	str	r2, [r3, #64]	; 0x40
 800177e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001780:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001784:	9201      	str	r2, [sp, #4]
 8001786:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001788:	9402      	str	r4, [sp, #8]
 800178a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800178c:	f042 0201 	orr.w	r2, r2, #1
 8001790:	631a      	str	r2, [r3, #48]	; 0x30
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	9302      	str	r3, [sp, #8]
 800179a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800179c:	230c      	movs	r3, #12
 800179e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a8:	2303      	movs	r3, #3
 80017aa:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ae:	2307      	movs	r3, #7
 80017b0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f7fe ffc5 	bl	8000740 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017b6:	2026      	movs	r0, #38	; 0x26
 80017b8:	4622      	mov	r2, r4
 80017ba:	4621      	mov	r1, r4
 80017bc:	f7fe ff56 	bl	800066c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017c0:	2026      	movs	r0, #38	; 0x26
 80017c2:	f7fe ff87 	bl	80006d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017c6:	b00a      	add	sp, #40	; 0x28
 80017c8:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 80017ca:	4a17      	ldr	r2, [pc, #92]	; (8001828 <HAL_UART_MspInit+0xd4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d1fa      	bne.n	80017c6 <HAL_UART_MspInit+0x72>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <HAL_UART_MspInit+0xcc>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d2:	4816      	ldr	r0, [pc, #88]	; (800182c <HAL_UART_MspInit+0xd8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80017d4:	2100      	movs	r1, #0
 80017d6:	9103      	str	r1, [sp, #12]
 80017d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017da:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80017de:	641a      	str	r2, [r3, #64]	; 0x40
 80017e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017e2:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80017e6:	9203      	str	r2, [sp, #12]
 80017e8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	9104      	str	r1, [sp, #16]
 80017ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017ee:	f042 0202 	orr.w	r2, r2, #2
 80017f2:	631a      	str	r2, [r3, #48]	; 0x30
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	9304      	str	r3, [sp, #16]
 80017fc:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001802:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001808:	2301      	movs	r3, #1
 800180a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	2303      	movs	r3, #3
 800180e:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001810:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001812:	2307      	movs	r3, #7
 8001814:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001816:	f7fe ff93 	bl	8000740 <HAL_GPIO_Init>
}
 800181a:	e7d4      	b.n	80017c6 <HAL_UART_MspInit+0x72>
 800181c:	40004400 	.word	0x40004400
 8001820:	40023800 	.word	0x40023800
 8001824:	40020000 	.word	0x40020000
 8001828:	40004800 	.word	0x40004800
 800182c:	40020400 	.word	0x40020400

08001830 <NMI_Handler>:
 8001830:	4770      	bx	lr

08001832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001832:	e7fe      	b.n	8001832 <HardFault_Handler>

08001834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001834:	e7fe      	b.n	8001834 <MemManage_Handler>

08001836 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001836:	e7fe      	b.n	8001836 <BusFault_Handler>

08001838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001838:	e7fe      	b.n	8001838 <UsageFault_Handler>

0800183a <SVC_Handler>:
 800183a:	4770      	bx	lr

0800183c <DebugMon_Handler>:
 800183c:	4770      	bx	lr

0800183e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800183e:	4770      	bx	lr

08001840 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001840:	f7fe bedc 	b.w	80005fc <HAL_IncTick>

08001844 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001844:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001846:	4808      	ldr	r0, [pc, #32]	; (8001868 <USART2_IRQHandler+0x24>)
 8001848:	f7ff fc5c 	bl	8001104 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  uint8_t Gelen_Byte = USART2->DR;
 800184c:	4b07      	ldr	r3, [pc, #28]	; (800186c <USART2_IRQHandler+0x28>)
  USART3->DR = Gelen_Byte;
 800184e:	4a08      	ldr	r2, [pc, #32]	; (8001870 <USART2_IRQHandler+0x2c>)
  uint8_t Gelen_Byte = USART2->DR;
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	b2db      	uxtb	r3, r3
  USART3->DR = Gelen_Byte;
 8001854:	6053      	str	r3, [r2, #4]
  if(Gelen_Byte != 0){
 8001856:	b12b      	cbz	r3, 8001864 <USART2_IRQHandler+0x20>
	  Esp_Veri_Buffer[Sayac] = Gelen_Byte;
 8001858:	4906      	ldr	r1, [pc, #24]	; (8001874 <USART2_IRQHandler+0x30>)
 800185a:	4807      	ldr	r0, [pc, #28]	; (8001878 <USART2_IRQHandler+0x34>)
 800185c:	880a      	ldrh	r2, [r1, #0]
 800185e:	5483      	strb	r3, [r0, r2]
	  Sayac++;
 8001860:	3201      	adds	r2, #1
 8001862:	800a      	strh	r2, [r1, #0]
 8001864:	bd08      	pop	{r3, pc}
 8001866:	bf00      	nop
 8001868:	200003b4 	.word	0x200003b4
 800186c:	40004400 	.word	0x40004400
 8001870:	40004800 	.word	0x40004800
 8001874:	200000a2 	.word	0x200000a2
 8001878:	200000b8 	.word	0x200000b8

0800187c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800187c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <_sbrk+0x2c>)
 8001880:	6819      	ldr	r1, [r3, #0]
{
 8001882:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001884:	b909      	cbnz	r1, 800188a <_sbrk+0xe>
		heap_end = &end;
 8001886:	4909      	ldr	r1, [pc, #36]	; (80018ac <_sbrk+0x30>)
 8001888:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800188a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800188c:	4669      	mov	r1, sp
 800188e:	4402      	add	r2, r0
 8001890:	428a      	cmp	r2, r1
 8001892:	d906      	bls.n	80018a2 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001894:	f000 f844 	bl	8001920 <__errno>
 8001898:	230c      	movs	r3, #12
 800189a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800189c:	f04f 30ff 	mov.w	r0, #4294967295
 80018a0:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80018a2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80018a4:	bd08      	pop	{r3, pc}
 80018a6:	bf00      	nop
 80018a8:	200000a8 	.word	0x200000a8
 80018ac:	200003f8 	.word	0x200003f8

080018b0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <SystemInit+0x18>)
 80018b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80018b6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80018ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001904 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018d2:	e003      	b.n	80018dc <LoopCopyDataInit>

080018d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018da:	3104      	adds	r1, #4

080018dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018dc:	480b      	ldr	r0, [pc, #44]	; (800190c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018e4:	d3f6      	bcc.n	80018d4 <CopyDataInit>
  ldr  r2, =_sbss
 80018e6:	4a0b      	ldr	r2, [pc, #44]	; (8001914 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018e8:	e002      	b.n	80018f0 <LoopFillZerobss>

080018ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018ec:	f842 3b04 	str.w	r3, [r2], #4

080018f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018f4:	d3f9      	bcc.n	80018ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018f6:	f7ff ffdb 	bl	80018b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018fa:	f000 f817 	bl	800192c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018fe:	f7ff fd05 	bl	800130c <main>
  bx  lr    
 8001902:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001904:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001908:	08002440 	.word	0x08002440
  ldr  r0, =_sdata
 800190c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001910:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8001914:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8001918:	200003f8 	.word	0x200003f8

0800191c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800191c:	e7fe      	b.n	800191c <ADC_IRQHandler>
	...

08001920 <__errno>:
 8001920:	4b01      	ldr	r3, [pc, #4]	; (8001928 <__errno+0x8>)
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000020 	.word	0x20000020

0800192c <__libc_init_array>:
 800192c:	b570      	push	{r4, r5, r6, lr}
 800192e:	4e0d      	ldr	r6, [pc, #52]	; (8001964 <__libc_init_array+0x38>)
 8001930:	4c0d      	ldr	r4, [pc, #52]	; (8001968 <__libc_init_array+0x3c>)
 8001932:	1ba4      	subs	r4, r4, r6
 8001934:	10a4      	asrs	r4, r4, #2
 8001936:	2500      	movs	r5, #0
 8001938:	42a5      	cmp	r5, r4
 800193a:	d109      	bne.n	8001950 <__libc_init_array+0x24>
 800193c:	4e0b      	ldr	r6, [pc, #44]	; (800196c <__libc_init_array+0x40>)
 800193e:	4c0c      	ldr	r4, [pc, #48]	; (8001970 <__libc_init_array+0x44>)
 8001940:	f000 fc60 	bl	8002204 <_init>
 8001944:	1ba4      	subs	r4, r4, r6
 8001946:	10a4      	asrs	r4, r4, #2
 8001948:	2500      	movs	r5, #0
 800194a:	42a5      	cmp	r5, r4
 800194c:	d105      	bne.n	800195a <__libc_init_array+0x2e>
 800194e:	bd70      	pop	{r4, r5, r6, pc}
 8001950:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001954:	4798      	blx	r3
 8001956:	3501      	adds	r5, #1
 8001958:	e7ee      	b.n	8001938 <__libc_init_array+0xc>
 800195a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800195e:	4798      	blx	r3
 8001960:	3501      	adds	r5, #1
 8001962:	e7f2      	b.n	800194a <__libc_init_array+0x1e>
 8001964:	08002438 	.word	0x08002438
 8001968:	08002438 	.word	0x08002438
 800196c:	08002438 	.word	0x08002438
 8001970:	0800243c 	.word	0x0800243c

08001974 <memset>:
 8001974:	4402      	add	r2, r0
 8001976:	4603      	mov	r3, r0
 8001978:	4293      	cmp	r3, r2
 800197a:	d100      	bne.n	800197e <memset+0xa>
 800197c:	4770      	bx	lr
 800197e:	f803 1b01 	strb.w	r1, [r3], #1
 8001982:	e7f9      	b.n	8001978 <memset+0x4>

08001984 <siprintf>:
 8001984:	b40e      	push	{r1, r2, r3}
 8001986:	b500      	push	{lr}
 8001988:	b09c      	sub	sp, #112	; 0x70
 800198a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800198e:	ab1d      	add	r3, sp, #116	; 0x74
 8001990:	f8ad 1014 	strh.w	r1, [sp, #20]
 8001994:	9002      	str	r0, [sp, #8]
 8001996:	9006      	str	r0, [sp, #24]
 8001998:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800199c:	480a      	ldr	r0, [pc, #40]	; (80019c8 <siprintf+0x44>)
 800199e:	9104      	str	r1, [sp, #16]
 80019a0:	9107      	str	r1, [sp, #28]
 80019a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80019aa:	f8ad 1016 	strh.w	r1, [sp, #22]
 80019ae:	6800      	ldr	r0, [r0, #0]
 80019b0:	9301      	str	r3, [sp, #4]
 80019b2:	a902      	add	r1, sp, #8
 80019b4:	f000 f888 	bl	8001ac8 <_svfiprintf_r>
 80019b8:	9b02      	ldr	r3, [sp, #8]
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
 80019be:	b01c      	add	sp, #112	; 0x70
 80019c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80019c4:	b003      	add	sp, #12
 80019c6:	4770      	bx	lr
 80019c8:	20000020 	.word	0x20000020

080019cc <strcpy>:
 80019cc:	4603      	mov	r3, r0
 80019ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80019d2:	f803 2b01 	strb.w	r2, [r3], #1
 80019d6:	2a00      	cmp	r2, #0
 80019d8:	d1f9      	bne.n	80019ce <strcpy+0x2>
 80019da:	4770      	bx	lr

080019dc <strstr>:
 80019dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019de:	7803      	ldrb	r3, [r0, #0]
 80019e0:	b133      	cbz	r3, 80019f0 <strstr+0x14>
 80019e2:	4603      	mov	r3, r0
 80019e4:	4618      	mov	r0, r3
 80019e6:	1c5e      	adds	r6, r3, #1
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	b933      	cbnz	r3, 80019fa <strstr+0x1e>
 80019ec:	4618      	mov	r0, r3
 80019ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f0:	780b      	ldrb	r3, [r1, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	bf18      	it	ne
 80019f6:	2000      	movne	r0, #0
 80019f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019fa:	1e4d      	subs	r5, r1, #1
 80019fc:	1e44      	subs	r4, r0, #1
 80019fe:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8001a02:	2a00      	cmp	r2, #0
 8001a04:	d0f3      	beq.n	80019ee <strstr+0x12>
 8001a06:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8001a0a:	4297      	cmp	r7, r2
 8001a0c:	4633      	mov	r3, r6
 8001a0e:	d0f6      	beq.n	80019fe <strstr+0x22>
 8001a10:	e7e8      	b.n	80019e4 <strstr+0x8>

08001a12 <__ssputs_r>:
 8001a12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a16:	688e      	ldr	r6, [r1, #8]
 8001a18:	429e      	cmp	r6, r3
 8001a1a:	4682      	mov	sl, r0
 8001a1c:	460c      	mov	r4, r1
 8001a1e:	4691      	mov	r9, r2
 8001a20:	4698      	mov	r8, r3
 8001a22:	d835      	bhi.n	8001a90 <__ssputs_r+0x7e>
 8001a24:	898a      	ldrh	r2, [r1, #12]
 8001a26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001a2a:	d031      	beq.n	8001a90 <__ssputs_r+0x7e>
 8001a2c:	6825      	ldr	r5, [r4, #0]
 8001a2e:	6909      	ldr	r1, [r1, #16]
 8001a30:	1a6f      	subs	r7, r5, r1
 8001a32:	6965      	ldr	r5, [r4, #20]
 8001a34:	2302      	movs	r3, #2
 8001a36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001a3a:	fb95 f5f3 	sdiv	r5, r5, r3
 8001a3e:	f108 0301 	add.w	r3, r8, #1
 8001a42:	443b      	add	r3, r7
 8001a44:	429d      	cmp	r5, r3
 8001a46:	bf38      	it	cc
 8001a48:	461d      	movcc	r5, r3
 8001a4a:	0553      	lsls	r3, r2, #21
 8001a4c:	d531      	bpl.n	8001ab2 <__ssputs_r+0xa0>
 8001a4e:	4629      	mov	r1, r5
 8001a50:	f000 fb38 	bl	80020c4 <_malloc_r>
 8001a54:	4606      	mov	r6, r0
 8001a56:	b950      	cbnz	r0, 8001a6e <__ssputs_r+0x5c>
 8001a58:	230c      	movs	r3, #12
 8001a5a:	f8ca 3000 	str.w	r3, [sl]
 8001a5e:	89a3      	ldrh	r3, [r4, #12]
 8001a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a64:	81a3      	strh	r3, [r4, #12]
 8001a66:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a6e:	463a      	mov	r2, r7
 8001a70:	6921      	ldr	r1, [r4, #16]
 8001a72:	f000 fab3 	bl	8001fdc <memcpy>
 8001a76:	89a3      	ldrh	r3, [r4, #12]
 8001a78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a80:	81a3      	strh	r3, [r4, #12]
 8001a82:	6126      	str	r6, [r4, #16]
 8001a84:	6165      	str	r5, [r4, #20]
 8001a86:	443e      	add	r6, r7
 8001a88:	1bed      	subs	r5, r5, r7
 8001a8a:	6026      	str	r6, [r4, #0]
 8001a8c:	60a5      	str	r5, [r4, #8]
 8001a8e:	4646      	mov	r6, r8
 8001a90:	4546      	cmp	r6, r8
 8001a92:	bf28      	it	cs
 8001a94:	4646      	movcs	r6, r8
 8001a96:	4632      	mov	r2, r6
 8001a98:	4649      	mov	r1, r9
 8001a9a:	6820      	ldr	r0, [r4, #0]
 8001a9c:	f000 faa9 	bl	8001ff2 <memmove>
 8001aa0:	68a3      	ldr	r3, [r4, #8]
 8001aa2:	1b9b      	subs	r3, r3, r6
 8001aa4:	60a3      	str	r3, [r4, #8]
 8001aa6:	6823      	ldr	r3, [r4, #0]
 8001aa8:	441e      	add	r6, r3
 8001aaa:	6026      	str	r6, [r4, #0]
 8001aac:	2000      	movs	r0, #0
 8001aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ab2:	462a      	mov	r2, r5
 8001ab4:	f000 fb64 	bl	8002180 <_realloc_r>
 8001ab8:	4606      	mov	r6, r0
 8001aba:	2800      	cmp	r0, #0
 8001abc:	d1e1      	bne.n	8001a82 <__ssputs_r+0x70>
 8001abe:	6921      	ldr	r1, [r4, #16]
 8001ac0:	4650      	mov	r0, sl
 8001ac2:	f000 fab1 	bl	8002028 <_free_r>
 8001ac6:	e7c7      	b.n	8001a58 <__ssputs_r+0x46>

08001ac8 <_svfiprintf_r>:
 8001ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001acc:	b09d      	sub	sp, #116	; 0x74
 8001ace:	4680      	mov	r8, r0
 8001ad0:	9303      	str	r3, [sp, #12]
 8001ad2:	898b      	ldrh	r3, [r1, #12]
 8001ad4:	061c      	lsls	r4, r3, #24
 8001ad6:	460d      	mov	r5, r1
 8001ad8:	4616      	mov	r6, r2
 8001ada:	d50f      	bpl.n	8001afc <_svfiprintf_r+0x34>
 8001adc:	690b      	ldr	r3, [r1, #16]
 8001ade:	b96b      	cbnz	r3, 8001afc <_svfiprintf_r+0x34>
 8001ae0:	2140      	movs	r1, #64	; 0x40
 8001ae2:	f000 faef 	bl	80020c4 <_malloc_r>
 8001ae6:	6028      	str	r0, [r5, #0]
 8001ae8:	6128      	str	r0, [r5, #16]
 8001aea:	b928      	cbnz	r0, 8001af8 <_svfiprintf_r+0x30>
 8001aec:	230c      	movs	r3, #12
 8001aee:	f8c8 3000 	str.w	r3, [r8]
 8001af2:	f04f 30ff 	mov.w	r0, #4294967295
 8001af6:	e0c5      	b.n	8001c84 <_svfiprintf_r+0x1bc>
 8001af8:	2340      	movs	r3, #64	; 0x40
 8001afa:	616b      	str	r3, [r5, #20]
 8001afc:	2300      	movs	r3, #0
 8001afe:	9309      	str	r3, [sp, #36]	; 0x24
 8001b00:	2320      	movs	r3, #32
 8001b02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b06:	2330      	movs	r3, #48	; 0x30
 8001b08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001b0c:	f04f 0b01 	mov.w	fp, #1
 8001b10:	4637      	mov	r7, r6
 8001b12:	463c      	mov	r4, r7
 8001b14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d13c      	bne.n	8001b96 <_svfiprintf_r+0xce>
 8001b1c:	ebb7 0a06 	subs.w	sl, r7, r6
 8001b20:	d00b      	beq.n	8001b3a <_svfiprintf_r+0x72>
 8001b22:	4653      	mov	r3, sl
 8001b24:	4632      	mov	r2, r6
 8001b26:	4629      	mov	r1, r5
 8001b28:	4640      	mov	r0, r8
 8001b2a:	f7ff ff72 	bl	8001a12 <__ssputs_r>
 8001b2e:	3001      	adds	r0, #1
 8001b30:	f000 80a3 	beq.w	8001c7a <_svfiprintf_r+0x1b2>
 8001b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b36:	4453      	add	r3, sl
 8001b38:	9309      	str	r3, [sp, #36]	; 0x24
 8001b3a:	783b      	ldrb	r3, [r7, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 809c 	beq.w	8001c7a <_svfiprintf_r+0x1b2>
 8001b42:	2300      	movs	r3, #0
 8001b44:	f04f 32ff 	mov.w	r2, #4294967295
 8001b48:	9304      	str	r3, [sp, #16]
 8001b4a:	9307      	str	r3, [sp, #28]
 8001b4c:	9205      	str	r2, [sp, #20]
 8001b4e:	9306      	str	r3, [sp, #24]
 8001b50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001b54:	931a      	str	r3, [sp, #104]	; 0x68
 8001b56:	2205      	movs	r2, #5
 8001b58:	7821      	ldrb	r1, [r4, #0]
 8001b5a:	4850      	ldr	r0, [pc, #320]	; (8001c9c <_svfiprintf_r+0x1d4>)
 8001b5c:	f7fe fb38 	bl	80001d0 <memchr>
 8001b60:	1c67      	adds	r7, r4, #1
 8001b62:	9b04      	ldr	r3, [sp, #16]
 8001b64:	b9d8      	cbnz	r0, 8001b9e <_svfiprintf_r+0xd6>
 8001b66:	06d9      	lsls	r1, r3, #27
 8001b68:	bf44      	itt	mi
 8001b6a:	2220      	movmi	r2, #32
 8001b6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001b70:	071a      	lsls	r2, r3, #28
 8001b72:	bf44      	itt	mi
 8001b74:	222b      	movmi	r2, #43	; 0x2b
 8001b76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001b7a:	7822      	ldrb	r2, [r4, #0]
 8001b7c:	2a2a      	cmp	r2, #42	; 0x2a
 8001b7e:	d016      	beq.n	8001bae <_svfiprintf_r+0xe6>
 8001b80:	9a07      	ldr	r2, [sp, #28]
 8001b82:	2100      	movs	r1, #0
 8001b84:	200a      	movs	r0, #10
 8001b86:	4627      	mov	r7, r4
 8001b88:	3401      	adds	r4, #1
 8001b8a:	783b      	ldrb	r3, [r7, #0]
 8001b8c:	3b30      	subs	r3, #48	; 0x30
 8001b8e:	2b09      	cmp	r3, #9
 8001b90:	d951      	bls.n	8001c36 <_svfiprintf_r+0x16e>
 8001b92:	b1c9      	cbz	r1, 8001bc8 <_svfiprintf_r+0x100>
 8001b94:	e011      	b.n	8001bba <_svfiprintf_r+0xf2>
 8001b96:	2b25      	cmp	r3, #37	; 0x25
 8001b98:	d0c0      	beq.n	8001b1c <_svfiprintf_r+0x54>
 8001b9a:	4627      	mov	r7, r4
 8001b9c:	e7b9      	b.n	8001b12 <_svfiprintf_r+0x4a>
 8001b9e:	4a3f      	ldr	r2, [pc, #252]	; (8001c9c <_svfiprintf_r+0x1d4>)
 8001ba0:	1a80      	subs	r0, r0, r2
 8001ba2:	fa0b f000 	lsl.w	r0, fp, r0
 8001ba6:	4318      	orrs	r0, r3
 8001ba8:	9004      	str	r0, [sp, #16]
 8001baa:	463c      	mov	r4, r7
 8001bac:	e7d3      	b.n	8001b56 <_svfiprintf_r+0x8e>
 8001bae:	9a03      	ldr	r2, [sp, #12]
 8001bb0:	1d11      	adds	r1, r2, #4
 8001bb2:	6812      	ldr	r2, [r2, #0]
 8001bb4:	9103      	str	r1, [sp, #12]
 8001bb6:	2a00      	cmp	r2, #0
 8001bb8:	db01      	blt.n	8001bbe <_svfiprintf_r+0xf6>
 8001bba:	9207      	str	r2, [sp, #28]
 8001bbc:	e004      	b.n	8001bc8 <_svfiprintf_r+0x100>
 8001bbe:	4252      	negs	r2, r2
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	9207      	str	r2, [sp, #28]
 8001bc6:	9304      	str	r3, [sp, #16]
 8001bc8:	783b      	ldrb	r3, [r7, #0]
 8001bca:	2b2e      	cmp	r3, #46	; 0x2e
 8001bcc:	d10e      	bne.n	8001bec <_svfiprintf_r+0x124>
 8001bce:	787b      	ldrb	r3, [r7, #1]
 8001bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8001bd2:	f107 0101 	add.w	r1, r7, #1
 8001bd6:	d132      	bne.n	8001c3e <_svfiprintf_r+0x176>
 8001bd8:	9b03      	ldr	r3, [sp, #12]
 8001bda:	1d1a      	adds	r2, r3, #4
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	9203      	str	r2, [sp, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bfb8      	it	lt
 8001be4:	f04f 33ff 	movlt.w	r3, #4294967295
 8001be8:	3702      	adds	r7, #2
 8001bea:	9305      	str	r3, [sp, #20]
 8001bec:	4c2c      	ldr	r4, [pc, #176]	; (8001ca0 <_svfiprintf_r+0x1d8>)
 8001bee:	7839      	ldrb	r1, [r7, #0]
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f7fe faec 	bl	80001d0 <memchr>
 8001bf8:	b138      	cbz	r0, 8001c0a <_svfiprintf_r+0x142>
 8001bfa:	2340      	movs	r3, #64	; 0x40
 8001bfc:	1b00      	subs	r0, r0, r4
 8001bfe:	fa03 f000 	lsl.w	r0, r3, r0
 8001c02:	9b04      	ldr	r3, [sp, #16]
 8001c04:	4303      	orrs	r3, r0
 8001c06:	9304      	str	r3, [sp, #16]
 8001c08:	3701      	adds	r7, #1
 8001c0a:	7839      	ldrb	r1, [r7, #0]
 8001c0c:	4825      	ldr	r0, [pc, #148]	; (8001ca4 <_svfiprintf_r+0x1dc>)
 8001c0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001c12:	2206      	movs	r2, #6
 8001c14:	1c7e      	adds	r6, r7, #1
 8001c16:	f7fe fadb 	bl	80001d0 <memchr>
 8001c1a:	2800      	cmp	r0, #0
 8001c1c:	d035      	beq.n	8001c8a <_svfiprintf_r+0x1c2>
 8001c1e:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <_svfiprintf_r+0x1e0>)
 8001c20:	b9fb      	cbnz	r3, 8001c62 <_svfiprintf_r+0x19a>
 8001c22:	9b03      	ldr	r3, [sp, #12]
 8001c24:	3307      	adds	r3, #7
 8001c26:	f023 0307 	bic.w	r3, r3, #7
 8001c2a:	3308      	adds	r3, #8
 8001c2c:	9303      	str	r3, [sp, #12]
 8001c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c30:	444b      	add	r3, r9
 8001c32:	9309      	str	r3, [sp, #36]	; 0x24
 8001c34:	e76c      	b.n	8001b10 <_svfiprintf_r+0x48>
 8001c36:	fb00 3202 	mla	r2, r0, r2, r3
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	e7a3      	b.n	8001b86 <_svfiprintf_r+0xbe>
 8001c3e:	2300      	movs	r3, #0
 8001c40:	9305      	str	r3, [sp, #20]
 8001c42:	4618      	mov	r0, r3
 8001c44:	240a      	movs	r4, #10
 8001c46:	460f      	mov	r7, r1
 8001c48:	3101      	adds	r1, #1
 8001c4a:	783a      	ldrb	r2, [r7, #0]
 8001c4c:	3a30      	subs	r2, #48	; 0x30
 8001c4e:	2a09      	cmp	r2, #9
 8001c50:	d903      	bls.n	8001c5a <_svfiprintf_r+0x192>
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0ca      	beq.n	8001bec <_svfiprintf_r+0x124>
 8001c56:	9005      	str	r0, [sp, #20]
 8001c58:	e7c8      	b.n	8001bec <_svfiprintf_r+0x124>
 8001c5a:	fb04 2000 	mla	r0, r4, r0, r2
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e7f1      	b.n	8001c46 <_svfiprintf_r+0x17e>
 8001c62:	ab03      	add	r3, sp, #12
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	462a      	mov	r2, r5
 8001c68:	4b10      	ldr	r3, [pc, #64]	; (8001cac <_svfiprintf_r+0x1e4>)
 8001c6a:	a904      	add	r1, sp, #16
 8001c6c:	4640      	mov	r0, r8
 8001c6e:	f3af 8000 	nop.w
 8001c72:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001c76:	4681      	mov	r9, r0
 8001c78:	d1d9      	bne.n	8001c2e <_svfiprintf_r+0x166>
 8001c7a:	89ab      	ldrh	r3, [r5, #12]
 8001c7c:	065b      	lsls	r3, r3, #25
 8001c7e:	f53f af38 	bmi.w	8001af2 <_svfiprintf_r+0x2a>
 8001c82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001c84:	b01d      	add	sp, #116	; 0x74
 8001c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c8a:	ab03      	add	r3, sp, #12
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	462a      	mov	r2, r5
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <_svfiprintf_r+0x1e4>)
 8001c92:	a904      	add	r1, sp, #16
 8001c94:	4640      	mov	r0, r8
 8001c96:	f000 f881 	bl	8001d9c <_printf_i>
 8001c9a:	e7ea      	b.n	8001c72 <_svfiprintf_r+0x1aa>
 8001c9c:	080023fa 	.word	0x080023fa
 8001ca0:	08002400 	.word	0x08002400
 8001ca4:	08002404 	.word	0x08002404
 8001ca8:	00000000 	.word	0x00000000
 8001cac:	08001a13 	.word	0x08001a13

08001cb0 <_printf_common>:
 8001cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cb4:	4691      	mov	r9, r2
 8001cb6:	461f      	mov	r7, r3
 8001cb8:	688a      	ldr	r2, [r1, #8]
 8001cba:	690b      	ldr	r3, [r1, #16]
 8001cbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	bfb8      	it	lt
 8001cc4:	4613      	movlt	r3, r2
 8001cc6:	f8c9 3000 	str.w	r3, [r9]
 8001cca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001cce:	4606      	mov	r6, r0
 8001cd0:	460c      	mov	r4, r1
 8001cd2:	b112      	cbz	r2, 8001cda <_printf_common+0x2a>
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	f8c9 3000 	str.w	r3, [r9]
 8001cda:	6823      	ldr	r3, [r4, #0]
 8001cdc:	0699      	lsls	r1, r3, #26
 8001cde:	bf42      	ittt	mi
 8001ce0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001ce4:	3302      	addmi	r3, #2
 8001ce6:	f8c9 3000 	strmi.w	r3, [r9]
 8001cea:	6825      	ldr	r5, [r4, #0]
 8001cec:	f015 0506 	ands.w	r5, r5, #6
 8001cf0:	d107      	bne.n	8001d02 <_printf_common+0x52>
 8001cf2:	f104 0a19 	add.w	sl, r4, #25
 8001cf6:	68e3      	ldr	r3, [r4, #12]
 8001cf8:	f8d9 2000 	ldr.w	r2, [r9]
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	429d      	cmp	r5, r3
 8001d00:	db29      	blt.n	8001d56 <_printf_common+0xa6>
 8001d02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001d06:	6822      	ldr	r2, [r4, #0]
 8001d08:	3300      	adds	r3, #0
 8001d0a:	bf18      	it	ne
 8001d0c:	2301      	movne	r3, #1
 8001d0e:	0692      	lsls	r2, r2, #26
 8001d10:	d42e      	bmi.n	8001d70 <_printf_common+0xc0>
 8001d12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001d16:	4639      	mov	r1, r7
 8001d18:	4630      	mov	r0, r6
 8001d1a:	47c0      	blx	r8
 8001d1c:	3001      	adds	r0, #1
 8001d1e:	d021      	beq.n	8001d64 <_printf_common+0xb4>
 8001d20:	6823      	ldr	r3, [r4, #0]
 8001d22:	68e5      	ldr	r5, [r4, #12]
 8001d24:	f8d9 2000 	ldr.w	r2, [r9]
 8001d28:	f003 0306 	and.w	r3, r3, #6
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	bf08      	it	eq
 8001d30:	1aad      	subeq	r5, r5, r2
 8001d32:	68a3      	ldr	r3, [r4, #8]
 8001d34:	6922      	ldr	r2, [r4, #16]
 8001d36:	bf0c      	ite	eq
 8001d38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d3c:	2500      	movne	r5, #0
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	bfc4      	itt	gt
 8001d42:	1a9b      	subgt	r3, r3, r2
 8001d44:	18ed      	addgt	r5, r5, r3
 8001d46:	f04f 0900 	mov.w	r9, #0
 8001d4a:	341a      	adds	r4, #26
 8001d4c:	454d      	cmp	r5, r9
 8001d4e:	d11b      	bne.n	8001d88 <_printf_common+0xd8>
 8001d50:	2000      	movs	r0, #0
 8001d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d56:	2301      	movs	r3, #1
 8001d58:	4652      	mov	r2, sl
 8001d5a:	4639      	mov	r1, r7
 8001d5c:	4630      	mov	r0, r6
 8001d5e:	47c0      	blx	r8
 8001d60:	3001      	adds	r0, #1
 8001d62:	d103      	bne.n	8001d6c <_printf_common+0xbc>
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295
 8001d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d6c:	3501      	adds	r5, #1
 8001d6e:	e7c2      	b.n	8001cf6 <_printf_common+0x46>
 8001d70:	18e1      	adds	r1, r4, r3
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	2030      	movs	r0, #48	; 0x30
 8001d76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001d7a:	4422      	add	r2, r4
 8001d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001d80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001d84:	3302      	adds	r3, #2
 8001d86:	e7c4      	b.n	8001d12 <_printf_common+0x62>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	4622      	mov	r2, r4
 8001d8c:	4639      	mov	r1, r7
 8001d8e:	4630      	mov	r0, r6
 8001d90:	47c0      	blx	r8
 8001d92:	3001      	adds	r0, #1
 8001d94:	d0e6      	beq.n	8001d64 <_printf_common+0xb4>
 8001d96:	f109 0901 	add.w	r9, r9, #1
 8001d9a:	e7d7      	b.n	8001d4c <_printf_common+0x9c>

08001d9c <_printf_i>:
 8001d9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001da0:	4617      	mov	r7, r2
 8001da2:	7e0a      	ldrb	r2, [r1, #24]
 8001da4:	b085      	sub	sp, #20
 8001da6:	2a6e      	cmp	r2, #110	; 0x6e
 8001da8:	4698      	mov	r8, r3
 8001daa:	4606      	mov	r6, r0
 8001dac:	460c      	mov	r4, r1
 8001dae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001db0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001db4:	f000 80bc 	beq.w	8001f30 <_printf_i+0x194>
 8001db8:	d81a      	bhi.n	8001df0 <_printf_i+0x54>
 8001dba:	2a63      	cmp	r2, #99	; 0x63
 8001dbc:	d02e      	beq.n	8001e1c <_printf_i+0x80>
 8001dbe:	d80a      	bhi.n	8001dd6 <_printf_i+0x3a>
 8001dc0:	2a00      	cmp	r2, #0
 8001dc2:	f000 80c8 	beq.w	8001f56 <_printf_i+0x1ba>
 8001dc6:	2a58      	cmp	r2, #88	; 0x58
 8001dc8:	f000 808a 	beq.w	8001ee0 <_printf_i+0x144>
 8001dcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001dd0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001dd4:	e02a      	b.n	8001e2c <_printf_i+0x90>
 8001dd6:	2a64      	cmp	r2, #100	; 0x64
 8001dd8:	d001      	beq.n	8001dde <_printf_i+0x42>
 8001dda:	2a69      	cmp	r2, #105	; 0x69
 8001ddc:	d1f6      	bne.n	8001dcc <_printf_i+0x30>
 8001dde:	6821      	ldr	r1, [r4, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001de6:	d023      	beq.n	8001e30 <_printf_i+0x94>
 8001de8:	1d11      	adds	r1, r2, #4
 8001dea:	6019      	str	r1, [r3, #0]
 8001dec:	6813      	ldr	r3, [r2, #0]
 8001dee:	e027      	b.n	8001e40 <_printf_i+0xa4>
 8001df0:	2a73      	cmp	r2, #115	; 0x73
 8001df2:	f000 80b4 	beq.w	8001f5e <_printf_i+0x1c2>
 8001df6:	d808      	bhi.n	8001e0a <_printf_i+0x6e>
 8001df8:	2a6f      	cmp	r2, #111	; 0x6f
 8001dfa:	d02a      	beq.n	8001e52 <_printf_i+0xb6>
 8001dfc:	2a70      	cmp	r2, #112	; 0x70
 8001dfe:	d1e5      	bne.n	8001dcc <_printf_i+0x30>
 8001e00:	680a      	ldr	r2, [r1, #0]
 8001e02:	f042 0220 	orr.w	r2, r2, #32
 8001e06:	600a      	str	r2, [r1, #0]
 8001e08:	e003      	b.n	8001e12 <_printf_i+0x76>
 8001e0a:	2a75      	cmp	r2, #117	; 0x75
 8001e0c:	d021      	beq.n	8001e52 <_printf_i+0xb6>
 8001e0e:	2a78      	cmp	r2, #120	; 0x78
 8001e10:	d1dc      	bne.n	8001dcc <_printf_i+0x30>
 8001e12:	2278      	movs	r2, #120	; 0x78
 8001e14:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001e18:	496e      	ldr	r1, [pc, #440]	; (8001fd4 <_printf_i+0x238>)
 8001e1a:	e064      	b.n	8001ee6 <_printf_i+0x14a>
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001e22:	1d11      	adds	r1, r2, #4
 8001e24:	6019      	str	r1, [r3, #0]
 8001e26:	6813      	ldr	r3, [r2, #0]
 8001e28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0a3      	b.n	8001f78 <_printf_i+0x1dc>
 8001e30:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001e34:	f102 0104 	add.w	r1, r2, #4
 8001e38:	6019      	str	r1, [r3, #0]
 8001e3a:	d0d7      	beq.n	8001dec <_printf_i+0x50>
 8001e3c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	da03      	bge.n	8001e4c <_printf_i+0xb0>
 8001e44:	222d      	movs	r2, #45	; 0x2d
 8001e46:	425b      	negs	r3, r3
 8001e48:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001e4c:	4962      	ldr	r1, [pc, #392]	; (8001fd8 <_printf_i+0x23c>)
 8001e4e:	220a      	movs	r2, #10
 8001e50:	e017      	b.n	8001e82 <_printf_i+0xe6>
 8001e52:	6820      	ldr	r0, [r4, #0]
 8001e54:	6819      	ldr	r1, [r3, #0]
 8001e56:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001e5a:	d003      	beq.n	8001e64 <_printf_i+0xc8>
 8001e5c:	1d08      	adds	r0, r1, #4
 8001e5e:	6018      	str	r0, [r3, #0]
 8001e60:	680b      	ldr	r3, [r1, #0]
 8001e62:	e006      	b.n	8001e72 <_printf_i+0xd6>
 8001e64:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001e68:	f101 0004 	add.w	r0, r1, #4
 8001e6c:	6018      	str	r0, [r3, #0]
 8001e6e:	d0f7      	beq.n	8001e60 <_printf_i+0xc4>
 8001e70:	880b      	ldrh	r3, [r1, #0]
 8001e72:	4959      	ldr	r1, [pc, #356]	; (8001fd8 <_printf_i+0x23c>)
 8001e74:	2a6f      	cmp	r2, #111	; 0x6f
 8001e76:	bf14      	ite	ne
 8001e78:	220a      	movne	r2, #10
 8001e7a:	2208      	moveq	r2, #8
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001e82:	6865      	ldr	r5, [r4, #4]
 8001e84:	60a5      	str	r5, [r4, #8]
 8001e86:	2d00      	cmp	r5, #0
 8001e88:	f2c0 809c 	blt.w	8001fc4 <_printf_i+0x228>
 8001e8c:	6820      	ldr	r0, [r4, #0]
 8001e8e:	f020 0004 	bic.w	r0, r0, #4
 8001e92:	6020      	str	r0, [r4, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d13f      	bne.n	8001f18 <_printf_i+0x17c>
 8001e98:	2d00      	cmp	r5, #0
 8001e9a:	f040 8095 	bne.w	8001fc8 <_printf_i+0x22c>
 8001e9e:	4675      	mov	r5, lr
 8001ea0:	2a08      	cmp	r2, #8
 8001ea2:	d10b      	bne.n	8001ebc <_printf_i+0x120>
 8001ea4:	6823      	ldr	r3, [r4, #0]
 8001ea6:	07da      	lsls	r2, r3, #31
 8001ea8:	d508      	bpl.n	8001ebc <_printf_i+0x120>
 8001eaa:	6923      	ldr	r3, [r4, #16]
 8001eac:	6862      	ldr	r2, [r4, #4]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	bfde      	ittt	le
 8001eb2:	2330      	movle	r3, #48	; 0x30
 8001eb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001eb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001ebc:	ebae 0305 	sub.w	r3, lr, r5
 8001ec0:	6123      	str	r3, [r4, #16]
 8001ec2:	f8cd 8000 	str.w	r8, [sp]
 8001ec6:	463b      	mov	r3, r7
 8001ec8:	aa03      	add	r2, sp, #12
 8001eca:	4621      	mov	r1, r4
 8001ecc:	4630      	mov	r0, r6
 8001ece:	f7ff feef 	bl	8001cb0 <_printf_common>
 8001ed2:	3001      	adds	r0, #1
 8001ed4:	d155      	bne.n	8001f82 <_printf_i+0x1e6>
 8001ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8001eda:	b005      	add	sp, #20
 8001edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ee0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001ee4:	493c      	ldr	r1, [pc, #240]	; (8001fd8 <_printf_i+0x23c>)
 8001ee6:	6822      	ldr	r2, [r4, #0]
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001eee:	f100 0504 	add.w	r5, r0, #4
 8001ef2:	601d      	str	r5, [r3, #0]
 8001ef4:	d001      	beq.n	8001efa <_printf_i+0x15e>
 8001ef6:	6803      	ldr	r3, [r0, #0]
 8001ef8:	e002      	b.n	8001f00 <_printf_i+0x164>
 8001efa:	0655      	lsls	r5, r2, #25
 8001efc:	d5fb      	bpl.n	8001ef6 <_printf_i+0x15a>
 8001efe:	8803      	ldrh	r3, [r0, #0]
 8001f00:	07d0      	lsls	r0, r2, #31
 8001f02:	bf44      	itt	mi
 8001f04:	f042 0220 	orrmi.w	r2, r2, #32
 8001f08:	6022      	strmi	r2, [r4, #0]
 8001f0a:	b91b      	cbnz	r3, 8001f14 <_printf_i+0x178>
 8001f0c:	6822      	ldr	r2, [r4, #0]
 8001f0e:	f022 0220 	bic.w	r2, r2, #32
 8001f12:	6022      	str	r2, [r4, #0]
 8001f14:	2210      	movs	r2, #16
 8001f16:	e7b1      	b.n	8001e7c <_printf_i+0xe0>
 8001f18:	4675      	mov	r5, lr
 8001f1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8001f1e:	fb02 3310 	mls	r3, r2, r0, r3
 8001f22:	5ccb      	ldrb	r3, [r1, r3]
 8001f24:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	d1f5      	bne.n	8001f1a <_printf_i+0x17e>
 8001f2e:	e7b7      	b.n	8001ea0 <_printf_i+0x104>
 8001f30:	6808      	ldr	r0, [r1, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	6949      	ldr	r1, [r1, #20]
 8001f36:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001f3a:	d004      	beq.n	8001f46 <_printf_i+0x1aa>
 8001f3c:	1d10      	adds	r0, r2, #4
 8001f3e:	6018      	str	r0, [r3, #0]
 8001f40:	6813      	ldr	r3, [r2, #0]
 8001f42:	6019      	str	r1, [r3, #0]
 8001f44:	e007      	b.n	8001f56 <_printf_i+0x1ba>
 8001f46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001f4a:	f102 0004 	add.w	r0, r2, #4
 8001f4e:	6018      	str	r0, [r3, #0]
 8001f50:	6813      	ldr	r3, [r2, #0]
 8001f52:	d0f6      	beq.n	8001f42 <_printf_i+0x1a6>
 8001f54:	8019      	strh	r1, [r3, #0]
 8001f56:	2300      	movs	r3, #0
 8001f58:	6123      	str	r3, [r4, #16]
 8001f5a:	4675      	mov	r5, lr
 8001f5c:	e7b1      	b.n	8001ec2 <_printf_i+0x126>
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	1d11      	adds	r1, r2, #4
 8001f62:	6019      	str	r1, [r3, #0]
 8001f64:	6815      	ldr	r5, [r2, #0]
 8001f66:	6862      	ldr	r2, [r4, #4]
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4628      	mov	r0, r5
 8001f6c:	f7fe f930 	bl	80001d0 <memchr>
 8001f70:	b108      	cbz	r0, 8001f76 <_printf_i+0x1da>
 8001f72:	1b40      	subs	r0, r0, r5
 8001f74:	6060      	str	r0, [r4, #4]
 8001f76:	6863      	ldr	r3, [r4, #4]
 8001f78:	6123      	str	r3, [r4, #16]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f80:	e79f      	b.n	8001ec2 <_printf_i+0x126>
 8001f82:	6923      	ldr	r3, [r4, #16]
 8001f84:	462a      	mov	r2, r5
 8001f86:	4639      	mov	r1, r7
 8001f88:	4630      	mov	r0, r6
 8001f8a:	47c0      	blx	r8
 8001f8c:	3001      	adds	r0, #1
 8001f8e:	d0a2      	beq.n	8001ed6 <_printf_i+0x13a>
 8001f90:	6823      	ldr	r3, [r4, #0]
 8001f92:	079b      	lsls	r3, r3, #30
 8001f94:	d507      	bpl.n	8001fa6 <_printf_i+0x20a>
 8001f96:	2500      	movs	r5, #0
 8001f98:	f104 0919 	add.w	r9, r4, #25
 8001f9c:	68e3      	ldr	r3, [r4, #12]
 8001f9e:	9a03      	ldr	r2, [sp, #12]
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	429d      	cmp	r5, r3
 8001fa4:	db05      	blt.n	8001fb2 <_printf_i+0x216>
 8001fa6:	68e0      	ldr	r0, [r4, #12]
 8001fa8:	9b03      	ldr	r3, [sp, #12]
 8001faa:	4298      	cmp	r0, r3
 8001fac:	bfb8      	it	lt
 8001fae:	4618      	movlt	r0, r3
 8001fb0:	e793      	b.n	8001eda <_printf_i+0x13e>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	464a      	mov	r2, r9
 8001fb6:	4639      	mov	r1, r7
 8001fb8:	4630      	mov	r0, r6
 8001fba:	47c0      	blx	r8
 8001fbc:	3001      	adds	r0, #1
 8001fbe:	d08a      	beq.n	8001ed6 <_printf_i+0x13a>
 8001fc0:	3501      	adds	r5, #1
 8001fc2:	e7eb      	b.n	8001f9c <_printf_i+0x200>
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1a7      	bne.n	8001f18 <_printf_i+0x17c>
 8001fc8:	780b      	ldrb	r3, [r1, #0]
 8001fca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001fce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001fd2:	e765      	b.n	8001ea0 <_printf_i+0x104>
 8001fd4:	0800241c 	.word	0x0800241c
 8001fd8:	0800240b 	.word	0x0800240b

08001fdc <memcpy>:
 8001fdc:	b510      	push	{r4, lr}
 8001fde:	1e43      	subs	r3, r0, #1
 8001fe0:	440a      	add	r2, r1
 8001fe2:	4291      	cmp	r1, r2
 8001fe4:	d100      	bne.n	8001fe8 <memcpy+0xc>
 8001fe6:	bd10      	pop	{r4, pc}
 8001fe8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001fec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001ff0:	e7f7      	b.n	8001fe2 <memcpy+0x6>

08001ff2 <memmove>:
 8001ff2:	4288      	cmp	r0, r1
 8001ff4:	b510      	push	{r4, lr}
 8001ff6:	eb01 0302 	add.w	r3, r1, r2
 8001ffa:	d803      	bhi.n	8002004 <memmove+0x12>
 8001ffc:	1e42      	subs	r2, r0, #1
 8001ffe:	4299      	cmp	r1, r3
 8002000:	d10c      	bne.n	800201c <memmove+0x2a>
 8002002:	bd10      	pop	{r4, pc}
 8002004:	4298      	cmp	r0, r3
 8002006:	d2f9      	bcs.n	8001ffc <memmove+0xa>
 8002008:	1881      	adds	r1, r0, r2
 800200a:	1ad2      	subs	r2, r2, r3
 800200c:	42d3      	cmn	r3, r2
 800200e:	d100      	bne.n	8002012 <memmove+0x20>
 8002010:	bd10      	pop	{r4, pc}
 8002012:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002016:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800201a:	e7f7      	b.n	800200c <memmove+0x1a>
 800201c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002020:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002024:	e7eb      	b.n	8001ffe <memmove+0xc>
	...

08002028 <_free_r>:
 8002028:	b538      	push	{r3, r4, r5, lr}
 800202a:	4605      	mov	r5, r0
 800202c:	2900      	cmp	r1, #0
 800202e:	d045      	beq.n	80020bc <_free_r+0x94>
 8002030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002034:	1f0c      	subs	r4, r1, #4
 8002036:	2b00      	cmp	r3, #0
 8002038:	bfb8      	it	lt
 800203a:	18e4      	addlt	r4, r4, r3
 800203c:	f000 f8d6 	bl	80021ec <__malloc_lock>
 8002040:	4a1f      	ldr	r2, [pc, #124]	; (80020c0 <_free_r+0x98>)
 8002042:	6813      	ldr	r3, [r2, #0]
 8002044:	4610      	mov	r0, r2
 8002046:	b933      	cbnz	r3, 8002056 <_free_r+0x2e>
 8002048:	6063      	str	r3, [r4, #4]
 800204a:	6014      	str	r4, [r2, #0]
 800204c:	4628      	mov	r0, r5
 800204e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002052:	f000 b8cc 	b.w	80021ee <__malloc_unlock>
 8002056:	42a3      	cmp	r3, r4
 8002058:	d90c      	bls.n	8002074 <_free_r+0x4c>
 800205a:	6821      	ldr	r1, [r4, #0]
 800205c:	1862      	adds	r2, r4, r1
 800205e:	4293      	cmp	r3, r2
 8002060:	bf04      	itt	eq
 8002062:	681a      	ldreq	r2, [r3, #0]
 8002064:	685b      	ldreq	r3, [r3, #4]
 8002066:	6063      	str	r3, [r4, #4]
 8002068:	bf04      	itt	eq
 800206a:	1852      	addeq	r2, r2, r1
 800206c:	6022      	streq	r2, [r4, #0]
 800206e:	6004      	str	r4, [r0, #0]
 8002070:	e7ec      	b.n	800204c <_free_r+0x24>
 8002072:	4613      	mov	r3, r2
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	b10a      	cbz	r2, 800207c <_free_r+0x54>
 8002078:	42a2      	cmp	r2, r4
 800207a:	d9fa      	bls.n	8002072 <_free_r+0x4a>
 800207c:	6819      	ldr	r1, [r3, #0]
 800207e:	1858      	adds	r0, r3, r1
 8002080:	42a0      	cmp	r0, r4
 8002082:	d10b      	bne.n	800209c <_free_r+0x74>
 8002084:	6820      	ldr	r0, [r4, #0]
 8002086:	4401      	add	r1, r0
 8002088:	1858      	adds	r0, r3, r1
 800208a:	4282      	cmp	r2, r0
 800208c:	6019      	str	r1, [r3, #0]
 800208e:	d1dd      	bne.n	800204c <_free_r+0x24>
 8002090:	6810      	ldr	r0, [r2, #0]
 8002092:	6852      	ldr	r2, [r2, #4]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	4401      	add	r1, r0
 8002098:	6019      	str	r1, [r3, #0]
 800209a:	e7d7      	b.n	800204c <_free_r+0x24>
 800209c:	d902      	bls.n	80020a4 <_free_r+0x7c>
 800209e:	230c      	movs	r3, #12
 80020a0:	602b      	str	r3, [r5, #0]
 80020a2:	e7d3      	b.n	800204c <_free_r+0x24>
 80020a4:	6820      	ldr	r0, [r4, #0]
 80020a6:	1821      	adds	r1, r4, r0
 80020a8:	428a      	cmp	r2, r1
 80020aa:	bf04      	itt	eq
 80020ac:	6811      	ldreq	r1, [r2, #0]
 80020ae:	6852      	ldreq	r2, [r2, #4]
 80020b0:	6062      	str	r2, [r4, #4]
 80020b2:	bf04      	itt	eq
 80020b4:	1809      	addeq	r1, r1, r0
 80020b6:	6021      	streq	r1, [r4, #0]
 80020b8:	605c      	str	r4, [r3, #4]
 80020ba:	e7c7      	b.n	800204c <_free_r+0x24>
 80020bc:	bd38      	pop	{r3, r4, r5, pc}
 80020be:	bf00      	nop
 80020c0:	200000ac 	.word	0x200000ac

080020c4 <_malloc_r>:
 80020c4:	b570      	push	{r4, r5, r6, lr}
 80020c6:	1ccd      	adds	r5, r1, #3
 80020c8:	f025 0503 	bic.w	r5, r5, #3
 80020cc:	3508      	adds	r5, #8
 80020ce:	2d0c      	cmp	r5, #12
 80020d0:	bf38      	it	cc
 80020d2:	250c      	movcc	r5, #12
 80020d4:	2d00      	cmp	r5, #0
 80020d6:	4606      	mov	r6, r0
 80020d8:	db01      	blt.n	80020de <_malloc_r+0x1a>
 80020da:	42a9      	cmp	r1, r5
 80020dc:	d903      	bls.n	80020e6 <_malloc_r+0x22>
 80020de:	230c      	movs	r3, #12
 80020e0:	6033      	str	r3, [r6, #0]
 80020e2:	2000      	movs	r0, #0
 80020e4:	bd70      	pop	{r4, r5, r6, pc}
 80020e6:	f000 f881 	bl	80021ec <__malloc_lock>
 80020ea:	4a23      	ldr	r2, [pc, #140]	; (8002178 <_malloc_r+0xb4>)
 80020ec:	6814      	ldr	r4, [r2, #0]
 80020ee:	4621      	mov	r1, r4
 80020f0:	b991      	cbnz	r1, 8002118 <_malloc_r+0x54>
 80020f2:	4c22      	ldr	r4, [pc, #136]	; (800217c <_malloc_r+0xb8>)
 80020f4:	6823      	ldr	r3, [r4, #0]
 80020f6:	b91b      	cbnz	r3, 8002100 <_malloc_r+0x3c>
 80020f8:	4630      	mov	r0, r6
 80020fa:	f000 f867 	bl	80021cc <_sbrk_r>
 80020fe:	6020      	str	r0, [r4, #0]
 8002100:	4629      	mov	r1, r5
 8002102:	4630      	mov	r0, r6
 8002104:	f000 f862 	bl	80021cc <_sbrk_r>
 8002108:	1c43      	adds	r3, r0, #1
 800210a:	d126      	bne.n	800215a <_malloc_r+0x96>
 800210c:	230c      	movs	r3, #12
 800210e:	6033      	str	r3, [r6, #0]
 8002110:	4630      	mov	r0, r6
 8002112:	f000 f86c 	bl	80021ee <__malloc_unlock>
 8002116:	e7e4      	b.n	80020e2 <_malloc_r+0x1e>
 8002118:	680b      	ldr	r3, [r1, #0]
 800211a:	1b5b      	subs	r3, r3, r5
 800211c:	d41a      	bmi.n	8002154 <_malloc_r+0x90>
 800211e:	2b0b      	cmp	r3, #11
 8002120:	d90f      	bls.n	8002142 <_malloc_r+0x7e>
 8002122:	600b      	str	r3, [r1, #0]
 8002124:	50cd      	str	r5, [r1, r3]
 8002126:	18cc      	adds	r4, r1, r3
 8002128:	4630      	mov	r0, r6
 800212a:	f000 f860 	bl	80021ee <__malloc_unlock>
 800212e:	f104 000b 	add.w	r0, r4, #11
 8002132:	1d23      	adds	r3, r4, #4
 8002134:	f020 0007 	bic.w	r0, r0, #7
 8002138:	1ac3      	subs	r3, r0, r3
 800213a:	d01b      	beq.n	8002174 <_malloc_r+0xb0>
 800213c:	425a      	negs	r2, r3
 800213e:	50e2      	str	r2, [r4, r3]
 8002140:	bd70      	pop	{r4, r5, r6, pc}
 8002142:	428c      	cmp	r4, r1
 8002144:	bf0d      	iteet	eq
 8002146:	6863      	ldreq	r3, [r4, #4]
 8002148:	684b      	ldrne	r3, [r1, #4]
 800214a:	6063      	strne	r3, [r4, #4]
 800214c:	6013      	streq	r3, [r2, #0]
 800214e:	bf18      	it	ne
 8002150:	460c      	movne	r4, r1
 8002152:	e7e9      	b.n	8002128 <_malloc_r+0x64>
 8002154:	460c      	mov	r4, r1
 8002156:	6849      	ldr	r1, [r1, #4]
 8002158:	e7ca      	b.n	80020f0 <_malloc_r+0x2c>
 800215a:	1cc4      	adds	r4, r0, #3
 800215c:	f024 0403 	bic.w	r4, r4, #3
 8002160:	42a0      	cmp	r0, r4
 8002162:	d005      	beq.n	8002170 <_malloc_r+0xac>
 8002164:	1a21      	subs	r1, r4, r0
 8002166:	4630      	mov	r0, r6
 8002168:	f000 f830 	bl	80021cc <_sbrk_r>
 800216c:	3001      	adds	r0, #1
 800216e:	d0cd      	beq.n	800210c <_malloc_r+0x48>
 8002170:	6025      	str	r5, [r4, #0]
 8002172:	e7d9      	b.n	8002128 <_malloc_r+0x64>
 8002174:	bd70      	pop	{r4, r5, r6, pc}
 8002176:	bf00      	nop
 8002178:	200000ac 	.word	0x200000ac
 800217c:	200000b0 	.word	0x200000b0

08002180 <_realloc_r>:
 8002180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002182:	4607      	mov	r7, r0
 8002184:	4614      	mov	r4, r2
 8002186:	460e      	mov	r6, r1
 8002188:	b921      	cbnz	r1, 8002194 <_realloc_r+0x14>
 800218a:	4611      	mov	r1, r2
 800218c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002190:	f7ff bf98 	b.w	80020c4 <_malloc_r>
 8002194:	b922      	cbnz	r2, 80021a0 <_realloc_r+0x20>
 8002196:	f7ff ff47 	bl	8002028 <_free_r>
 800219a:	4625      	mov	r5, r4
 800219c:	4628      	mov	r0, r5
 800219e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021a0:	f000 f826 	bl	80021f0 <_malloc_usable_size_r>
 80021a4:	4284      	cmp	r4, r0
 80021a6:	d90f      	bls.n	80021c8 <_realloc_r+0x48>
 80021a8:	4621      	mov	r1, r4
 80021aa:	4638      	mov	r0, r7
 80021ac:	f7ff ff8a 	bl	80020c4 <_malloc_r>
 80021b0:	4605      	mov	r5, r0
 80021b2:	2800      	cmp	r0, #0
 80021b4:	d0f2      	beq.n	800219c <_realloc_r+0x1c>
 80021b6:	4631      	mov	r1, r6
 80021b8:	4622      	mov	r2, r4
 80021ba:	f7ff ff0f 	bl	8001fdc <memcpy>
 80021be:	4631      	mov	r1, r6
 80021c0:	4638      	mov	r0, r7
 80021c2:	f7ff ff31 	bl	8002028 <_free_r>
 80021c6:	e7e9      	b.n	800219c <_realloc_r+0x1c>
 80021c8:	4635      	mov	r5, r6
 80021ca:	e7e7      	b.n	800219c <_realloc_r+0x1c>

080021cc <_sbrk_r>:
 80021cc:	b538      	push	{r3, r4, r5, lr}
 80021ce:	4c06      	ldr	r4, [pc, #24]	; (80021e8 <_sbrk_r+0x1c>)
 80021d0:	2300      	movs	r3, #0
 80021d2:	4605      	mov	r5, r0
 80021d4:	4608      	mov	r0, r1
 80021d6:	6023      	str	r3, [r4, #0]
 80021d8:	f7ff fb50 	bl	800187c <_sbrk>
 80021dc:	1c43      	adds	r3, r0, #1
 80021de:	d102      	bne.n	80021e6 <_sbrk_r+0x1a>
 80021e0:	6823      	ldr	r3, [r4, #0]
 80021e2:	b103      	cbz	r3, 80021e6 <_sbrk_r+0x1a>
 80021e4:	602b      	str	r3, [r5, #0]
 80021e6:	bd38      	pop	{r3, r4, r5, pc}
 80021e8:	200003f4 	.word	0x200003f4

080021ec <__malloc_lock>:
 80021ec:	4770      	bx	lr

080021ee <__malloc_unlock>:
 80021ee:	4770      	bx	lr

080021f0 <_malloc_usable_size_r>:
 80021f0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80021f4:	2800      	cmp	r0, #0
 80021f6:	f1a0 0004 	sub.w	r0, r0, #4
 80021fa:	bfbc      	itt	lt
 80021fc:	580b      	ldrlt	r3, [r1, r0]
 80021fe:	18c0      	addlt	r0, r0, r3
 8002200:	4770      	bx	lr
	...

08002204 <_init>:
 8002204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002206:	bf00      	nop
 8002208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800220a:	bc08      	pop	{r3}
 800220c:	469e      	mov	lr, r3
 800220e:	4770      	bx	lr

08002210 <_fini>:
 8002210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002212:	bf00      	nop
 8002214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002216:	bc08      	pop	{r3}
 8002218:	469e      	mov	lr, r3
 800221a:	4770      	bx	lr
