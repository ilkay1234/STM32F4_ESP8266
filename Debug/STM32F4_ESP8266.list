
STM32F4_ESP8266.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003740  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  080038d0  080038d0  000138d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003bec  08003bec  00013bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003bf4  08003bf4  00013bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003bf8  08003bf8  00013bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  20000000  08003bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
  8 .bss          00001e70  20000098  20000098  00020098  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20001f08  20001f08  00020098  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 11 .debug_info   00008012  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001684  00000000  00000000  000280da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000738  00000000  00000000  00029760  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000680  00000000  00000000  00029e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000032d2  00000000  00000000  0002a518  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000291b  00000000  00000000  0002d7ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00030105  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000204c  00000000  00000000  00030184  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080038b8 	.word	0x080038b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	080038b8 	.word	0x080038b8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4a08      	ldr	r2, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f94b 	bl	8000854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 f808 	bl	80005d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f002 fb7e 	bl	8002cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_InitTick+0x54>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x58>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f963 	bl	80008be <HAL_SYSTICK_Config>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e00e      	b.n	8000620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d80a      	bhi.n	800061e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	f04f 30ff 	mov.w	r0, #4294967295
 8000610:	f000 f92b 	bl	800086a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000614:	4a06      	ldr	r2, [pc, #24]	; (8000630 <HAL_InitTick+0x5c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061a:	2300      	movs	r3, #0
 800061c:	e000      	b.n	8000620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000030 	.word	0x20000030
 800062c:	20000004 	.word	0x20000004
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_IncTick+0x20>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x24>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4413      	add	r3, r2
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_IncTick+0x24>)
 8000646:	6013      	str	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000004 	.word	0x20000004
 8000658:	200008a0 	.word	0x200008a0

0800065c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return uwTick;
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <HAL_GetTick+0x14>)
 8000662:	681b      	ldr	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	200008a0 	.word	0x200008a0

08000674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800067c:	f7ff ffee 	bl	800065c <HAL_GetTick>
 8000680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800068c:	d005      	beq.n	800069a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <HAL_Delay+0x40>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4413      	add	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800069a:	bf00      	nop
 800069c:	f7ff ffde 	bl	800065c <HAL_GetTick>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	1ad2      	subs	r2, r2, r3
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d3f7      	bcc.n	800069c <HAL_Delay+0x28>
  {
  }
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000004 	.word	0x20000004

080006b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <__NVIC_SetPriorityGrouping+0x44>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006d4:	4013      	ands	r3, r2
 80006d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ea:	4a04      	ldr	r2, [pc, #16]	; (80006fc <__NVIC_SetPriorityGrouping+0x44>)
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	60d3      	str	r3, [r2, #12]
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <__NVIC_GetPriorityGrouping+0x18>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	0a1b      	lsrs	r3, r3, #8
 800070a:	f003 0307 	and.w	r3, r3, #7
}
 800070e:	4618      	mov	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	2b00      	cmp	r3, #0
 800072c:	db0b      	blt.n	8000746 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800072e:	4909      	ldr	r1, [pc, #36]	; (8000754 <__NVIC_EnableIRQ+0x38>)
 8000730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000734:	095b      	lsrs	r3, r3, #5
 8000736:	79fa      	ldrb	r2, [r7, #7]
 8000738:	f002 021f 	and.w	r2, r2, #31
 800073c:	2001      	movs	r0, #1
 800073e:	fa00 f202 	lsl.w	r2, r0, r2
 8000742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000e100 	.word	0xe000e100

08000758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	db0a      	blt.n	8000782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076c:	490d      	ldr	r1, [pc, #52]	; (80007a4 <__NVIC_SetPriority+0x4c>)
 800076e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000772:	683a      	ldr	r2, [r7, #0]
 8000774:	b2d2      	uxtb	r2, r2
 8000776:	0112      	lsls	r2, r2, #4
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	440b      	add	r3, r1
 800077c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000780:	e00a      	b.n	8000798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000782:	4909      	ldr	r1, [pc, #36]	; (80007a8 <__NVIC_SetPriority+0x50>)
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	f003 030f 	and.w	r3, r3, #15
 800078a:	3b04      	subs	r3, #4
 800078c:	683a      	ldr	r2, [r7, #0]
 800078e:	b2d2      	uxtb	r2, r2
 8000790:	0112      	lsls	r2, r2, #4
 8000792:	b2d2      	uxtb	r2, r2
 8000794:	440b      	add	r3, r1
 8000796:	761a      	strb	r2, [r3, #24]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	e000e100 	.word	0xe000e100
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b089      	sub	sp, #36	; 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	f1c3 0307 	rsb	r3, r3, #7
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	bf28      	it	cs
 80007ca:	2304      	movcs	r3, #4
 80007cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3304      	adds	r3, #4
 80007d2:	2b06      	cmp	r3, #6
 80007d4:	d902      	bls.n	80007dc <NVIC_EncodePriority+0x30>
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3b03      	subs	r3, #3
 80007da:	e000      	b.n	80007de <NVIC_EncodePriority+0x32>
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	2201      	movs	r2, #1
 80007e2:	69bb      	ldr	r3, [r7, #24]
 80007e4:	fa02 f303 	lsl.w	r3, r2, r3
 80007e8:	1e5a      	subs	r2, r3, #1
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	401a      	ands	r2, r3
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f2:	2101      	movs	r1, #1
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	fa01 f303 	lsl.w	r3, r1, r3
 80007fa:	1e59      	subs	r1, r3, #1
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000800:	4313      	orrs	r3, r2
         );
}
 8000802:	4618      	mov	r0, r3
 8000804:	3724      	adds	r7, #36	; 0x24
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
	...

08000810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3b01      	subs	r3, #1
 800081c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000820:	d301      	bcc.n	8000826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000822:	2301      	movs	r3, #1
 8000824:	e00f      	b.n	8000846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000826:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <SysTick_Config+0x40>)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3b01      	subs	r3, #1
 800082c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800082e:	210f      	movs	r1, #15
 8000830:	f04f 30ff 	mov.w	r0, #4294967295
 8000834:	f7ff ff90 	bl	8000758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <SysTick_Config+0x40>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083e:	4b04      	ldr	r3, [pc, #16]	; (8000850 <SysTick_Config+0x40>)
 8000840:	2207      	movs	r2, #7
 8000842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	e000e010 	.word	0xe000e010

08000854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ff2b 	bl	80006b8 <__NVIC_SetPriorityGrouping>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800086a:	b580      	push	{r7, lr}
 800086c:	b086      	sub	sp, #24
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
 8000876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800087c:	f7ff ff40 	bl	8000700 <__NVIC_GetPriorityGrouping>
 8000880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	68b9      	ldr	r1, [r7, #8]
 8000886:	6978      	ldr	r0, [r7, #20]
 8000888:	f7ff ff90 	bl	80007ac <NVIC_EncodePriority>
 800088c:	4602      	mov	r2, r0
 800088e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff5f 	bl	8000758 <__NVIC_SetPriority>
}
 800089a:	bf00      	nop
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	4603      	mov	r3, r0
 80008aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff33 	bl	800071c <__NVIC_EnableIRQ>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff ffa2 	bl	8000810 <SysTick_Config>
 80008cc:	4603      	mov	r3, r0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d004      	beq.n	80008f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2280      	movs	r2, #128	; 0x80
 80008ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80008f0:	2301      	movs	r3, #1
 80008f2:	e00c      	b.n	800090e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2205      	movs	r2, #5
 80008f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	6812      	ldr	r2, [r2, #0]
 8000904:	6812      	ldr	r2, [r2, #0]
 8000906:	f022 0201 	bic.w	r2, r2, #1
 800090a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800091c:	b480      	push	{r7}
 800091e:	b089      	sub	sp, #36	; 0x24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800092e:	2300      	movs	r3, #0
 8000930:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
 8000936:	e16b      	b.n	8000c10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000938:	2201      	movs	r2, #1
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	4013      	ands	r3, r2
 800094a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	429a      	cmp	r2, r3
 8000952:	f040 815a 	bne.w	8000c0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d00b      	beq.n	8000976 <HAL_GPIO_Init+0x5a>
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	2b02      	cmp	r3, #2
 8000964:	d007      	beq.n	8000976 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800096a:	2b11      	cmp	r3, #17
 800096c:	d003      	beq.n	8000976 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	2b12      	cmp	r3, #18
 8000974:	d130      	bne.n	80009d8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	2203      	movs	r2, #3
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43db      	mvns	r3, r3
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	4013      	ands	r3, r2
 800098c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	68da      	ldr	r2, [r3, #12]
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	69ba      	ldr	r2, [r7, #24]
 800099c:	4313      	orrs	r3, r2
 800099e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	69ba      	ldr	r2, [r7, #24]
 80009a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009ac:	2201      	movs	r2, #1
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	43db      	mvns	r3, r3
 80009b6:	69ba      	ldr	r2, [r7, #24]
 80009b8:	4013      	ands	r3, r2
 80009ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	091b      	lsrs	r3, r3, #4
 80009c2:	f003 0201 	and.w	r2, r3, #1
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	69ba      	ldr	r2, [r7, #24]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	2203      	movs	r2, #3
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	43db      	mvns	r3, r3
 80009ea:	69ba      	ldr	r2, [r7, #24]
 80009ec:	4013      	ands	r3, r2
 80009ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	689a      	ldr	r2, [r3, #8]
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	69ba      	ldr	r2, [r7, #24]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	69ba      	ldr	r2, [r7, #24]
 8000a06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d003      	beq.n	8000a18 <HAL_GPIO_Init+0xfc>
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	2b12      	cmp	r3, #18
 8000a16:	d123      	bne.n	8000a60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	08da      	lsrs	r2, r3, #3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3208      	adds	r2, #8
 8000a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	f003 0307 	and.w	r3, r3, #7
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	220f      	movs	r2, #15
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	43db      	mvns	r3, r3
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	691a      	ldr	r2, [r3, #16]
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	08da      	lsrs	r2, r3, #3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3208      	adds	r2, #8
 8000a5a:	69b9      	ldr	r1, [r7, #24]
 8000a5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	2203      	movs	r2, #3
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	43db      	mvns	r3, r3
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	4013      	ands	r3, r2
 8000a76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f003 0203 	and.w	r2, r3, #3
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	f000 80b4 	beq.w	8000c0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4a5f      	ldr	r2, [pc, #380]	; (8000c24 <HAL_GPIO_Init+0x308>)
 8000aa8:	4b5e      	ldr	r3, [pc, #376]	; (8000c24 <HAL_GPIO_Init+0x308>)
 8000aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab2:	4b5c      	ldr	r3, [pc, #368]	; (8000c24 <HAL_GPIO_Init+0x308>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000abe:	4a5a      	ldr	r2, [pc, #360]	; (8000c28 <HAL_GPIO_Init+0x30c>)
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	089b      	lsrs	r3, r3, #2
 8000ac4:	3302      	adds	r3, #2
 8000ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	f003 0303 	and.w	r3, r3, #3
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	220f      	movs	r2, #15
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43db      	mvns	r3, r3
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a51      	ldr	r2, [pc, #324]	; (8000c2c <HAL_GPIO_Init+0x310>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d02b      	beq.n	8000b42 <HAL_GPIO_Init+0x226>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a50      	ldr	r2, [pc, #320]	; (8000c30 <HAL_GPIO_Init+0x314>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d025      	beq.n	8000b3e <HAL_GPIO_Init+0x222>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a4f      	ldr	r2, [pc, #316]	; (8000c34 <HAL_GPIO_Init+0x318>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d01f      	beq.n	8000b3a <HAL_GPIO_Init+0x21e>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a4e      	ldr	r2, [pc, #312]	; (8000c38 <HAL_GPIO_Init+0x31c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d019      	beq.n	8000b36 <HAL_GPIO_Init+0x21a>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a4d      	ldr	r2, [pc, #308]	; (8000c3c <HAL_GPIO_Init+0x320>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d013      	beq.n	8000b32 <HAL_GPIO_Init+0x216>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a4c      	ldr	r2, [pc, #304]	; (8000c40 <HAL_GPIO_Init+0x324>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d00d      	beq.n	8000b2e <HAL_GPIO_Init+0x212>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a4b      	ldr	r2, [pc, #300]	; (8000c44 <HAL_GPIO_Init+0x328>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d007      	beq.n	8000b2a <HAL_GPIO_Init+0x20e>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a4a      	ldr	r2, [pc, #296]	; (8000c48 <HAL_GPIO_Init+0x32c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d101      	bne.n	8000b26 <HAL_GPIO_Init+0x20a>
 8000b22:	2307      	movs	r3, #7
 8000b24:	e00e      	b.n	8000b44 <HAL_GPIO_Init+0x228>
 8000b26:	2308      	movs	r3, #8
 8000b28:	e00c      	b.n	8000b44 <HAL_GPIO_Init+0x228>
 8000b2a:	2306      	movs	r3, #6
 8000b2c:	e00a      	b.n	8000b44 <HAL_GPIO_Init+0x228>
 8000b2e:	2305      	movs	r3, #5
 8000b30:	e008      	b.n	8000b44 <HAL_GPIO_Init+0x228>
 8000b32:	2304      	movs	r3, #4
 8000b34:	e006      	b.n	8000b44 <HAL_GPIO_Init+0x228>
 8000b36:	2303      	movs	r3, #3
 8000b38:	e004      	b.n	8000b44 <HAL_GPIO_Init+0x228>
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	e002      	b.n	8000b44 <HAL_GPIO_Init+0x228>
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e000      	b.n	8000b44 <HAL_GPIO_Init+0x228>
 8000b42:	2300      	movs	r3, #0
 8000b44:	69fa      	ldr	r2, [r7, #28]
 8000b46:	f002 0203 	and.w	r2, r2, #3
 8000b4a:	0092      	lsls	r2, r2, #2
 8000b4c:	4093      	lsls	r3, r2
 8000b4e:	69ba      	ldr	r2, [r7, #24]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b54:	4934      	ldr	r1, [pc, #208]	; (8000c28 <HAL_GPIO_Init+0x30c>)
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	089b      	lsrs	r3, r3, #2
 8000b5a:	3302      	adds	r3, #2
 8000b5c:	69ba      	ldr	r2, [r7, #24]
 8000b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b62:	4b3a      	ldr	r3, [pc, #232]	; (8000c4c <HAL_GPIO_Init+0x330>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d003      	beq.n	8000b86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b7e:	69ba      	ldr	r2, [r7, #24]
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b86:	4a31      	ldr	r2, [pc, #196]	; (8000c4c <HAL_GPIO_Init+0x330>)
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b8c:	4b2f      	ldr	r3, [pc, #188]	; (8000c4c <HAL_GPIO_Init+0x330>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	43db      	mvns	r3, r3
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d003      	beq.n	8000bb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ba8:	69ba      	ldr	r2, [r7, #24]
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000bb0:	4a26      	ldr	r2, [pc, #152]	; (8000c4c <HAL_GPIO_Init+0x330>)
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bb6:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <HAL_GPIO_Init+0x330>)
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d003      	beq.n	8000bda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bda:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <HAL_GPIO_Init+0x330>)
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000be0:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <HAL_GPIO_Init+0x330>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	43db      	mvns	r3, r3
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	4013      	ands	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d003      	beq.n	8000c04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c04:	4a11      	ldr	r2, [pc, #68]	; (8000c4c <HAL_GPIO_Init+0x330>)
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	61fb      	str	r3, [r7, #28]
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	2b0f      	cmp	r3, #15
 8000c14:	f67f ae90 	bls.w	8000938 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c18:	bf00      	nop
 8000c1a:	3724      	adds	r7, #36	; 0x24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40013800 	.word	0x40013800
 8000c2c:	40020000 	.word	0x40020000
 8000c30:	40020400 	.word	0x40020400
 8000c34:	40020800 	.word	0x40020800
 8000c38:	40020c00 	.word	0x40020c00
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40021400 	.word	0x40021400
 8000c44:	40021800 	.word	0x40021800
 8000c48:	40021c00 	.word	0x40021c00
 8000c4c:	40013c00 	.word	0x40013c00

08000c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	807b      	strh	r3, [r7, #2]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c60:	787b      	ldrb	r3, [r7, #1]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d003      	beq.n	8000c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c66:	887a      	ldrh	r2, [r7, #2]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c6c:	e003      	b.n	8000c76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c6e:	887b      	ldrh	r3, [r7, #2]
 8000c70:	041a      	lsls	r2, r3, #16
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	619a      	str	r2, [r3, #24]
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
	...

08000c84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d101      	bne.n	8000c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e25b      	b.n	800114e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d075      	beq.n	8000d8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ca2:	4ba3      	ldr	r3, [pc, #652]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
 8000caa:	2b04      	cmp	r3, #4
 8000cac:	d00c      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cae:	4ba0      	ldr	r3, [pc, #640]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000cb6:	2b08      	cmp	r3, #8
 8000cb8:	d112      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cba:	4b9d      	ldr	r3, [pc, #628]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000cc6:	d10b      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc8:	4b99      	ldr	r3, [pc, #612]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d05b      	beq.n	8000d8c <HAL_RCC_OscConfig+0x108>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d157      	bne.n	8000d8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e236      	b.n	800114e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce8:	d106      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x74>
 8000cea:	4a91      	ldr	r2, [pc, #580]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000cec:	4b90      	ldr	r3, [pc, #576]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	e01d      	b.n	8000d34 <HAL_RCC_OscConfig+0xb0>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d00:	d10c      	bne.n	8000d1c <HAL_RCC_OscConfig+0x98>
 8000d02:	4a8b      	ldr	r2, [pc, #556]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000d04:	4b8a      	ldr	r3, [pc, #552]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	4a88      	ldr	r2, [pc, #544]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000d10:	4b87      	ldr	r3, [pc, #540]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	e00b      	b.n	8000d34 <HAL_RCC_OscConfig+0xb0>
 8000d1c:	4a84      	ldr	r2, [pc, #528]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000d1e:	4b84      	ldr	r3, [pc, #528]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	4a81      	ldr	r2, [pc, #516]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000d2a:	4b81      	ldr	r3, [pc, #516]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d013      	beq.n	8000d64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d3c:	f7ff fc8e 	bl	800065c <HAL_GetTick>
 8000d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d42:	e008      	b.n	8000d56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d44:	f7ff fc8a 	bl	800065c <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	2b64      	cmp	r3, #100	; 0x64
 8000d50:	d901      	bls.n	8000d56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d52:	2303      	movs	r3, #3
 8000d54:	e1fb      	b.n	800114e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d56:	4b76      	ldr	r3, [pc, #472]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d0f0      	beq.n	8000d44 <HAL_RCC_OscConfig+0xc0>
 8000d62:	e014      	b.n	8000d8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d64:	f7ff fc7a 	bl	800065c <HAL_GetTick>
 8000d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d6a:	e008      	b.n	8000d7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d6c:	f7ff fc76 	bl	800065c <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b64      	cmp	r3, #100	; 0x64
 8000d78:	d901      	bls.n	8000d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e1e7      	b.n	800114e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d7e:	4b6c      	ldr	r3, [pc, #432]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1f0      	bne.n	8000d6c <HAL_RCC_OscConfig+0xe8>
 8000d8a:	e000      	b.n	8000d8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d063      	beq.n	8000e62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d9a:	4b65      	ldr	r3, [pc, #404]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	f003 030c 	and.w	r3, r3, #12
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d00b      	beq.n	8000dbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000da6:	4b62      	ldr	r3, [pc, #392]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000dae:	2b08      	cmp	r3, #8
 8000db0:	d11c      	bne.n	8000dec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000db2:	4b5f      	ldr	r3, [pc, #380]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d116      	bne.n	8000dec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dbe:	4b5c      	ldr	r3, [pc, #368]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d005      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x152>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d001      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e1bb      	b.n	800114e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dd6:	4956      	ldr	r1, [pc, #344]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000dd8:	4b55      	ldr	r3, [pc, #340]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	691b      	ldr	r3, [r3, #16]
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	4313      	orrs	r3, r2
 8000de8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dea:	e03a      	b.n	8000e62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d020      	beq.n	8000e36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000df4:	4b4f      	ldr	r3, [pc, #316]	; (8000f34 <HAL_RCC_OscConfig+0x2b0>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dfa:	f7ff fc2f 	bl	800065c <HAL_GetTick>
 8000dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e00:	e008      	b.n	8000e14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e02:	f7ff fc2b 	bl	800065c <HAL_GetTick>
 8000e06:	4602      	mov	r2, r0
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d901      	bls.n	8000e14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e10:	2303      	movs	r3, #3
 8000e12:	e19c      	b.n	800114e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e14:	4b46      	ldr	r3, [pc, #280]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d0f0      	beq.n	8000e02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e20:	4943      	ldr	r1, [pc, #268]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000e22:	4b43      	ldr	r3, [pc, #268]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	691b      	ldr	r3, [r3, #16]
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	4313      	orrs	r3, r2
 8000e32:	600b      	str	r3, [r1, #0]
 8000e34:	e015      	b.n	8000e62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e36:	4b3f      	ldr	r3, [pc, #252]	; (8000f34 <HAL_RCC_OscConfig+0x2b0>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e3c:	f7ff fc0e 	bl	800065c <HAL_GetTick>
 8000e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e42:	e008      	b.n	8000e56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e44:	f7ff fc0a 	bl	800065c <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d901      	bls.n	8000e56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e17b      	b.n	800114e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e56:	4b36      	ldr	r3, [pc, #216]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f0      	bne.n	8000e44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d030      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d016      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e76:	4b30      	ldr	r3, [pc, #192]	; (8000f38 <HAL_RCC_OscConfig+0x2b4>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e7c:	f7ff fbee 	bl	800065c <HAL_GetTick>
 8000e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e82:	e008      	b.n	8000e96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e84:	f7ff fbea 	bl	800065c <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e15b      	b.n	800114e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e96:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f0      	beq.n	8000e84 <HAL_RCC_OscConfig+0x200>
 8000ea2:	e015      	b.n	8000ed0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ea4:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <HAL_RCC_OscConfig+0x2b4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eaa:	f7ff fbd7 	bl	800065c <HAL_GetTick>
 8000eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb0:	e008      	b.n	8000ec4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eb2:	f7ff fbd3 	bl	800065c <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e144      	b.n	800114e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1f0      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 0304 	and.w	r3, r3, #4
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 80a0 	beq.w	800101e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ee2:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10f      	bne.n	8000f0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efc:	6413      	str	r3, [r2, #64]	; 0x40
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <HAL_RCC_OscConfig+0x2ac>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <HAL_RCC_OscConfig+0x2b8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d121      	bne.n	8000f5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f1a:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <HAL_RCC_OscConfig+0x2b8>)
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <HAL_RCC_OscConfig+0x2b8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f26:	f7ff fb99 	bl	800065c <HAL_GetTick>
 8000f2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f2c:	e011      	b.n	8000f52 <HAL_RCC_OscConfig+0x2ce>
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800
 8000f34:	42470000 	.word	0x42470000
 8000f38:	42470e80 	.word	0x42470e80
 8000f3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f40:	f7ff fb8c 	bl	800065c <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e0fd      	b.n	800114e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f52:	4b81      	ldr	r3, [pc, #516]	; (8001158 <HAL_RCC_OscConfig+0x4d4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0f0      	beq.n	8000f40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d106      	bne.n	8000f74 <HAL_RCC_OscConfig+0x2f0>
 8000f66:	4a7d      	ldr	r2, [pc, #500]	; (800115c <HAL_RCC_OscConfig+0x4d8>)
 8000f68:	4b7c      	ldr	r3, [pc, #496]	; (800115c <HAL_RCC_OscConfig+0x4d8>)
 8000f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6713      	str	r3, [r2, #112]	; 0x70
 8000f72:	e01c      	b.n	8000fae <HAL_RCC_OscConfig+0x32a>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	2b05      	cmp	r3, #5
 8000f7a:	d10c      	bne.n	8000f96 <HAL_RCC_OscConfig+0x312>
 8000f7c:	4a77      	ldr	r2, [pc, #476]	; (800115c <HAL_RCC_OscConfig+0x4d8>)
 8000f7e:	4b77      	ldr	r3, [pc, #476]	; (800115c <HAL_RCC_OscConfig+0x4d8>)
 8000f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f82:	f043 0304 	orr.w	r3, r3, #4
 8000f86:	6713      	str	r3, [r2, #112]	; 0x70
 8000f88:	4a74      	ldr	r2, [pc, #464]	; (800115c <HAL_RCC_OscConfig+0x4d8>)
 8000f8a:	4b74      	ldr	r3, [pc, #464]	; (800115c <HAL_RCC_OscConfig+0x4d8>)
 8000f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6713      	str	r3, [r2, #112]	; 0x70
 8000f94:	e00b      	b.n	8000fae <HAL_RCC_OscConfig+0x32a>
 8000f96:	4a71      	ldr	r2, [pc, #452]	; (800115c <HAL_RCC_OscConfig+0x4d8>)
 8000f98:	4b70      	ldr	r3, [pc, #448]	; (800115c <HAL_RCC_OscConfig+0x4d8>)
 8000f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f9c:	f023 0301 	bic.w	r3, r3, #1
 8000fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8000fa2:	4a6e      	ldr	r2, [pc, #440]	; (800115c <HAL_RCC_OscConfig+0x4d8>)
 8000fa4:	4b6d      	ldr	r3, [pc, #436]	; (800115c <HAL_RCC_OscConfig+0x4d8>)
 8000fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fa8:	f023 0304 	bic.w	r3, r3, #4
 8000fac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d015      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fb6:	f7ff fb51 	bl	800065c <HAL_GetTick>
 8000fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fbc:	e00a      	b.n	8000fd4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fbe:	f7ff fb4d 	bl	800065c <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e0bc      	b.n	800114e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fd4:	4b61      	ldr	r3, [pc, #388]	; (800115c <HAL_RCC_OscConfig+0x4d8>)
 8000fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d0ee      	beq.n	8000fbe <HAL_RCC_OscConfig+0x33a>
 8000fe0:	e014      	b.n	800100c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe2:	f7ff fb3b 	bl	800065c <HAL_GetTick>
 8000fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fe8:	e00a      	b.n	8001000 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fea:	f7ff fb37 	bl	800065c <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e0a6      	b.n	800114e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001000:	4b56      	ldr	r3, [pc, #344]	; (800115c <HAL_RCC_OscConfig+0x4d8>)
 8001002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1ee      	bne.n	8000fea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800100c:	7dfb      	ldrb	r3, [r7, #23]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d105      	bne.n	800101e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001012:	4a52      	ldr	r2, [pc, #328]	; (800115c <HAL_RCC_OscConfig+0x4d8>)
 8001014:	4b51      	ldr	r3, [pc, #324]	; (800115c <HAL_RCC_OscConfig+0x4d8>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800101c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	2b00      	cmp	r3, #0
 8001024:	f000 8092 	beq.w	800114c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001028:	4b4c      	ldr	r3, [pc, #304]	; (800115c <HAL_RCC_OscConfig+0x4d8>)
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 030c 	and.w	r3, r3, #12
 8001030:	2b08      	cmp	r3, #8
 8001032:	d05c      	beq.n	80010ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	2b02      	cmp	r3, #2
 800103a:	d141      	bne.n	80010c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800103c:	4b48      	ldr	r3, [pc, #288]	; (8001160 <HAL_RCC_OscConfig+0x4dc>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001042:	f7ff fb0b 	bl	800065c <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800104a:	f7ff fb07 	bl	800065c <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e078      	b.n	800114e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800105c:	4b3f      	ldr	r3, [pc, #252]	; (800115c <HAL_RCC_OscConfig+0x4d8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1f0      	bne.n	800104a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001068:	493c      	ldr	r1, [pc, #240]	; (800115c <HAL_RCC_OscConfig+0x4d8>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69da      	ldr	r2, [r3, #28]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a1b      	ldr	r3, [r3, #32]
 8001072:	431a      	orrs	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001078:	019b      	lsls	r3, r3, #6
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001080:	085b      	lsrs	r3, r3, #1
 8001082:	3b01      	subs	r3, #1
 8001084:	041b      	lsls	r3, r3, #16
 8001086:	431a      	orrs	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108c:	061b      	lsls	r3, r3, #24
 800108e:	4313      	orrs	r3, r2
 8001090:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001092:	4b33      	ldr	r3, [pc, #204]	; (8001160 <HAL_RCC_OscConfig+0x4dc>)
 8001094:	2201      	movs	r2, #1
 8001096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001098:	f7ff fae0 	bl	800065c <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010a0:	f7ff fadc 	bl	800065c <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e04d      	b.n	800114e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010b2:	4b2a      	ldr	r3, [pc, #168]	; (800115c <HAL_RCC_OscConfig+0x4d8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0f0      	beq.n	80010a0 <HAL_RCC_OscConfig+0x41c>
 80010be:	e045      	b.n	800114c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010c0:	4b27      	ldr	r3, [pc, #156]	; (8001160 <HAL_RCC_OscConfig+0x4dc>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c6:	f7ff fac9 	bl	800065c <HAL_GetTick>
 80010ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ce:	f7ff fac5 	bl	800065c <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e036      	b.n	800114e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010e0:	4b1e      	ldr	r3, [pc, #120]	; (800115c <HAL_RCC_OscConfig+0x4d8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1f0      	bne.n	80010ce <HAL_RCC_OscConfig+0x44a>
 80010ec:	e02e      	b.n	800114c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d101      	bne.n	80010fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e029      	b.n	800114e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <HAL_RCC_OscConfig+0x4d8>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	429a      	cmp	r2, r3
 800110c:	d11c      	bne.n	8001148 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001118:	429a      	cmp	r2, r3
 800111a:	d115      	bne.n	8001148 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001122:	4013      	ands	r3, r2
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001128:	4293      	cmp	r3, r2
 800112a:	d10d      	bne.n	8001148 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001136:	429a      	cmp	r2, r3
 8001138:	d106      	bne.n	8001148 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001144:	429a      	cmp	r2, r3
 8001146:	d001      	beq.n	800114c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e000      	b.n	800114e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40007000 	.word	0x40007000
 800115c:	40023800 	.word	0x40023800
 8001160:	42470060 	.word	0x42470060

08001164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e0cc      	b.n	8001312 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001178:	4b68      	ldr	r3, [pc, #416]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 020f 	and.w	r2, r3, #15
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d20c      	bcs.n	80011a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001186:	4b65      	ldr	r3, [pc, #404]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800118e:	4b63      	ldr	r3, [pc, #396]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 020f 	and.w	r2, r3, #15
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	429a      	cmp	r2, r3
 800119a:	d001      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e0b8      	b.n	8001312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d020      	beq.n	80011ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d005      	beq.n	80011c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011b8:	4a59      	ldr	r2, [pc, #356]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80011ba:	4b59      	ldr	r3, [pc, #356]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0308 	and.w	r3, r3, #8
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d005      	beq.n	80011dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011d0:	4a53      	ldr	r2, [pc, #332]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80011d2:	4b53      	ldr	r3, [pc, #332]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011dc:	4950      	ldr	r1, [pc, #320]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	4b50      	ldr	r3, [pc, #320]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d044      	beq.n	8001284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d107      	bne.n	8001212 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001202:	4b47      	ldr	r3, [pc, #284]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d119      	bne.n	8001242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e07f      	b.n	8001312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d003      	beq.n	8001222 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800121e:	2b03      	cmp	r3, #3
 8001220:	d107      	bne.n	8001232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001222:	4b3f      	ldr	r3, [pc, #252]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d109      	bne.n	8001242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e06f      	b.n	8001312 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001232:	4b3b      	ldr	r3, [pc, #236]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e067      	b.n	8001312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001242:	4937      	ldr	r1, [pc, #220]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 8001244:	4b36      	ldr	r3, [pc, #216]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f023 0203 	bic.w	r2, r3, #3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4313      	orrs	r3, r2
 8001252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001254:	f7ff fa02 	bl	800065c <HAL_GetTick>
 8001258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800125a:	e00a      	b.n	8001272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800125c:	f7ff f9fe 	bl	800065c <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	f241 3288 	movw	r2, #5000	; 0x1388
 800126a:	4293      	cmp	r3, r2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e04f      	b.n	8001312 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001272:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 020c 	and.w	r2, r3, #12
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	429a      	cmp	r2, r3
 8001282:	d1eb      	bne.n	800125c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001284:	4b25      	ldr	r3, [pc, #148]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 020f 	and.w	r2, r3, #15
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	d90c      	bls.n	80012ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001292:	4b22      	ldr	r3, [pc, #136]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800129a:	4b20      	ldr	r3, [pc, #128]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 020f 	and.w	r2, r3, #15
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d001      	beq.n	80012ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e032      	b.n	8001312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d008      	beq.n	80012ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012b8:	4919      	ldr	r1, [pc, #100]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80012ba:	4b19      	ldr	r3, [pc, #100]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d009      	beq.n	80012ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012d6:	4912      	ldr	r1, [pc, #72]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	4313      	orrs	r3, r2
 80012e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012ea:	f000 f821 	bl	8001330 <HAL_RCC_GetSysClockFreq>
 80012ee:	4601      	mov	r1, r0
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <HAL_RCC_ClockConfig+0x1c0>)
 80012fc:	5cd3      	ldrb	r3, [r2, r3]
 80012fe:	fa21 f303 	lsr.w	r3, r1, r3
 8001302:	4a09      	ldr	r2, [pc, #36]	; (8001328 <HAL_RCC_ClockConfig+0x1c4>)
 8001304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_RCC_ClockConfig+0x1c8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f962 	bl	80005d4 <HAL_InitTick>

  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023c00 	.word	0x40023c00
 8001320:	40023800 	.word	0x40023800
 8001324:	08003ba0 	.word	0x08003ba0
 8001328:	20000030 	.word	0x20000030
 800132c:	20000000 	.word	0x20000000

08001330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001334:	b08f      	sub	sp, #60	; 0x3c
 8001336:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001338:	2300      	movs	r3, #0
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800133c:	2300      	movs	r3, #0
 800133e:	637b      	str	r3, [r7, #52]	; 0x34
 8001340:	2300      	movs	r3, #0
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8001344:	2300      	movs	r3, #0
 8001346:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001348:	4b62      	ldr	r3, [pc, #392]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 030c 	and.w	r3, r3, #12
 8001350:	2b04      	cmp	r3, #4
 8001352:	d007      	beq.n	8001364 <HAL_RCC_GetSysClockFreq+0x34>
 8001354:	2b08      	cmp	r3, #8
 8001356:	d008      	beq.n	800136a <HAL_RCC_GetSysClockFreq+0x3a>
 8001358:	2b00      	cmp	r3, #0
 800135a:	f040 80b2 	bne.w	80014c2 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800135e:	4b5e      	ldr	r3, [pc, #376]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001360:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8001362:	e0b1      	b.n	80014c8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001364:	4b5d      	ldr	r3, [pc, #372]	; (80014dc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001366:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001368:	e0ae      	b.n	80014c8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800136a:	4b5a      	ldr	r3, [pc, #360]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001374:	4b57      	ldr	r3, [pc, #348]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d04e      	beq.n	800141e <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001380:	4b54      	ldr	r3, [pc, #336]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	099b      	lsrs	r3, r3, #6
 8001386:	f04f 0400 	mov.w	r4, #0
 800138a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	ea01 0103 	and.w	r1, r1, r3
 8001396:	ea02 0204 	and.w	r2, r2, r4
 800139a:	460b      	mov	r3, r1
 800139c:	4614      	mov	r4, r2
 800139e:	0160      	lsls	r0, r4, #5
 80013a0:	6278      	str	r0, [r7, #36]	; 0x24
 80013a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013a4:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80013a8:	6278      	str	r0, [r7, #36]	; 0x24
 80013aa:	015b      	lsls	r3, r3, #5
 80013ac:	623b      	str	r3, [r7, #32]
 80013ae:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80013b2:	1a5b      	subs	r3, r3, r1
 80013b4:	eb64 0402 	sbc.w	r4, r4, r2
 80013b8:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80013bc:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80013c0:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80013c4:	ebb8 0803 	subs.w	r8, r8, r3
 80013c8:	eb69 0904 	sbc.w	r9, r9, r4
 80013cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013d0:	61fb      	str	r3, [r7, #28]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013d8:	61fb      	str	r3, [r7, #28]
 80013da:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80013de:	61bb      	str	r3, [r7, #24]
 80013e0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80013e4:	eb18 0801 	adds.w	r8, r8, r1
 80013e8:	eb49 0902 	adc.w	r9, r9, r2
 80013ec:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001404:	4640      	mov	r0, r8
 8001406:	4649      	mov	r1, r9
 8001408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140a:	f04f 0400 	mov.w	r4, #0
 800140e:	461a      	mov	r2, r3
 8001410:	4623      	mov	r3, r4
 8001412:	f7fe ff35 	bl	8000280 <__aeabi_uldivmod>
 8001416:	4603      	mov	r3, r0
 8001418:	460c      	mov	r4, r1
 800141a:	637b      	str	r3, [r7, #52]	; 0x34
 800141c:	e043      	b.n	80014a6 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800141e:	4b2d      	ldr	r3, [pc, #180]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	099b      	lsrs	r3, r3, #6
 8001424:	f04f 0400 	mov.w	r4, #0
 8001428:	f240 11ff 	movw	r1, #511	; 0x1ff
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	ea01 0103 	and.w	r1, r1, r3
 8001434:	ea02 0204 	and.w	r2, r2, r4
 8001438:	460b      	mov	r3, r1
 800143a:	4614      	mov	r4, r2
 800143c:	0160      	lsls	r0, r4, #5
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	68f8      	ldr	r0, [r7, #12]
 8001442:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	015b      	lsls	r3, r3, #5
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001450:	1a5b      	subs	r3, r3, r1
 8001452:	eb64 0402 	sbc.w	r4, r4, r2
 8001456:	01a6      	lsls	r6, r4, #6
 8001458:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 800145c:	019d      	lsls	r5, r3, #6
 800145e:	1aed      	subs	r5, r5, r3
 8001460:	eb66 0604 	sbc.w	r6, r6, r4
 8001464:	00f3      	lsls	r3, r6, #3
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	00eb      	lsls	r3, r5, #3
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001478:	186d      	adds	r5, r5, r1
 800147a:	eb46 0602 	adc.w	r6, r6, r2
 800147e:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8001482:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8001486:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 800148a:	4655      	mov	r5, sl
 800148c:	465e      	mov	r6, fp
 800148e:	4628      	mov	r0, r5
 8001490:	4631      	mov	r1, r6
 8001492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001494:	f04f 0400 	mov.w	r4, #0
 8001498:	461a      	mov	r2, r3
 800149a:	4623      	mov	r3, r4
 800149c:	f7fe fef0 	bl	8000280 <__aeabi_uldivmod>
 80014a0:	4603      	mov	r3, r0
 80014a2:	460c      	mov	r4, r1
 80014a4:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	0c1b      	lsrs	r3, r3, #16
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	3301      	adds	r3, #1
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80014b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014c0:	e002      	b.n	80014c8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	373c      	adds	r7, #60	; 0x3c
 80014ce:	46bd      	mov	sp, r7
 80014d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014d4:	40023800 	.word	0x40023800
 80014d8:	00f42400 	.word	0x00f42400
 80014dc:	007a1200 	.word	0x007a1200

080014e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014e4:	4b03      	ldr	r3, [pc, #12]	; (80014f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000030 	.word	0x20000030

080014f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014fc:	f7ff fff0 	bl	80014e0 <HAL_RCC_GetHCLKFreq>
 8001500:	4601      	mov	r1, r0
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	0a9b      	lsrs	r3, r3, #10
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	4a03      	ldr	r2, [pc, #12]	; (800151c <HAL_RCC_GetPCLK1Freq+0x24>)
 800150e:	5cd3      	ldrb	r3, [r2, r3]
 8001510:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001514:	4618      	mov	r0, r3
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40023800 	.word	0x40023800
 800151c:	08003bb0 	.word	0x08003bb0

08001520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001524:	f7ff ffdc 	bl	80014e0 <HAL_RCC_GetHCLKFreq>
 8001528:	4601      	mov	r1, r0
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	0b5b      	lsrs	r3, r3, #13
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	4a03      	ldr	r2, [pc, #12]	; (8001544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001536:	5cd3      	ldrb	r3, [r2, r3]
 8001538:	fa21 f303 	lsr.w	r3, r1, r3
}
 800153c:	4618      	mov	r0, r3
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40023800 	.word	0x40023800
 8001544:	08003bb0 	.word	0x08003bb0

08001548 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e03f      	b.n	80015da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d106      	bne.n	8001574 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f001 fbd0 	bl	8002d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2224      	movs	r2, #36	; 0x24
 8001578:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	68d2      	ldr	r2, [r2, #12]
 8001586:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800158a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 fb49 	bl	8001c24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6812      	ldr	r2, [r2, #0]
 800159a:	6912      	ldr	r2, [r2, #16]
 800159c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80015a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	6952      	ldr	r2, [r2, #20]
 80015ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80015b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	68d2      	ldr	r2, [r2, #12]
 80015bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2220      	movs	r2, #32
 80015cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2220      	movs	r2, #32
 80015d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b088      	sub	sp, #32
 80015e6:	af02      	add	r7, sp, #8
 80015e8:	60f8      	str	r0, [r7, #12]
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	603b      	str	r3, [r7, #0]
 80015ee:	4613      	mov	r3, r2
 80015f0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b20      	cmp	r3, #32
 8001600:	f040 8082 	bne.w	8001708 <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <HAL_UART_Transmit+0x2e>
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e07a      	b.n	800170a <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800161a:	2b01      	cmp	r3, #1
 800161c:	d101      	bne.n	8001622 <HAL_UART_Transmit+0x40>
 800161e:	2302      	movs	r3, #2
 8001620:	e073      	b.n	800170a <HAL_UART_Transmit+0x128>
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2200      	movs	r2, #0
 800162e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2221      	movs	r2, #33	; 0x21
 8001634:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001638:	f7ff f810 	bl	800065c <HAL_GetTick>
 800163c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	88fa      	ldrh	r2, [r7, #6]
 8001642:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	88fa      	ldrh	r2, [r7, #6]
 8001648:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001652:	e041      	b.n	80016d8 <HAL_UART_Transmit+0xf6>
    {
      huart->TxXferCount--;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001658:	b29b      	uxth	r3, r3
 800165a:	3b01      	subs	r3, #1
 800165c:	b29a      	uxth	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800166a:	d121      	bne.n	80016b0 <HAL_UART_Transmit+0xce>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	2200      	movs	r2, #0
 8001674:	2180      	movs	r1, #128	; 0x80
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 f96a 	bl	8001950 <UART_WaitOnFlagUntilTimeout>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e041      	b.n	800170a <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	8812      	ldrh	r2, [r2, #0]
 8001692:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001696:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d103      	bne.n	80016a8 <HAL_UART_Transmit+0xc6>
        {
          pData += 2U;
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	3302      	adds	r3, #2
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	e017      	b.n	80016d8 <HAL_UART_Transmit+0xf6>
        }
        else
        {
          pData += 1U;
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	3301      	adds	r3, #1
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	e013      	b.n	80016d8 <HAL_UART_Transmit+0xf6>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	2200      	movs	r2, #0
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 f948 	bl	8001950 <UART_WaitOnFlagUntilTimeout>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_UART_Transmit+0xe8>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e01f      	b.n	800170a <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	1c59      	adds	r1, r3, #1
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016dc:	b29b      	uxth	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1b8      	bne.n	8001654 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	2200      	movs	r2, #0
 80016ea:	2140      	movs	r1, #64	; 0x40
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f000 f92f 	bl	8001950 <UART_WaitOnFlagUntilTimeout>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_UART_Transmit+0x11a>
    {
      return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e006      	b.n	800170a <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2220      	movs	r2, #32
 8001700:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	e000      	b.n	800170a <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8001708:	2302      	movs	r3, #2
  }
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001734:	2300      	movs	r3, #0
 8001736:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10d      	bne.n	8001766 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	f003 0320 	and.w	r3, r3, #32
 8001750:	2b00      	cmp	r3, #0
 8001752:	d008      	beq.n	8001766 <HAL_UART_IRQHandler+0x52>
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	f003 0320 	and.w	r3, r3, #32
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f9df 	bl	8001b22 <UART_Receive_IT>
      return;
 8001764:	e0d1      	b.n	800190a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 80b0 	beq.w	80018ce <HAL_UART_IRQHandler+0x1ba>
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	d105      	bne.n	8001784 <HAL_UART_IRQHandler+0x70>
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 80a5 	beq.w	80018ce <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00a      	beq.n	80017a4 <HAL_UART_IRQHandler+0x90>
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800179c:	f043 0201 	orr.w	r2, r3, #1
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00a      	beq.n	80017c4 <HAL_UART_IRQHandler+0xb0>
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017bc:	f043 0202 	orr.w	r2, r3, #2
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00a      	beq.n	80017e4 <HAL_UART_IRQHandler+0xd0>
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017dc:	f043 0204 	orr.w	r2, r3, #4
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00f      	beq.n	800180e <HAL_UART_IRQHandler+0xfa>
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	f003 0320 	and.w	r3, r3, #32
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d104      	bne.n	8001802 <HAL_UART_IRQHandler+0xee>
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d005      	beq.n	800180e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001806:	f043 0208 	orr.w	r2, r3, #8
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001812:	2b00      	cmp	r3, #0
 8001814:	d078      	beq.n	8001908 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f003 0320 	and.w	r3, r3, #32
 800181c:	2b00      	cmp	r3, #0
 800181e:	d007      	beq.n	8001830 <HAL_UART_IRQHandler+0x11c>
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	f003 0320 	and.w	r3, r3, #32
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f979 	bl	8001b22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800183a:	2b40      	cmp	r3, #64	; 0x40
 800183c:	bf0c      	ite	eq
 800183e:	2301      	moveq	r3, #1
 8001840:	2300      	movne	r3, #0
 8001842:	b2db      	uxtb	r3, r3
 8001844:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d102      	bne.n	8001858 <HAL_UART_IRQHandler+0x144>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d031      	beq.n	80018bc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f8c3 	bl	80019e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001868:	2b40      	cmp	r3, #64	; 0x40
 800186a:	d123      	bne.n	80018b4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	6952      	ldr	r2, [r2, #20]
 8001876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800187a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001880:	2b00      	cmp	r3, #0
 8001882:	d013      	beq.n	80018ac <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001888:	4a21      	ldr	r2, [pc, #132]	; (8001910 <HAL_UART_IRQHandler+0x1fc>)
 800188a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff f820 	bl	80008d6 <HAL_DMA_Abort_IT>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d016      	beq.n	80018ca <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018a6:	4610      	mov	r0, r2
 80018a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018aa:	e00e      	b.n	80018ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f845 	bl	800193c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018b2:	e00a      	b.n	80018ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f841 	bl	800193c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018ba:	e006      	b.n	80018ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f83d 	bl	800193c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80018c8:	e01e      	b.n	8001908 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018ca:	bf00      	nop
    return;
 80018cc:	e01c      	b.n	8001908 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d008      	beq.n	80018ea <HAL_UART_IRQHandler+0x1d6>
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f8b0 	bl	8001a48 <UART_Transmit_IT>
    return;
 80018e8:	e00f      	b.n	800190a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00a      	beq.n	800190a <HAL_UART_IRQHandler+0x1f6>
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d005      	beq.n	800190a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f8f7 	bl	8001af2 <UART_EndTransmit_IT>
    return;
 8001904:	bf00      	nop
 8001906:	e000      	b.n	800190a <HAL_UART_IRQHandler+0x1f6>
    return;
 8001908:	bf00      	nop
  }
}
 800190a:	3720      	adds	r7, #32
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	08001a21 	.word	0x08001a21

08001914 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	4613      	mov	r3, r2
 800195e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001960:	e02c      	b.n	80019bc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001968:	d028      	beq.n	80019bc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d007      	beq.n	8001980 <UART_WaitOnFlagUntilTimeout+0x30>
 8001970:	f7fe fe74 	bl	800065c <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	1ad2      	subs	r2, r2, r3
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	429a      	cmp	r2, r3
 800197e:	d91d      	bls.n	80019bc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	68d2      	ldr	r2, [r2, #12]
 800198a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800198e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	6952      	ldr	r2, [r2, #20]
 800199a:	f022 0201 	bic.w	r2, r2, #1
 800199e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2220      	movs	r2, #32
 80019a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2220      	movs	r2, #32
 80019ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e00f      	b.n	80019dc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	401a      	ands	r2, r3
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	bf0c      	ite	eq
 80019cc:	2301      	moveq	r3, #1
 80019ce:	2300      	movne	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	461a      	mov	r2, r3
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d0c3      	beq.n	8001962 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6812      	ldr	r2, [r2, #0]
 80019f4:	68d2      	ldr	r2, [r2, #12]
 80019f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80019fa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	6952      	ldr	r2, [r2, #20]
 8001a06:	f022 0201 	bic.w	r2, r2, #1
 8001a0a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2220      	movs	r2, #32
 8001a10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2200      	movs	r2, #0
 8001a38:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f7ff ff7e 	bl	800193c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001a40:	bf00      	nop
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b21      	cmp	r3, #33	; 0x21
 8001a5a:	d143      	bne.n	8001ae4 <UART_Transmit_IT+0x9c>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a64:	d119      	bne.n	8001a9a <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	8812      	ldrh	r2, [r2, #0]
 8001a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a78:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d105      	bne.n	8001a8e <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	1c9a      	adds	r2, r3, #2
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	621a      	str	r2, [r3, #32]
 8001a8c:	e00e      	b.n	8001aac <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	621a      	str	r2, [r3, #32]
 8001a98:	e008      	b.n	8001aac <UART_Transmit_IT+0x64>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	1c58      	adds	r0, r3, #1
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	6208      	str	r0, [r1, #32]
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10f      	bne.n	8001ae0 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	68d2      	ldr	r2, [r2, #12]
 8001aca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ace:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	68d2      	ldr	r2, [r2, #12]
 8001ada:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ade:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	e000      	b.n	8001ae6 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001ae4:	2302      	movs	r3, #2
  }
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	68d2      	ldr	r2, [r2, #12]
 8001b04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff fefe 	bl	8001914 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b084      	sub	sp, #16
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b22      	cmp	r3, #34	; 0x22
 8001b34:	d171      	bne.n	8001c1a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b3e:	d123      	bne.n	8001b88 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b44:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10e      	bne.n	8001b6c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	1c9a      	adds	r2, r3, #2
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	629a      	str	r2, [r3, #40]	; 0x28
 8001b6a:	e029      	b.n	8001bc0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	629a      	str	r2, [r3, #40]	; 0x28
 8001b86:	e01b      	b.n	8001bc0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10a      	bne.n	8001ba6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b94:	1c59      	adds	r1, r3, #1
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6291      	str	r1, [r2, #40]	; 0x28
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	6852      	ldr	r2, [r2, #4]
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	701a      	strb	r2, [r3, #0]
 8001ba4:	e00c      	b.n	8001bc0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	1c59      	adds	r1, r3, #1
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6291      	str	r1, [r2, #40]	; 0x28
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6812      	ldr	r2, [r2, #0]
 8001bb4:	6852      	ldr	r2, [r2, #4]
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d120      	bne.n	8001c16 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	68d2      	ldr	r2, [r2, #12]
 8001bde:	f022 0220 	bic.w	r2, r2, #32
 8001be2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	68d2      	ldr	r2, [r2, #12]
 8001bee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	6952      	ldr	r2, [r2, #20]
 8001bfe:	f022 0201 	bic.w	r2, r2, #1
 8001c02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2220      	movs	r2, #32
 8001c08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff fe8b 	bl	8001928 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	e002      	b.n	8001c1c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e000      	b.n	8001c1c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001c1a:	2302      	movs	r3, #2
  }
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c28:	b0a3      	sub	sp, #140	; 0x8c
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	67f8      	str	r0, [r7, #124]	; 0x7c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c30:	6819      	ldr	r1, [r3, #0]
 8001c32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001c3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	431a      	orrs	r2, r3
 8001c54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  MODIFY_REG(huart->Instance->CR1,
 8001c5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c60:	6819      	ldr	r1, [r3, #0]
 8001c62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 8001c6c:	f022 020c 	bic.w	r2, r2, #12
 8001c70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c74:	4313      	orrs	r3, r2
 8001c76:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c7a:	6819      	ldr	r1, [r3, #0]
 8001c7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	614b      	str	r3, [r1, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c96:	f040 8171 	bne.w	8001f7c <UART_SetConfig+0x358>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4ab4      	ldr	r2, [pc, #720]	; (8001f70 <UART_SetConfig+0x34c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d005      	beq.n	8001cb0 <UART_SetConfig+0x8c>
 8001ca4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4ab2      	ldr	r2, [pc, #712]	; (8001f74 <UART_SetConfig+0x350>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	f040 80b1 	bne.w	8001e12 <UART_SetConfig+0x1ee>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001cb0:	f7ff fc36 	bl	8001520 <HAL_RCC_GetPCLK2Freq>
 8001cb4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001cb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cba:	681d      	ldr	r5, [r3, #0]
 8001cbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4614      	mov	r4, r2
 8001cca:	18db      	adds	r3, r3, r3
 8001ccc:	eb44 0404 	adc.w	r4, r4, r4
 8001cd0:	185b      	adds	r3, r3, r1
 8001cd2:	eb44 0402 	adc.w	r4, r4, r2
 8001cd6:	00e0      	lsls	r0, r4, #3
 8001cd8:	6478      	str	r0, [r7, #68]	; 0x44
 8001cda:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001cdc:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001ce0:	6478      	str	r0, [r7, #68]	; 0x44
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	643b      	str	r3, [r7, #64]	; 0x40
 8001ce6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001cea:	eb13 0801 	adds.w	r8, r3, r1
 8001cee:	eb44 0902 	adc.w	r9, r4, r2
 8001cf2:	4640      	mov	r0, r8
 8001cf4:	4649      	mov	r1, r9
 8001cf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f04f 0400 	mov.w	r4, #0
 8001cfe:	18db      	adds	r3, r3, r3
 8001d00:	eb44 0404 	adc.w	r4, r4, r4
 8001d04:	461a      	mov	r2, r3
 8001d06:	4623      	mov	r3, r4
 8001d08:	f7fe faba 	bl	8000280 <__aeabi_uldivmod>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	460c      	mov	r4, r1
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b99      	ldr	r3, [pc, #612]	; (8001f78 <UART_SetConfig+0x354>)
 8001d14:	fba3 2302 	umull	r2, r3, r3, r2
 8001d18:	095b      	lsrs	r3, r3, #5
 8001d1a:	011e      	lsls	r6, r3, #4
 8001d1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d20:	4619      	mov	r1, r3
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4614      	mov	r4, r2
 8001d2a:	18db      	adds	r3, r3, r3
 8001d2c:	eb44 0404 	adc.w	r4, r4, r4
 8001d30:	185b      	adds	r3, r3, r1
 8001d32:	eb44 0402 	adc.w	r4, r4, r2
 8001d36:	00e0      	lsls	r0, r4, #3
 8001d38:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001d3a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001d3c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001d40:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d46:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001d4a:	eb13 0801 	adds.w	r8, r3, r1
 8001d4e:	eb44 0902 	adc.w	r9, r4, r2
 8001d52:	4640      	mov	r0, r8
 8001d54:	4649      	mov	r1, r9
 8001d56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f04f 0400 	mov.w	r4, #0
 8001d5e:	18db      	adds	r3, r3, r3
 8001d60:	eb44 0404 	adc.w	r4, r4, r4
 8001d64:	461a      	mov	r2, r3
 8001d66:	4623      	mov	r3, r4
 8001d68:	f7fe fa8a 	bl	8000280 <__aeabi_uldivmod>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	460c      	mov	r4, r1
 8001d70:	461a      	mov	r2, r3
 8001d72:	4b81      	ldr	r3, [pc, #516]	; (8001f78 <UART_SetConfig+0x354>)
 8001d74:	fba3 1302 	umull	r1, r3, r3, r2
 8001d78:	095b      	lsrs	r3, r3, #5
 8001d7a:	2164      	movs	r1, #100	; 0x64
 8001d7c:	fb01 f303 	mul.w	r3, r1, r3
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	3332      	adds	r3, #50	; 0x32
 8001d86:	4a7c      	ldr	r2, [pc, #496]	; (8001f78 <UART_SetConfig+0x354>)
 8001d88:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8c:	095b      	lsrs	r3, r3, #5
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d94:	441e      	add	r6, r3
 8001d96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4614      	mov	r4, r2
 8001da4:	18db      	adds	r3, r3, r3
 8001da6:	eb44 0404 	adc.w	r4, r4, r4
 8001daa:	185b      	adds	r3, r3, r1
 8001dac:	eb44 0402 	adc.w	r4, r4, r2
 8001db0:	00e0      	lsls	r0, r4, #3
 8001db2:	6378      	str	r0, [r7, #52]	; 0x34
 8001db4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001db6:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001dba:	6378      	str	r0, [r7, #52]	; 0x34
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
 8001dc0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001dc4:	eb13 0801 	adds.w	r8, r3, r1
 8001dc8:	eb44 0902 	adc.w	r9, r4, r2
 8001dcc:	4640      	mov	r0, r8
 8001dce:	4649      	mov	r1, r9
 8001dd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f04f 0400 	mov.w	r4, #0
 8001dd8:	18db      	adds	r3, r3, r3
 8001dda:	eb44 0404 	adc.w	r4, r4, r4
 8001dde:	461a      	mov	r2, r3
 8001de0:	4623      	mov	r3, r4
 8001de2:	f7fe fa4d 	bl	8000280 <__aeabi_uldivmod>
 8001de6:	4603      	mov	r3, r0
 8001de8:	460c      	mov	r4, r1
 8001dea:	461a      	mov	r2, r3
 8001dec:	4b62      	ldr	r3, [pc, #392]	; (8001f78 <UART_SetConfig+0x354>)
 8001dee:	fba3 1302 	umull	r1, r3, r3, r2
 8001df2:	095b      	lsrs	r3, r3, #5
 8001df4:	2164      	movs	r1, #100	; 0x64
 8001df6:	fb01 f303 	mul.w	r3, r1, r3
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	3332      	adds	r3, #50	; 0x32
 8001e00:	4a5d      	ldr	r2, [pc, #372]	; (8001f78 <UART_SetConfig+0x354>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	4433      	add	r3, r6
 8001e0e:	60ab      	str	r3, [r5, #8]
 8001e10:	e240      	b.n	8002294 <UART_SetConfig+0x670>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e12:	f7ff fb71 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 8001e16:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	673a      	str	r2, [r7, #112]	; 0x70
 8001e20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e24:	4619      	mov	r1, r3
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4614      	mov	r4, r2
 8001e2e:	18db      	adds	r3, r3, r3
 8001e30:	eb44 0404 	adc.w	r4, r4, r4
 8001e34:	185b      	adds	r3, r3, r1
 8001e36:	eb44 0402 	adc.w	r4, r4, r2
 8001e3a:	00e0      	lsls	r0, r4, #3
 8001e3c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001e3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e40:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001e44:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e4a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001e4e:	185d      	adds	r5, r3, r1
 8001e50:	eb44 0602 	adc.w	r6, r4, r2
 8001e54:	4628      	mov	r0, r5
 8001e56:	4631      	mov	r1, r6
 8001e58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f04f 0400 	mov.w	r4, #0
 8001e60:	18db      	adds	r3, r3, r3
 8001e62:	eb44 0404 	adc.w	r4, r4, r4
 8001e66:	461a      	mov	r2, r3
 8001e68:	4623      	mov	r3, r4
 8001e6a:	f7fe fa09 	bl	8000280 <__aeabi_uldivmod>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	460c      	mov	r4, r1
 8001e72:	461a      	mov	r2, r3
 8001e74:	4b40      	ldr	r3, [pc, #256]	; (8001f78 <UART_SetConfig+0x354>)
 8001e76:	fba3 2302 	umull	r2, r3, r3, r2
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	011e      	lsls	r6, r3, #4
 8001e7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e82:	4619      	mov	r1, r3
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4614      	mov	r4, r2
 8001e8c:	18db      	adds	r3, r3, r3
 8001e8e:	eb44 0404 	adc.w	r4, r4, r4
 8001e92:	185b      	adds	r3, r3, r1
 8001e94:	eb44 0402 	adc.w	r4, r4, r2
 8001e98:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8001e9c:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8001ea0:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8001ea4:	4653      	mov	r3, sl
 8001ea6:	465c      	mov	r4, fp
 8001ea8:	eb13 0a01 	adds.w	sl, r3, r1
 8001eac:	eb44 0b02 	adc.w	fp, r4, r2
 8001eb0:	4650      	mov	r0, sl
 8001eb2:	4659      	mov	r1, fp
 8001eb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f04f 0400 	mov.w	r4, #0
 8001ebc:	18db      	adds	r3, r3, r3
 8001ebe:	eb44 0404 	adc.w	r4, r4, r4
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4623      	mov	r3, r4
 8001ec6:	f7fe f9db 	bl	8000280 <__aeabi_uldivmod>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	460c      	mov	r4, r1
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <UART_SetConfig+0x354>)
 8001ed2:	fba3 1302 	umull	r1, r3, r3, r2
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	2164      	movs	r1, #100	; 0x64
 8001eda:	fb01 f303 	mul.w	r3, r1, r3
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	3332      	adds	r3, #50	; 0x32
 8001ee4:	4a24      	ldr	r2, [pc, #144]	; (8001f78 <UART_SetConfig+0x354>)
 8001ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eea:	095b      	lsrs	r3, r3, #5
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001ef2:	441e      	add	r6, r3
 8001ef4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4614      	mov	r4, r2
 8001f02:	18db      	adds	r3, r3, r3
 8001f04:	eb44 0404 	adc.w	r4, r4, r4
 8001f08:	185b      	adds	r3, r3, r1
 8001f0a:	eb44 0402 	adc.w	r4, r4, r2
 8001f0e:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8001f12:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8001f16:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8001f1a:	4643      	mov	r3, r8
 8001f1c:	464c      	mov	r4, r9
 8001f1e:	eb13 0801 	adds.w	r8, r3, r1
 8001f22:	eb44 0902 	adc.w	r9, r4, r2
 8001f26:	4640      	mov	r0, r8
 8001f28:	4649      	mov	r1, r9
 8001f2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f04f 0400 	mov.w	r4, #0
 8001f32:	18db      	adds	r3, r3, r3
 8001f34:	eb44 0404 	adc.w	r4, r4, r4
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4623      	mov	r3, r4
 8001f3c:	f7fe f9a0 	bl	8000280 <__aeabi_uldivmod>
 8001f40:	4603      	mov	r3, r0
 8001f42:	460c      	mov	r4, r1
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <UART_SetConfig+0x354>)
 8001f48:	fba3 1302 	umull	r1, r3, r3, r2
 8001f4c:	095b      	lsrs	r3, r3, #5
 8001f4e:	2164      	movs	r1, #100	; 0x64
 8001f50:	fb01 f303 	mul.w	r3, r1, r3
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	3332      	adds	r3, #50	; 0x32
 8001f5a:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <UART_SetConfig+0x354>)
 8001f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f60:	095b      	lsrs	r3, r3, #5
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	4433      	add	r3, r6
 8001f68:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f6a:	6093      	str	r3, [r2, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001f6c:	e192      	b.n	8002294 <UART_SetConfig+0x670>
 8001f6e:	bf00      	nop
 8001f70:	40011000 	.word	0x40011000
 8001f74:	40011400 	.word	0x40011400
 8001f78:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4bc1      	ldr	r3, [pc, #772]	; (8002288 <UART_SetConfig+0x664>)
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d005      	beq.n	8001f92 <UART_SetConfig+0x36e>
 8001f86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4bc0      	ldr	r3, [pc, #768]	; (800228c <UART_SetConfig+0x668>)
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	f040 80bf 	bne.w	8002110 <UART_SetConfig+0x4ec>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f92:	f7ff fac5 	bl	8001520 <HAL_RCC_GetPCLK2Freq>
 8001f96:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f9c:	681e      	ldr	r6, [r3, #0]
 8001f9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4614      	mov	r4, r2
 8001fac:	18db      	adds	r3, r3, r3
 8001fae:	eb44 0404 	adc.w	r4, r4, r4
 8001fb2:	185b      	adds	r3, r3, r1
 8001fb4:	eb44 0402 	adc.w	r4, r4, r2
 8001fb8:	00e0      	lsls	r0, r4, #3
 8001fba:	6278      	str	r0, [r7, #36]	; 0x24
 8001fbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fbe:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001fc2:	6278      	str	r0, [r7, #36]	; 0x24
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	623b      	str	r3, [r7, #32]
 8001fc8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001fcc:	eb13 0801 	adds.w	r8, r3, r1
 8001fd0:	eb44 0902 	adc.w	r9, r4, r2
 8001fd4:	4640      	mov	r0, r8
 8001fd6:	4649      	mov	r1, r9
 8001fd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f04f 0400 	mov.w	r4, #0
 8001fe0:	00a2      	lsls	r2, r4, #2
 8001fe2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001fe4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001fe6:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001fea:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	65bb      	str	r3, [r7, #88]	; 0x58
 8001ff0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ff4:	f7fe f944 	bl	8000280 <__aeabi_uldivmod>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	460c      	mov	r4, r1
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4ba4      	ldr	r3, [pc, #656]	; (8002290 <UART_SetConfig+0x66c>)
 8002000:	fba3 2302 	umull	r2, r3, r3, r2
 8002004:	095b      	lsrs	r3, r3, #5
 8002006:	011d      	lsls	r5, r3, #4
 8002008:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800200c:	4619      	mov	r1, r3
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	460b      	mov	r3, r1
 8002014:	4614      	mov	r4, r2
 8002016:	18db      	adds	r3, r3, r3
 8002018:	eb44 0404 	adc.w	r4, r4, r4
 800201c:	185b      	adds	r3, r3, r1
 800201e:	eb44 0402 	adc.w	r4, r4, r2
 8002022:	00e0      	lsls	r0, r4, #3
 8002024:	61f8      	str	r0, [r7, #28]
 8002026:	69f8      	ldr	r0, [r7, #28]
 8002028:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800202c:	61f8      	str	r0, [r7, #28]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	61bb      	str	r3, [r7, #24]
 8002032:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002036:	eb13 0801 	adds.w	r8, r3, r1
 800203a:	eb44 0902 	adc.w	r9, r4, r2
 800203e:	4640      	mov	r0, r8
 8002040:	4649      	mov	r1, r9
 8002042:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f04f 0400 	mov.w	r4, #0
 800204a:	00a2      	lsls	r2, r4, #2
 800204c:	657a      	str	r2, [r7, #84]	; 0x54
 800204e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002050:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002054:	657a      	str	r2, [r7, #84]	; 0x54
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	653b      	str	r3, [r7, #80]	; 0x50
 800205a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800205e:	f7fe f90f 	bl	8000280 <__aeabi_uldivmod>
 8002062:	4603      	mov	r3, r0
 8002064:	460c      	mov	r4, r1
 8002066:	461a      	mov	r2, r3
 8002068:	4b89      	ldr	r3, [pc, #548]	; (8002290 <UART_SetConfig+0x66c>)
 800206a:	fba3 1302 	umull	r1, r3, r3, r2
 800206e:	095b      	lsrs	r3, r3, #5
 8002070:	2164      	movs	r1, #100	; 0x64
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	3332      	adds	r3, #50	; 0x32
 800207c:	4a84      	ldr	r2, [pc, #528]	; (8002290 <UART_SetConfig+0x66c>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	095b      	lsrs	r3, r3, #5
 8002084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002088:	441d      	add	r5, r3
 800208a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800208e:	4619      	mov	r1, r3
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	460b      	mov	r3, r1
 8002096:	4614      	mov	r4, r2
 8002098:	18db      	adds	r3, r3, r3
 800209a:	eb44 0404 	adc.w	r4, r4, r4
 800209e:	185b      	adds	r3, r3, r1
 80020a0:	eb44 0402 	adc.w	r4, r4, r2
 80020a4:	00e0      	lsls	r0, r4, #3
 80020a6:	6178      	str	r0, [r7, #20]
 80020a8:	6978      	ldr	r0, [r7, #20]
 80020aa:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80020ae:	6178      	str	r0, [r7, #20]
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80020b8:	eb13 0801 	adds.w	r8, r3, r1
 80020bc:	eb44 0902 	adc.w	r9, r4, r2
 80020c0:	4640      	mov	r0, r8
 80020c2:	4649      	mov	r1, r9
 80020c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f04f 0400 	mov.w	r4, #0
 80020cc:	00a2      	lsls	r2, r4, #2
 80020ce:	64fa      	str	r2, [r7, #76]	; 0x4c
 80020d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020d2:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80020d6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	64bb      	str	r3, [r7, #72]	; 0x48
 80020dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80020e0:	f7fe f8ce 	bl	8000280 <__aeabi_uldivmod>
 80020e4:	4603      	mov	r3, r0
 80020e6:	460c      	mov	r4, r1
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b69      	ldr	r3, [pc, #420]	; (8002290 <UART_SetConfig+0x66c>)
 80020ec:	fba3 1302 	umull	r1, r3, r3, r2
 80020f0:	095b      	lsrs	r3, r3, #5
 80020f2:	2164      	movs	r1, #100	; 0x64
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	3332      	adds	r3, #50	; 0x32
 80020fe:	4a64      	ldr	r2, [pc, #400]	; (8002290 <UART_SetConfig+0x66c>)
 8002100:	fba2 2303 	umull	r2, r3, r2, r3
 8002104:	095b      	lsrs	r3, r3, #5
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	442b      	add	r3, r5
 800210c:	60b3      	str	r3, [r6, #8]
 800210e:	e0c1      	b.n	8002294 <UART_SetConfig+0x670>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002110:	f7ff f9f2 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 8002114:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002118:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	65bb      	str	r3, [r7, #88]	; 0x58
 800211e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002122:	4619      	mov	r1, r3
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	460b      	mov	r3, r1
 800212a:	4614      	mov	r4, r2
 800212c:	18db      	adds	r3, r3, r3
 800212e:	eb44 0404 	adc.w	r4, r4, r4
 8002132:	185b      	adds	r3, r3, r1
 8002134:	eb44 0402 	adc.w	r4, r4, r2
 8002138:	00e6      	lsls	r6, r4, #3
 800213a:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 800213e:	00dd      	lsls	r5, r3, #3
 8002140:	462b      	mov	r3, r5
 8002142:	4634      	mov	r4, r6
 8002144:	185d      	adds	r5, r3, r1
 8002146:	eb44 0602 	adc.w	r6, r4, r2
 800214a:	4628      	mov	r0, r5
 800214c:	4631      	mov	r1, r6
 800214e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f04f 0400 	mov.w	r4, #0
 8002156:	00a5      	lsls	r5, r4, #2
 8002158:	677d      	str	r5, [r7, #116]	; 0x74
 800215a:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 800215c:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 8002160:	677d      	str	r5, [r7, #116]	; 0x74
 8002162:	009c      	lsls	r4, r3, #2
 8002164:	673c      	str	r4, [r7, #112]	; 0x70
 8002166:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800216a:	f7fe f889 	bl	8000280 <__aeabi_uldivmod>
 800216e:	4603      	mov	r3, r0
 8002170:	460c      	mov	r4, r1
 8002172:	461a      	mov	r2, r3
 8002174:	4b46      	ldr	r3, [pc, #280]	; (8002290 <UART_SetConfig+0x66c>)
 8002176:	fba3 1302 	umull	r1, r3, r3, r2
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	011d      	lsls	r5, r3, #4
 800217e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002182:	4619      	mov	r1, r3
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	460b      	mov	r3, r1
 800218a:	4614      	mov	r4, r2
 800218c:	18db      	adds	r3, r3, r3
 800218e:	eb44 0404 	adc.w	r4, r4, r4
 8002192:	185b      	adds	r3, r3, r1
 8002194:	eb44 0402 	adc.w	r4, r4, r2
 8002198:	00e0      	lsls	r0, r4, #3
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	00d8      	lsls	r0, r3, #3
 80021a6:	60b8      	str	r0, [r7, #8]
 80021a8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80021ac:	eb13 0801 	adds.w	r8, r3, r1
 80021b0:	eb44 0902 	adc.w	r9, r4, r2
 80021b4:	4640      	mov	r0, r8
 80021b6:	4649      	mov	r1, r9
 80021b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f04f 0400 	mov.w	r4, #0
 80021c0:	00a6      	lsls	r6, r4, #2
 80021c2:	66fe      	str	r6, [r7, #108]	; 0x6c
 80021c4:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 80021c6:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 80021ca:	66fe      	str	r6, [r7, #108]	; 0x6c
 80021cc:	009c      	lsls	r4, r3, #2
 80021ce:	66bc      	str	r4, [r7, #104]	; 0x68
 80021d0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80021d4:	f7fe f854 	bl	8000280 <__aeabi_uldivmod>
 80021d8:	4603      	mov	r3, r0
 80021da:	460c      	mov	r4, r1
 80021dc:	461a      	mov	r2, r3
 80021de:	4b2c      	ldr	r3, [pc, #176]	; (8002290 <UART_SetConfig+0x66c>)
 80021e0:	fba3 1302 	umull	r1, r3, r3, r2
 80021e4:	095b      	lsrs	r3, r3, #5
 80021e6:	2164      	movs	r1, #100	; 0x64
 80021e8:	fb01 f303 	mul.w	r3, r1, r3
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	3332      	adds	r3, #50	; 0x32
 80021f2:	4a27      	ldr	r2, [pc, #156]	; (8002290 <UART_SetConfig+0x66c>)
 80021f4:	fba2 1303 	umull	r1, r3, r2, r3
 80021f8:	095b      	lsrs	r3, r3, #5
 80021fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021fe:	441d      	add	r5, r3
 8002200:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002204:	4619      	mov	r1, r3
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	460b      	mov	r3, r1
 800220c:	4614      	mov	r4, r2
 800220e:	18db      	adds	r3, r3, r3
 8002210:	eb44 0404 	adc.w	r4, r4, r4
 8002214:	185b      	adds	r3, r3, r1
 8002216:	eb44 0402 	adc.w	r4, r4, r2
 800221a:	00e0      	lsls	r0, r4, #3
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	00d8      	lsls	r0, r3, #3
 8002228:	6038      	str	r0, [r7, #0]
 800222a:	e897 0018 	ldmia.w	r7, {r3, r4}
 800222e:	eb13 0801 	adds.w	r8, r3, r1
 8002232:	eb44 0902 	adc.w	r9, r4, r2
 8002236:	4640      	mov	r0, r8
 8002238:	4649      	mov	r1, r9
 800223a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f04f 0400 	mov.w	r4, #0
 8002242:	00a6      	lsls	r6, r4, #2
 8002244:	667e      	str	r6, [r7, #100]	; 0x64
 8002246:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 8002248:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 800224c:	667e      	str	r6, [r7, #100]	; 0x64
 800224e:	009c      	lsls	r4, r3, #2
 8002250:	663c      	str	r4, [r7, #96]	; 0x60
 8002252:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002256:	f7fe f813 	bl	8000280 <__aeabi_uldivmod>
 800225a:	4603      	mov	r3, r0
 800225c:	460c      	mov	r4, r1
 800225e:	461a      	mov	r2, r3
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <UART_SetConfig+0x66c>)
 8002262:	fba3 1302 	umull	r1, r3, r3, r2
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	2164      	movs	r1, #100	; 0x64
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	3332      	adds	r3, #50	; 0x32
 8002274:	4a06      	ldr	r2, [pc, #24]	; (8002290 <UART_SetConfig+0x66c>)
 8002276:	fba2 1303 	umull	r1, r3, r2, r3
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	442b      	add	r3, r5
 8002282:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002284:	6093      	str	r3, [r2, #8]
}
 8002286:	e005      	b.n	8002294 <UART_SetConfig+0x670>
 8002288:	40011000 	.word	0x40011000
 800228c:	40011400 	.word	0x40011400
 8002290:	51eb851f 	.word	0x51eb851f
 8002294:	bf00      	nop
 8002296:	378c      	adds	r7, #140	; 0x8c
 8002298:	46bd      	mov	sp, r7
 800229a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800229e:	bf00      	nop

080022a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022a4:	f7fe f974 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022a8:	f000 f81a 	bl	80022e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022ac:	f000 f8d6 	bl	800245c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80022b0:	f000 f880 	bl	80023b4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80022b4:	f000 f8a8 	bl	8002408 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <main+0x34>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <main+0x34>)
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	68d2      	ldr	r2, [r2, #12]
 80022c2:	f042 0220 	orr.w	r2, r2, #32
 80022c6:	60da      	str	r2, [r3, #12]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ESP8266_Init(ID, PW);
 80022c8:	4903      	ldr	r1, [pc, #12]	; (80022d8 <main+0x38>)
 80022ca:	4804      	ldr	r0, [pc, #16]	; (80022dc <main+0x3c>)
 80022cc:	f000 f926 	bl	800251c <ESP8266_Init>
 80022d0:	e7fa      	b.n	80022c8 <main+0x28>
 80022d2:	bf00      	nop
 80022d4:	20001ec4 	.word	0x20001ec4
 80022d8:	20000020 	.word	0x20000020
 80022dc:	20000014 	.word	0x20000014

080022e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b094      	sub	sp, #80	; 0x50
 80022e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022e6:	f107 0320 	add.w	r3, r7, #32
 80022ea:	2230      	movs	r2, #48	; 0x30
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 fe84 	bl	8002ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022f4:	f107 030c 	add.w	r3, r7, #12
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	4a28      	ldr	r2, [pc, #160]	; (80023ac <SystemClock_Config+0xcc>)
 800230a:	4b28      	ldr	r3, [pc, #160]	; (80023ac <SystemClock_Config+0xcc>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002312:	6413      	str	r3, [r2, #64]	; 0x40
 8002314:	4b25      	ldr	r3, [pc, #148]	; (80023ac <SystemClock_Config+0xcc>)
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002320:	2300      	movs	r3, #0
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	4a22      	ldr	r2, [pc, #136]	; (80023b0 <SystemClock_Config+0xd0>)
 8002326:	4b22      	ldr	r3, [pc, #136]	; (80023b0 <SystemClock_Config+0xd0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <SystemClock_Config+0xd0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002338:	607b      	str	r3, [r7, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800233c:	2302      	movs	r3, #2
 800233e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002340:	2301      	movs	r3, #1
 8002342:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002344:	2310      	movs	r3, #16
 8002346:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002348:	2302      	movs	r3, #2
 800234a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800234c:	2300      	movs	r3, #0
 800234e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002350:	2308      	movs	r3, #8
 8002352:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002354:	23a8      	movs	r3, #168	; 0xa8
 8002356:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002358:	2302      	movs	r3, #2
 800235a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800235c:	2304      	movs	r3, #4
 800235e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002360:	f107 0320 	add.w	r3, r7, #32
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe fc8d 	bl	8000c84 <HAL_RCC_OscConfig>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002370:	f000 fca0 	bl	8002cb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002374:	230f      	movs	r3, #15
 8002376:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002378:	2302      	movs	r3, #2
 800237a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002380:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002384:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800238a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800238c:	f107 030c 	add.w	r3, r7, #12
 8002390:	2105      	movs	r1, #5
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe fee6 	bl	8001164 <HAL_RCC_ClockConfig>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800239e:	f000 fc89 	bl	8002cb4 <Error_Handler>
  }
}
 80023a2:	bf00      	nop
 80023a4:	3750      	adds	r7, #80	; 0x50
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40007000 	.word	0x40007000

080023b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <MX_USART2_UART_Init+0x4c>)
 80023ba:	4a12      	ldr	r2, [pc, #72]	; (8002404 <MX_USART2_UART_Init+0x50>)
 80023bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023be:	4b10      	ldr	r3, [pc, #64]	; (8002400 <MX_USART2_UART_Init+0x4c>)
 80023c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <MX_USART2_UART_Init+0x4c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <MX_USART2_UART_Init+0x4c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023d2:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <MX_USART2_UART_Init+0x4c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023d8:	4b09      	ldr	r3, [pc, #36]	; (8002400 <MX_USART2_UART_Init+0x4c>)
 80023da:	220c      	movs	r2, #12
 80023dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023de:	4b08      	ldr	r3, [pc, #32]	; (8002400 <MX_USART2_UART_Init+0x4c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <MX_USART2_UART_Init+0x4c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023ea:	4805      	ldr	r0, [pc, #20]	; (8002400 <MX_USART2_UART_Init+0x4c>)
 80023ec:	f7ff f8ac 	bl	8001548 <HAL_UART_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023f6:	f000 fc5d 	bl	8002cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20001ec4 	.word	0x20001ec4
 8002404:	40004400 	.word	0x40004400

08002408 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800240c:	4b11      	ldr	r3, [pc, #68]	; (8002454 <MX_USART3_UART_Init+0x4c>)
 800240e:	4a12      	ldr	r2, [pc, #72]	; (8002458 <MX_USART3_UART_Init+0x50>)
 8002410:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <MX_USART3_UART_Init+0x4c>)
 8002414:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002418:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800241a:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <MX_USART3_UART_Init+0x4c>)
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002420:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <MX_USART3_UART_Init+0x4c>)
 8002422:	2200      	movs	r2, #0
 8002424:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002426:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <MX_USART3_UART_Init+0x4c>)
 8002428:	2200      	movs	r2, #0
 800242a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800242c:	4b09      	ldr	r3, [pc, #36]	; (8002454 <MX_USART3_UART_Init+0x4c>)
 800242e:	220c      	movs	r2, #12
 8002430:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002432:	4b08      	ldr	r3, [pc, #32]	; (8002454 <MX_USART3_UART_Init+0x4c>)
 8002434:	2200      	movs	r2, #0
 8002436:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <MX_USART3_UART_Init+0x4c>)
 800243a:	2200      	movs	r2, #0
 800243c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800243e:	4805      	ldr	r0, [pc, #20]	; (8002454 <MX_USART3_UART_Init+0x4c>)
 8002440:	f7ff f882 	bl	8001548 <HAL_UART_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800244a:	f000 fc33 	bl	8002cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20001c2c 	.word	0x20001c2c
 8002458:	40004800 	.word	0x40004800

0800245c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08a      	sub	sp, #40	; 0x28
 8002460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002462:	f107 0314 	add.w	r3, r7, #20
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	605a      	str	r2, [r3, #4]
 800246c:	609a      	str	r2, [r3, #8]
 800246e:	60da      	str	r2, [r3, #12]
 8002470:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	4a27      	ldr	r2, [pc, #156]	; (8002514 <MX_GPIO_Init+0xb8>)
 8002478:	4b26      	ldr	r3, [pc, #152]	; (8002514 <MX_GPIO_Init+0xb8>)
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002480:	6313      	str	r3, [r2, #48]	; 0x30
 8002482:	4b24      	ldr	r3, [pc, #144]	; (8002514 <MX_GPIO_Init+0xb8>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	4a20      	ldr	r2, [pc, #128]	; (8002514 <MX_GPIO_Init+0xb8>)
 8002494:	4b1f      	ldr	r3, [pc, #124]	; (8002514 <MX_GPIO_Init+0xb8>)
 8002496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
 800249e:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <MX_GPIO_Init+0xb8>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	4a19      	ldr	r2, [pc, #100]	; (8002514 <MX_GPIO_Init+0xb8>)
 80024b0:	4b18      	ldr	r3, [pc, #96]	; (8002514 <MX_GPIO_Init+0xb8>)
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	f043 0302 	orr.w	r3, r3, #2
 80024b8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ba:	4b16      	ldr	r3, [pc, #88]	; (8002514 <MX_GPIO_Init+0xb8>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	4a12      	ldr	r2, [pc, #72]	; (8002514 <MX_GPIO_Init+0xb8>)
 80024cc:	4b11      	ldr	r3, [pc, #68]	; (8002514 <MX_GPIO_Init+0xb8>)
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	f043 0308 	orr.w	r3, r3, #8
 80024d4:	6313      	str	r3, [r2, #48]	; 0x30
 80024d6:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <MX_GPIO_Init+0xb8>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80024e2:	2200      	movs	r2, #0
 80024e4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80024e8:	480b      	ldr	r0, [pc, #44]	; (8002518 <MX_GPIO_Init+0xbc>)
 80024ea:	f7fe fbb1 	bl	8000c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80024ee:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80024f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f4:	2301      	movs	r3, #1
 80024f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	2300      	movs	r3, #0
 80024fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	4619      	mov	r1, r3
 8002506:	4804      	ldr	r0, [pc, #16]	; (8002518 <MX_GPIO_Init+0xbc>)
 8002508:	f7fe fa08 	bl	800091c <HAL_GPIO_Init>

}
 800250c:	bf00      	nop
 800250e:	3728      	adds	r7, #40	; 0x28
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40023800 	.word	0x40023800
 8002518:	40020c00 	.word	0x40020c00

0800251c <ESP8266_Init>:

/* USER CODE BEGIN 4 */
void ESP8266_Init(char *SSID, char *PW){
 800251c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]

	static uint8_t Case = 0;
	switch(Case){
 8002526:	4bb5      	ldr	r3, [pc, #724]	; (80027fc <ESP8266_Init+0x2e0>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b0d      	cmp	r3, #13
 800252c:	f200 8380 	bhi.w	8002c30 <ESP8266_Init+0x714>
 8002530:	a201      	add	r2, pc, #4	; (adr r2, 8002538 <ESP8266_Init+0x1c>)
 8002532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002536:	bf00      	nop
 8002538:	08002571 	.word	0x08002571
 800253c:	0800259d 	.word	0x0800259d
 8002540:	08002619 	.word	0x08002619
 8002544:	0800264b 	.word	0x0800264b
 8002548:	080026e5 	.word	0x080026e5
 800254c:	08002711 	.word	0x08002711
 8002550:	08002849 	.word	0x08002849
 8002554:	0800287b 	.word	0x0800287b
 8002558:	08002941 	.word	0x08002941
 800255c:	08002973 	.word	0x08002973
 8002560:	08002a05 	.word	0x08002a05
 8002564:	08002a3b 	.word	0x08002a3b
 8002568:	08002af9 	.word	0x08002af9
 800256c:	08002b97 	.word	0x08002b97
	case 0:
		HAL_UART_Transmit(&huart2,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"AT\r\n"), 1000);
 8002570:	4ba3      	ldr	r3, [pc, #652]	; (8002800 <ESP8266_Init+0x2e4>)
 8002572:	4aa4      	ldr	r2, [pc, #656]	; (8002804 <ESP8266_Init+0x2e8>)
 8002574:	6810      	ldr	r0, [r2, #0]
 8002576:	6018      	str	r0, [r3, #0]
 8002578:	7912      	ldrb	r2, [r2, #4]
 800257a:	711a      	strb	r2, [r3, #4]
 800257c:	2304      	movs	r3, #4
 800257e:	b29a      	uxth	r2, r3
 8002580:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002584:	499e      	ldr	r1, [pc, #632]	; (8002800 <ESP8266_Init+0x2e4>)
 8002586:	48a0      	ldr	r0, [pc, #640]	; (8002808 <ESP8266_Init+0x2ec>)
 8002588:	f7ff f82b 	bl	80015e2 <HAL_UART_Transmit>
		Case = 1;
 800258c:	4b9b      	ldr	r3, [pc, #620]	; (80027fc <ESP8266_Init+0x2e0>)
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 8002592:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002596:	f7fe f86d 	bl	8000674 <HAL_Delay>
		break;
 800259a:	e349      	b.n	8002c30 <ESP8266_Init+0x714>
	case 1:
		if(strstr(Esp_Veri_Buffer,"OK")){
 800259c:	499b      	ldr	r1, [pc, #620]	; (800280c <ESP8266_Init+0x2f0>)
 800259e:	489c      	ldr	r0, [pc, #624]	; (8002810 <ESP8266_Init+0x2f4>)
 80025a0:	f000 fd75 	bl	800308e <strstr>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d01b      	beq.n	80025e2 <ESP8266_Init+0xc6>
			Clear_ESP_Buffer();
 80025aa:	f000 fb63 	bl	8002c74 <Clear_ESP_Buffer>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Module Erisildi!\r\n"), 1000);
 80025ae:	4a94      	ldr	r2, [pc, #592]	; (8002800 <ESP8266_Init+0x2e4>)
 80025b0:	4b98      	ldr	r3, [pc, #608]	; (8002814 <ESP8266_Init+0x2f8>)
 80025b2:	4615      	mov	r5, r2
 80025b4:	461c      	mov	r4, r3
 80025b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025b8:	6028      	str	r0, [r5, #0]
 80025ba:	6069      	str	r1, [r5, #4]
 80025bc:	60aa      	str	r2, [r5, #8]
 80025be:	60eb      	str	r3, [r5, #12]
 80025c0:	8823      	ldrh	r3, [r4, #0]
 80025c2:	78a2      	ldrb	r2, [r4, #2]
 80025c4:	822b      	strh	r3, [r5, #16]
 80025c6:	4613      	mov	r3, r2
 80025c8:	74ab      	strb	r3, [r5, #18]
 80025ca:	2312      	movs	r3, #18
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025d2:	498b      	ldr	r1, [pc, #556]	; (8002800 <ESP8266_Init+0x2e4>)
 80025d4:	4890      	ldr	r0, [pc, #576]	; (8002818 <ESP8266_Init+0x2fc>)
 80025d6:	f7ff f804 	bl	80015e2 <HAL_UART_Transmit>
			Case = 2;
 80025da:	4b88      	ldr	r3, [pc, #544]	; (80027fc <ESP8266_Init+0x2e0>)
 80025dc:	2202      	movs	r2, #2
 80025de:	701a      	strb	r2, [r3, #0]
		else{
			Clear_ESP_Buffer();
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Module Erisilemedi!\r\n"), 1000);
			Case = 0;
		}
		break;
 80025e0:	e326      	b.n	8002c30 <ESP8266_Init+0x714>
			Clear_ESP_Buffer();
 80025e2:	f000 fb47 	bl	8002c74 <Clear_ESP_Buffer>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Module Erisilemedi!\r\n"), 1000);
 80025e6:	4a86      	ldr	r2, [pc, #536]	; (8002800 <ESP8266_Init+0x2e4>)
 80025e8:	4b8c      	ldr	r3, [pc, #560]	; (800281c <ESP8266_Init+0x300>)
 80025ea:	4615      	mov	r5, r2
 80025ec:	461c      	mov	r4, r3
 80025ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025f0:	6028      	str	r0, [r5, #0]
 80025f2:	6069      	str	r1, [r5, #4]
 80025f4:	60aa      	str	r2, [r5, #8]
 80025f6:	60eb      	str	r3, [r5, #12]
 80025f8:	6820      	ldr	r0, [r4, #0]
 80025fa:	6128      	str	r0, [r5, #16]
 80025fc:	88a3      	ldrh	r3, [r4, #4]
 80025fe:	82ab      	strh	r3, [r5, #20]
 8002600:	2315      	movs	r3, #21
 8002602:	b29a      	uxth	r2, r3
 8002604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002608:	497d      	ldr	r1, [pc, #500]	; (8002800 <ESP8266_Init+0x2e4>)
 800260a:	4883      	ldr	r0, [pc, #524]	; (8002818 <ESP8266_Init+0x2fc>)
 800260c:	f7fe ffe9 	bl	80015e2 <HAL_UART_Transmit>
			Case = 0;
 8002610:	4b7a      	ldr	r3, [pc, #488]	; (80027fc <ESP8266_Init+0x2e0>)
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]
		break;
 8002616:	e30b      	b.n	8002c30 <ESP8266_Init+0x714>
	case 2:
		HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CWMODE?\r\n"), 1000);
 8002618:	4a79      	ldr	r2, [pc, #484]	; (8002800 <ESP8266_Init+0x2e4>)
 800261a:	4b81      	ldr	r3, [pc, #516]	; (8002820 <ESP8266_Init+0x304>)
 800261c:	4614      	mov	r4, r2
 800261e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002620:	6020      	str	r0, [r4, #0]
 8002622:	6061      	str	r1, [r4, #4]
 8002624:	60a2      	str	r2, [r4, #8]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	7323      	strb	r3, [r4, #12]
 800262a:	230c      	movs	r3, #12
 800262c:	b29a      	uxth	r2, r3
 800262e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002632:	4973      	ldr	r1, [pc, #460]	; (8002800 <ESP8266_Init+0x2e4>)
 8002634:	4874      	ldr	r0, [pc, #464]	; (8002808 <ESP8266_Init+0x2ec>)
 8002636:	f7fe ffd4 	bl	80015e2 <HAL_UART_Transmit>
		Case = 3;
 800263a:	4b70      	ldr	r3, [pc, #448]	; (80027fc <ESP8266_Init+0x2e0>)
 800263c:	2203      	movs	r2, #3
 800263e:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 8002640:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002644:	f7fe f816 	bl	8000674 <HAL_Delay>
		break;
 8002648:	e2f2      	b.n	8002c30 <ESP8266_Init+0x714>
	case 3:
		if(strstr(Esp_Veri_Buffer,"+CWMODE:1")){
 800264a:	4976      	ldr	r1, [pc, #472]	; (8002824 <ESP8266_Init+0x308>)
 800264c:	4870      	ldr	r0, [pc, #448]	; (8002810 <ESP8266_Init+0x2f4>)
 800264e:	f000 fd1e 	bl	800308e <strstr>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d01b      	beq.n	8002690 <ESP8266_Init+0x174>
			Clear_ESP_Buffer();
 8002658:	f000 fb0c 	bl	8002c74 <Clear_ESP_Buffer>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Mod ayari dogru!\r\n"), 1000);
 800265c:	4a68      	ldr	r2, [pc, #416]	; (8002800 <ESP8266_Init+0x2e4>)
 800265e:	4b72      	ldr	r3, [pc, #456]	; (8002828 <ESP8266_Init+0x30c>)
 8002660:	4615      	mov	r5, r2
 8002662:	461c      	mov	r4, r3
 8002664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002666:	6028      	str	r0, [r5, #0]
 8002668:	6069      	str	r1, [r5, #4]
 800266a:	60aa      	str	r2, [r5, #8]
 800266c:	60eb      	str	r3, [r5, #12]
 800266e:	8823      	ldrh	r3, [r4, #0]
 8002670:	78a2      	ldrb	r2, [r4, #2]
 8002672:	822b      	strh	r3, [r5, #16]
 8002674:	4613      	mov	r3, r2
 8002676:	74ab      	strb	r3, [r5, #18]
 8002678:	2312      	movs	r3, #18
 800267a:	b29a      	uxth	r2, r3
 800267c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002680:	495f      	ldr	r1, [pc, #380]	; (8002800 <ESP8266_Init+0x2e4>)
 8002682:	4865      	ldr	r0, [pc, #404]	; (8002818 <ESP8266_Init+0x2fc>)
 8002684:	f7fe ffad 	bl	80015e2 <HAL_UART_Transmit>
			Case = 4;
 8002688:	4b5c      	ldr	r3, [pc, #368]	; (80027fc <ESP8266_Init+0x2e0>)
 800268a:	2204      	movs	r2, #4
 800268c:	701a      	strb	r2, [r3, #0]
			Clear_ESP_Buffer();
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Mod ayari yanlis!\r\n"), 1000);
			HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CWMODE=1\r\n"), 1000);
			Case = 0;
		}
		break;
 800268e:	e2cf      	b.n	8002c30 <ESP8266_Init+0x714>
			Clear_ESP_Buffer();
 8002690:	f000 faf0 	bl	8002c74 <Clear_ESP_Buffer>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Mod ayari yanlis!\r\n"), 1000);
 8002694:	4a5a      	ldr	r2, [pc, #360]	; (8002800 <ESP8266_Init+0x2e4>)
 8002696:	4b65      	ldr	r3, [pc, #404]	; (800282c <ESP8266_Init+0x310>)
 8002698:	4615      	mov	r5, r2
 800269a:	461c      	mov	r4, r3
 800269c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800269e:	6028      	str	r0, [r5, #0]
 80026a0:	6069      	str	r1, [r5, #4]
 80026a2:	60aa      	str	r2, [r5, #8]
 80026a4:	60eb      	str	r3, [r5, #12]
 80026a6:	6820      	ldr	r0, [r4, #0]
 80026a8:	6128      	str	r0, [r5, #16]
 80026aa:	2313      	movs	r3, #19
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026b2:	4953      	ldr	r1, [pc, #332]	; (8002800 <ESP8266_Init+0x2e4>)
 80026b4:	4858      	ldr	r0, [pc, #352]	; (8002818 <ESP8266_Init+0x2fc>)
 80026b6:	f7fe ff94 	bl	80015e2 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CWMODE=1\r\n"), 1000);
 80026ba:	4a51      	ldr	r2, [pc, #324]	; (8002800 <ESP8266_Init+0x2e4>)
 80026bc:	4b5c      	ldr	r3, [pc, #368]	; (8002830 <ESP8266_Init+0x314>)
 80026be:	4614      	mov	r4, r2
 80026c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80026c2:	6020      	str	r0, [r4, #0]
 80026c4:	6061      	str	r1, [r4, #4]
 80026c6:	60a2      	str	r2, [r4, #8]
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	81a3      	strh	r3, [r4, #12]
 80026cc:	230d      	movs	r3, #13
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026d4:	494a      	ldr	r1, [pc, #296]	; (8002800 <ESP8266_Init+0x2e4>)
 80026d6:	484c      	ldr	r0, [pc, #304]	; (8002808 <ESP8266_Init+0x2ec>)
 80026d8:	f7fe ff83 	bl	80015e2 <HAL_UART_Transmit>
			Case = 0;
 80026dc:	4b47      	ldr	r3, [pc, #284]	; (80027fc <ESP8266_Init+0x2e0>)
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
		break;
 80026e2:	e2a5      	b.n	8002c30 <ESP8266_Init+0x714>
	case 4:
		HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CWJAP=\"%s\",\"%s\"\r\n",SSID,PW), 1000);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	4952      	ldr	r1, [pc, #328]	; (8002834 <ESP8266_Init+0x318>)
 80026ea:	4845      	ldr	r0, [pc, #276]	; (8002800 <ESP8266_Init+0x2e4>)
 80026ec:	f000 fc8e 	bl	800300c <siprintf>
 80026f0:	4603      	mov	r3, r0
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026f8:	4941      	ldr	r1, [pc, #260]	; (8002800 <ESP8266_Init+0x2e4>)
 80026fa:	4843      	ldr	r0, [pc, #268]	; (8002808 <ESP8266_Init+0x2ec>)
 80026fc:	f7fe ff71 	bl	80015e2 <HAL_UART_Transmit>
		HAL_Delay(500);
 8002700:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002704:	f7fd ffb6 	bl	8000674 <HAL_Delay>
		Case = 5;
 8002708:	4b3c      	ldr	r3, [pc, #240]	; (80027fc <ESP8266_Init+0x2e0>)
 800270a:	2205      	movs	r2, #5
 800270c:	701a      	strb	r2, [r3, #0]
		break;
 800270e:	e28f      	b.n	8002c30 <ESP8266_Init+0x714>
	case 5:
		if(strstr(Esp_Veri_Buffer,"OK")){
 8002710:	493e      	ldr	r1, [pc, #248]	; (800280c <ESP8266_Init+0x2f0>)
 8002712:	483f      	ldr	r0, [pc, #252]	; (8002810 <ESP8266_Init+0x2f4>)
 8002714:	f000 fcbb 	bl	800308e <strstr>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d018      	beq.n	8002750 <ESP8266_Init+0x234>
			Clear_ESP_Buffer();
 800271e:	f000 faa9 	bl	8002c74 <Clear_ESP_Buffer>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Baglanti yapildi!\r\n"), 1000);
 8002722:	4a37      	ldr	r2, [pc, #220]	; (8002800 <ESP8266_Init+0x2e4>)
 8002724:	4b44      	ldr	r3, [pc, #272]	; (8002838 <ESP8266_Init+0x31c>)
 8002726:	4615      	mov	r5, r2
 8002728:	461c      	mov	r4, r3
 800272a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800272c:	6028      	str	r0, [r5, #0]
 800272e:	6069      	str	r1, [r5, #4]
 8002730:	60aa      	str	r2, [r5, #8]
 8002732:	60eb      	str	r3, [r5, #12]
 8002734:	6820      	ldr	r0, [r4, #0]
 8002736:	6128      	str	r0, [r5, #16]
 8002738:	2313      	movs	r3, #19
 800273a:	b29a      	uxth	r2, r3
 800273c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002740:	492f      	ldr	r1, [pc, #188]	; (8002800 <ESP8266_Init+0x2e4>)
 8002742:	4835      	ldr	r0, [pc, #212]	; (8002818 <ESP8266_Init+0x2fc>)
 8002744:	f7fe ff4d 	bl	80015e2 <HAL_UART_Transmit>
			Case = 6;
 8002748:	4b2c      	ldr	r3, [pc, #176]	; (80027fc <ESP8266_Init+0x2e0>)
 800274a:	2206      	movs	r2, #6
 800274c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Baglanti basarisiz. Tekrar deneniyor!!!\r\n"), 1000);
				Case = 0;
				baglanti_sayaci = 0;
			}
		}
		break;
 800274e:	e26a      	b.n	8002c26 <ESP8266_Init+0x70a>
			Clear_ESP_Buffer();
 8002750:	f000 fa90 	bl	8002c74 <Clear_ESP_Buffer>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Baglanti yapilamadi! Bekleniyor!!\r\n"), 1000);
 8002754:	4b2a      	ldr	r3, [pc, #168]	; (8002800 <ESP8266_Init+0x2e4>)
 8002756:	4a39      	ldr	r2, [pc, #228]	; (800283c <ESP8266_Init+0x320>)
 8002758:	4614      	mov	r4, r2
 800275a:	469e      	mov	lr, r3
 800275c:	f104 0c20 	add.w	ip, r4, #32
 8002760:	4675      	mov	r5, lr
 8002762:	4626      	mov	r6, r4
 8002764:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002766:	6028      	str	r0, [r5, #0]
 8002768:	6069      	str	r1, [r5, #4]
 800276a:	60aa      	str	r2, [r5, #8]
 800276c:	60eb      	str	r3, [r5, #12]
 800276e:	3410      	adds	r4, #16
 8002770:	f10e 0e10 	add.w	lr, lr, #16
 8002774:	4564      	cmp	r4, ip
 8002776:	d1f3      	bne.n	8002760 <ESP8266_Init+0x244>
 8002778:	4673      	mov	r3, lr
 800277a:	4622      	mov	r2, r4
 800277c:	6810      	ldr	r0, [r2, #0]
 800277e:	6018      	str	r0, [r3, #0]
 8002780:	2323      	movs	r3, #35	; 0x23
 8002782:	b29a      	uxth	r2, r3
 8002784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002788:	491d      	ldr	r1, [pc, #116]	; (8002800 <ESP8266_Init+0x2e4>)
 800278a:	4823      	ldr	r0, [pc, #140]	; (8002818 <ESP8266_Init+0x2fc>)
 800278c:	f7fe ff29 	bl	80015e2 <HAL_UART_Transmit>
			baglanti_sayaci++;
 8002790:	4b2b      	ldr	r3, [pc, #172]	; (8002840 <ESP8266_Init+0x324>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	3301      	adds	r3, #1
 8002796:	4a2a      	ldr	r2, [pc, #168]	; (8002840 <ESP8266_Init+0x324>)
 8002798:	6013      	str	r3, [r2, #0]
			HAL_Delay(1250);
 800279a:	f240 40e2 	movw	r0, #1250	; 0x4e2
 800279e:	f7fd ff69 	bl	8000674 <HAL_Delay>
			if (baglanti_sayaci == 5){
 80027a2:	4b27      	ldr	r3, [pc, #156]	; (8002840 <ESP8266_Init+0x324>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b05      	cmp	r3, #5
 80027a8:	f040 823d 	bne.w	8002c26 <ESP8266_Init+0x70a>
				HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Baglanti basarisiz. Tekrar deneniyor!!!\r\n"), 1000);
 80027ac:	4b14      	ldr	r3, [pc, #80]	; (8002800 <ESP8266_Init+0x2e4>)
 80027ae:	4a25      	ldr	r2, [pc, #148]	; (8002844 <ESP8266_Init+0x328>)
 80027b0:	4614      	mov	r4, r2
 80027b2:	469e      	mov	lr, r3
 80027b4:	f104 0c20 	add.w	ip, r4, #32
 80027b8:	4675      	mov	r5, lr
 80027ba:	4626      	mov	r6, r4
 80027bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80027be:	6028      	str	r0, [r5, #0]
 80027c0:	6069      	str	r1, [r5, #4]
 80027c2:	60aa      	str	r2, [r5, #8]
 80027c4:	60eb      	str	r3, [r5, #12]
 80027c6:	3410      	adds	r4, #16
 80027c8:	f10e 0e10 	add.w	lr, lr, #16
 80027cc:	4564      	cmp	r4, ip
 80027ce:	d1f3      	bne.n	80027b8 <ESP8266_Init+0x29c>
 80027d0:	4672      	mov	r2, lr
 80027d2:	4623      	mov	r3, r4
 80027d4:	cb03      	ldmia	r3!, {r0, r1}
 80027d6:	6010      	str	r0, [r2, #0]
 80027d8:	6051      	str	r1, [r2, #4]
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	8113      	strh	r3, [r2, #8]
 80027de:	2329      	movs	r3, #41	; 0x29
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027e6:	4906      	ldr	r1, [pc, #24]	; (8002800 <ESP8266_Init+0x2e4>)
 80027e8:	480b      	ldr	r0, [pc, #44]	; (8002818 <ESP8266_Init+0x2fc>)
 80027ea:	f7fe fefa 	bl	80015e2 <HAL_UART_Transmit>
				Case = 0;
 80027ee:	4b03      	ldr	r3, [pc, #12]	; (80027fc <ESP8266_Init+0x2e0>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
				baglanti_sayaci = 0;
 80027f4:	4b12      	ldr	r3, [pc, #72]	; (8002840 <ESP8266_Init+0x324>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
		break;
 80027fa:	e214      	b.n	8002c26 <ESP8266_Init+0x70a>
 80027fc:	20000890 	.word	0x20000890
 8002800:	20001cd0 	.word	0x20001cd0
 8002804:	0800396c 	.word	0x0800396c
 8002808:	20001ec4 	.word	0x20001ec4
 800280c:	08003974 	.word	0x08003974
 8002810:	200008a4 	.word	0x200008a4
 8002814:	08003978 	.word	0x08003978
 8002818:	20001c2c 	.word	0x20001c2c
 800281c:	0800398c 	.word	0x0800398c
 8002820:	080039a4 	.word	0x080039a4
 8002824:	080039b4 	.word	0x080039b4
 8002828:	080039c0 	.word	0x080039c0
 800282c:	080039d4 	.word	0x080039d4
 8002830:	080039e8 	.word	0x080039e8
 8002834:	080039f8 	.word	0x080039f8
 8002838:	08003a10 	.word	0x08003a10
 800283c:	08003a24 	.word	0x08003a24
 8002840:	20000888 	.word	0x20000888
 8002844:	08003a48 	.word	0x08003a48
	case 6:
		HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CIFSR\r\n"), 1000);
 8002848:	4a9a      	ldr	r2, [pc, #616]	; (8002ab4 <ESP8266_Init+0x598>)
 800284a:	4b9b      	ldr	r3, [pc, #620]	; (8002ab8 <ESP8266_Init+0x59c>)
 800284c:	cb03      	ldmia	r3!, {r0, r1}
 800284e:	6010      	str	r0, [r2, #0]
 8002850:	6051      	str	r1, [r2, #4]
 8002852:	8819      	ldrh	r1, [r3, #0]
 8002854:	789b      	ldrb	r3, [r3, #2]
 8002856:	8111      	strh	r1, [r2, #8]
 8002858:	7293      	strb	r3, [r2, #10]
 800285a:	230a      	movs	r3, #10
 800285c:	b29a      	uxth	r2, r3
 800285e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002862:	4994      	ldr	r1, [pc, #592]	; (8002ab4 <ESP8266_Init+0x598>)
 8002864:	4895      	ldr	r0, [pc, #596]	; (8002abc <ESP8266_Init+0x5a0>)
 8002866:	f7fe febc 	bl	80015e2 <HAL_UART_Transmit>
		HAL_Delay(500);
 800286a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800286e:	f7fd ff01 	bl	8000674 <HAL_Delay>
		Case = 7;
 8002872:	4b93      	ldr	r3, [pc, #588]	; (8002ac0 <ESP8266_Init+0x5a4>)
 8002874:	2207      	movs	r2, #7
 8002876:	701a      	strb	r2, [r3, #0]
		break;
 8002878:	e1da      	b.n	8002c30 <ESP8266_Init+0x714>
	case 7:
		if(strstr(Esp_Veri_Buffer,"OK")){
 800287a:	4992      	ldr	r1, [pc, #584]	; (8002ac4 <ESP8266_Init+0x5a8>)
 800287c:	4892      	ldr	r0, [pc, #584]	; (8002ac8 <ESP8266_Init+0x5ac>)
 800287e:	f000 fc06 	bl	800308e <strstr>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d035      	beq.n	80028f4 <ESP8266_Init+0x3d8>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"IP Alindi!!!\r\n"), 1000);
 8002888:	4a8a      	ldr	r2, [pc, #552]	; (8002ab4 <ESP8266_Init+0x598>)
 800288a:	4b90      	ldr	r3, [pc, #576]	; (8002acc <ESP8266_Init+0x5b0>)
 800288c:	4614      	mov	r4, r2
 800288e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002890:	6020      	str	r0, [r4, #0]
 8002892:	6061      	str	r1, [r4, #4]
 8002894:	60a2      	str	r2, [r4, #8]
 8002896:	881a      	ldrh	r2, [r3, #0]
 8002898:	789b      	ldrb	r3, [r3, #2]
 800289a:	81a2      	strh	r2, [r4, #12]
 800289c:	73a3      	strb	r3, [r4, #14]
 800289e:	230e      	movs	r3, #14
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028a6:	4983      	ldr	r1, [pc, #524]	; (8002ab4 <ESP8266_Init+0x598>)
 80028a8:	4889      	ldr	r0, [pc, #548]	; (8002ad0 <ESP8266_Init+0x5b4>)
 80028aa:	f7fe fe9a 	bl	80015e2 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Cihaz IP = \r\n"), 1000);
 80028ae:	4a81      	ldr	r2, [pc, #516]	; (8002ab4 <ESP8266_Init+0x598>)
 80028b0:	4b88      	ldr	r3, [pc, #544]	; (8002ad4 <ESP8266_Init+0x5b8>)
 80028b2:	4614      	mov	r4, r2
 80028b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80028b6:	6020      	str	r0, [r4, #0]
 80028b8:	6061      	str	r1, [r4, #4]
 80028ba:	60a2      	str	r2, [r4, #8]
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	81a3      	strh	r3, [r4, #12]
 80028c0:	230d      	movs	r3, #13
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028c8:	497a      	ldr	r1, [pc, #488]	; (8002ab4 <ESP8266_Init+0x598>)
 80028ca:	4881      	ldr	r0, [pc, #516]	; (8002ad0 <ESP8266_Init+0x5b4>)
 80028cc:	f7fe fe89 	bl	80015e2 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer, &Esp_Veri_Buffer[11]), 1000);
 80028d0:	4981      	ldr	r1, [pc, #516]	; (8002ad8 <ESP8266_Init+0x5bc>)
 80028d2:	4878      	ldr	r0, [pc, #480]	; (8002ab4 <ESP8266_Init+0x598>)
 80028d4:	f000 fb9a 	bl	800300c <siprintf>
 80028d8:	4603      	mov	r3, r0
 80028da:	b29a      	uxth	r2, r3
 80028dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028e0:	4974      	ldr	r1, [pc, #464]	; (8002ab4 <ESP8266_Init+0x598>)
 80028e2:	487b      	ldr	r0, [pc, #492]	; (8002ad0 <ESP8266_Init+0x5b4>)
 80028e4:	f7fe fe7d 	bl	80015e2 <HAL_UART_Transmit>
			Clear_ESP_Buffer();
 80028e8:	f000 f9c4 	bl	8002c74 <Clear_ESP_Buffer>
			Case = 8;
 80028ec:	4b74      	ldr	r3, [pc, #464]	; (8002ac0 <ESP8266_Init+0x5a4>)
 80028ee:	2208      	movs	r2, #8
 80028f0:	701a      	strb	r2, [r3, #0]
		else{
			Clear_ESP_Buffer();
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"IP Alinamadi!! Tekrar deneniyor!!!\r\n"), 1000);
			Case = 6;
		}
		break;
 80028f2:	e19d      	b.n	8002c30 <ESP8266_Init+0x714>
			Clear_ESP_Buffer();
 80028f4:	f000 f9be 	bl	8002c74 <Clear_ESP_Buffer>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"IP Alinamadi!! Tekrar deneniyor!!!\r\n"), 1000);
 80028f8:	4b6e      	ldr	r3, [pc, #440]	; (8002ab4 <ESP8266_Init+0x598>)
 80028fa:	4a78      	ldr	r2, [pc, #480]	; (8002adc <ESP8266_Init+0x5c0>)
 80028fc:	4614      	mov	r4, r2
 80028fe:	469e      	mov	lr, r3
 8002900:	f104 0c20 	add.w	ip, r4, #32
 8002904:	4675      	mov	r5, lr
 8002906:	4626      	mov	r6, r4
 8002908:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800290a:	6028      	str	r0, [r5, #0]
 800290c:	6069      	str	r1, [r5, #4]
 800290e:	60aa      	str	r2, [r5, #8]
 8002910:	60eb      	str	r3, [r5, #12]
 8002912:	3410      	adds	r4, #16
 8002914:	f10e 0e10 	add.w	lr, lr, #16
 8002918:	4564      	cmp	r4, ip
 800291a:	d1f3      	bne.n	8002904 <ESP8266_Init+0x3e8>
 800291c:	4673      	mov	r3, lr
 800291e:	4622      	mov	r2, r4
 8002920:	6810      	ldr	r0, [r2, #0]
 8002922:	6018      	str	r0, [r3, #0]
 8002924:	7912      	ldrb	r2, [r2, #4]
 8002926:	711a      	strb	r2, [r3, #4]
 8002928:	2324      	movs	r3, #36	; 0x24
 800292a:	b29a      	uxth	r2, r3
 800292c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002930:	4960      	ldr	r1, [pc, #384]	; (8002ab4 <ESP8266_Init+0x598>)
 8002932:	4867      	ldr	r0, [pc, #412]	; (8002ad0 <ESP8266_Init+0x5b4>)
 8002934:	f7fe fe55 	bl	80015e2 <HAL_UART_Transmit>
			Case = 6;
 8002938:	4b61      	ldr	r3, [pc, #388]	; (8002ac0 <ESP8266_Init+0x5a4>)
 800293a:	2206      	movs	r2, #6
 800293c:	701a      	strb	r2, [r3, #0]
		break;
 800293e:	e177      	b.n	8002c30 <ESP8266_Init+0x714>
	case 8:
		HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CIPMUX=1\r\n"), 1000);
 8002940:	4a5c      	ldr	r2, [pc, #368]	; (8002ab4 <ESP8266_Init+0x598>)
 8002942:	4b67      	ldr	r3, [pc, #412]	; (8002ae0 <ESP8266_Init+0x5c4>)
 8002944:	4614      	mov	r4, r2
 8002946:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002948:	6020      	str	r0, [r4, #0]
 800294a:	6061      	str	r1, [r4, #4]
 800294c:	60a2      	str	r2, [r4, #8]
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	81a3      	strh	r3, [r4, #12]
 8002952:	230d      	movs	r3, #13
 8002954:	b29a      	uxth	r2, r3
 8002956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800295a:	4956      	ldr	r1, [pc, #344]	; (8002ab4 <ESP8266_Init+0x598>)
 800295c:	4857      	ldr	r0, [pc, #348]	; (8002abc <ESP8266_Init+0x5a0>)
 800295e:	f7fe fe40 	bl	80015e2 <HAL_UART_Transmit>
		HAL_Delay(500);
 8002962:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002966:	f7fd fe85 	bl	8000674 <HAL_Delay>
		Case = 9;
 800296a:	4b55      	ldr	r3, [pc, #340]	; (8002ac0 <ESP8266_Init+0x5a4>)
 800296c:	2209      	movs	r2, #9
 800296e:	701a      	strb	r2, [r3, #0]
		break;
 8002970:	e15e      	b.n	8002c30 <ESP8266_Init+0x714>
	case 9:
		if(strstr(Esp_Veri_Buffer,"OK")){
 8002972:	4954      	ldr	r1, [pc, #336]	; (8002ac4 <ESP8266_Init+0x5a8>)
 8002974:	4854      	ldr	r0, [pc, #336]	; (8002ac8 <ESP8266_Init+0x5ac>)
 8002976:	f000 fb8a 	bl	800308e <strstr>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d01b      	beq.n	80029b8 <ESP8266_Init+0x49c>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Coklu baglanti dogrulandi!!!!\r\n"), 1000);
 8002980:	4a4c      	ldr	r2, [pc, #304]	; (8002ab4 <ESP8266_Init+0x598>)
 8002982:	4b58      	ldr	r3, [pc, #352]	; (8002ae4 <ESP8266_Init+0x5c8>)
 8002984:	4614      	mov	r4, r2
 8002986:	461d      	mov	r5, r3
 8002988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800298a:	6020      	str	r0, [r4, #0]
 800298c:	6061      	str	r1, [r4, #4]
 800298e:	60a2      	str	r2, [r4, #8]
 8002990:	60e3      	str	r3, [r4, #12]
 8002992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002994:	6120      	str	r0, [r4, #16]
 8002996:	6161      	str	r1, [r4, #20]
 8002998:	61a2      	str	r2, [r4, #24]
 800299a:	61e3      	str	r3, [r4, #28]
 800299c:	231f      	movs	r3, #31
 800299e:	b29a      	uxth	r2, r3
 80029a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029a4:	4943      	ldr	r1, [pc, #268]	; (8002ab4 <ESP8266_Init+0x598>)
 80029a6:	484a      	ldr	r0, [pc, #296]	; (8002ad0 <ESP8266_Init+0x5b4>)
 80029a8:	f7fe fe1b 	bl	80015e2 <HAL_UART_Transmit>
			Clear_ESP_Buffer();
 80029ac:	f000 f962 	bl	8002c74 <Clear_ESP_Buffer>
			Case = 10;
 80029b0:	4b43      	ldr	r3, [pc, #268]	; (8002ac0 <ESP8266_Init+0x5a4>)
 80029b2:	220a      	movs	r2, #10
 80029b4:	701a      	strb	r2, [r3, #0]
		else{
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Coklu baglanti dogrulanamadi!!!!\r\n"), 1000);
			Clear_ESP_Buffer();
			Case = 8;
		}
		break;
 80029b6:	e13b      	b.n	8002c30 <ESP8266_Init+0x714>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Coklu baglanti dogrulanamadi!!!!\r\n"), 1000);
 80029b8:	4b3e      	ldr	r3, [pc, #248]	; (8002ab4 <ESP8266_Init+0x598>)
 80029ba:	4a4b      	ldr	r2, [pc, #300]	; (8002ae8 <ESP8266_Init+0x5cc>)
 80029bc:	4614      	mov	r4, r2
 80029be:	469e      	mov	lr, r3
 80029c0:	f104 0c20 	add.w	ip, r4, #32
 80029c4:	4675      	mov	r5, lr
 80029c6:	4626      	mov	r6, r4
 80029c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80029ca:	6028      	str	r0, [r5, #0]
 80029cc:	6069      	str	r1, [r5, #4]
 80029ce:	60aa      	str	r2, [r5, #8]
 80029d0:	60eb      	str	r3, [r5, #12]
 80029d2:	3410      	adds	r4, #16
 80029d4:	f10e 0e10 	add.w	lr, lr, #16
 80029d8:	4564      	cmp	r4, ip
 80029da:	d1f3      	bne.n	80029c4 <ESP8266_Init+0x4a8>
 80029dc:	4673      	mov	r3, lr
 80029de:	4622      	mov	r2, r4
 80029e0:	8811      	ldrh	r1, [r2, #0]
 80029e2:	7892      	ldrb	r2, [r2, #2]
 80029e4:	8019      	strh	r1, [r3, #0]
 80029e6:	709a      	strb	r2, [r3, #2]
 80029e8:	2322      	movs	r3, #34	; 0x22
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029f0:	4930      	ldr	r1, [pc, #192]	; (8002ab4 <ESP8266_Init+0x598>)
 80029f2:	4837      	ldr	r0, [pc, #220]	; (8002ad0 <ESP8266_Init+0x5b4>)
 80029f4:	f7fe fdf5 	bl	80015e2 <HAL_UART_Transmit>
			Clear_ESP_Buffer();
 80029f8:	f000 f93c 	bl	8002c74 <Clear_ESP_Buffer>
			Case = 8;
 80029fc:	4b30      	ldr	r3, [pc, #192]	; (8002ac0 <ESP8266_Init+0x5a4>)
 80029fe:	2208      	movs	r2, #8
 8002a00:	701a      	strb	r2, [r3, #0]
		break;
 8002a02:	e115      	b.n	8002c30 <ESP8266_Init+0x714>
	case 10:
		HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CIPSERVER=1,80\r\n"), 1000);
 8002a04:	4a2b      	ldr	r2, [pc, #172]	; (8002ab4 <ESP8266_Init+0x598>)
 8002a06:	4b39      	ldr	r3, [pc, #228]	; (8002aec <ESP8266_Init+0x5d0>)
 8002a08:	4615      	mov	r5, r2
 8002a0a:	461c      	mov	r4, r3
 8002a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a0e:	6028      	str	r0, [r5, #0]
 8002a10:	6069      	str	r1, [r5, #4]
 8002a12:	60aa      	str	r2, [r5, #8]
 8002a14:	60eb      	str	r3, [r5, #12]
 8002a16:	6820      	ldr	r0, [r4, #0]
 8002a18:	6128      	str	r0, [r5, #16]
 8002a1a:	2313      	movs	r3, #19
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a22:	4924      	ldr	r1, [pc, #144]	; (8002ab4 <ESP8266_Init+0x598>)
 8002a24:	4825      	ldr	r0, [pc, #148]	; (8002abc <ESP8266_Init+0x5a0>)
 8002a26:	f7fe fddc 	bl	80015e2 <HAL_UART_Transmit>
		HAL_Delay(500);
 8002a2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a2e:	f7fd fe21 	bl	8000674 <HAL_Delay>
		Case = 11;
 8002a32:	4b23      	ldr	r3, [pc, #140]	; (8002ac0 <ESP8266_Init+0x5a4>)
 8002a34:	220b      	movs	r2, #11
 8002a36:	701a      	strb	r2, [r3, #0]
		break;
 8002a38:	e0fa      	b.n	8002c30 <ESP8266_Init+0x714>
	case 11:
		if(strstr(Esp_Veri_Buffer,"OK")){
 8002a3a:	4922      	ldr	r1, [pc, #136]	; (8002ac4 <ESP8266_Init+0x5a8>)
 8002a3c:	4822      	ldr	r0, [pc, #136]	; (8002ac8 <ESP8266_Init+0x5ac>)
 8002a3e:	f000 fb26 	bl	800308e <strstr>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d018      	beq.n	8002a7a <ESP8266_Init+0x55e>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Server basladi!!!\r\n"), 1000);
 8002a48:	4a1a      	ldr	r2, [pc, #104]	; (8002ab4 <ESP8266_Init+0x598>)
 8002a4a:	4b29      	ldr	r3, [pc, #164]	; (8002af0 <ESP8266_Init+0x5d4>)
 8002a4c:	4615      	mov	r5, r2
 8002a4e:	461c      	mov	r4, r3
 8002a50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a52:	6028      	str	r0, [r5, #0]
 8002a54:	6069      	str	r1, [r5, #4]
 8002a56:	60aa      	str	r2, [r5, #8]
 8002a58:	60eb      	str	r3, [r5, #12]
 8002a5a:	6820      	ldr	r0, [r4, #0]
 8002a5c:	6128      	str	r0, [r5, #16]
 8002a5e:	2313      	movs	r3, #19
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a66:	4913      	ldr	r1, [pc, #76]	; (8002ab4 <ESP8266_Init+0x598>)
 8002a68:	4819      	ldr	r0, [pc, #100]	; (8002ad0 <ESP8266_Init+0x5b4>)
 8002a6a:	f7fe fdba 	bl	80015e2 <HAL_UART_Transmit>
			Clear_ESP_Buffer();
 8002a6e:	f000 f901 	bl	8002c74 <Clear_ESP_Buffer>
			Case = 12;
 8002a72:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <ESP8266_Init+0x5a4>)
 8002a74:	220c      	movs	r2, #12
 8002a76:	701a      	strb	r2, [r3, #0]
		else{
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Server baslamadi\r\n"), 1000);
			Clear_ESP_Buffer();
			Case = 10;
		}
		break;
 8002a78:	e0da      	b.n	8002c30 <ESP8266_Init+0x714>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Server baslamadi\r\n"), 1000);
 8002a7a:	4a0e      	ldr	r2, [pc, #56]	; (8002ab4 <ESP8266_Init+0x598>)
 8002a7c:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <ESP8266_Init+0x5d8>)
 8002a7e:	4615      	mov	r5, r2
 8002a80:	461c      	mov	r4, r3
 8002a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a84:	6028      	str	r0, [r5, #0]
 8002a86:	6069      	str	r1, [r5, #4]
 8002a88:	60aa      	str	r2, [r5, #8]
 8002a8a:	60eb      	str	r3, [r5, #12]
 8002a8c:	8823      	ldrh	r3, [r4, #0]
 8002a8e:	78a2      	ldrb	r2, [r4, #2]
 8002a90:	822b      	strh	r3, [r5, #16]
 8002a92:	4613      	mov	r3, r2
 8002a94:	74ab      	strb	r3, [r5, #18]
 8002a96:	2312      	movs	r3, #18
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a9e:	4905      	ldr	r1, [pc, #20]	; (8002ab4 <ESP8266_Init+0x598>)
 8002aa0:	480b      	ldr	r0, [pc, #44]	; (8002ad0 <ESP8266_Init+0x5b4>)
 8002aa2:	f7fe fd9e 	bl	80015e2 <HAL_UART_Transmit>
			Clear_ESP_Buffer();
 8002aa6:	f000 f8e5 	bl	8002c74 <Clear_ESP_Buffer>
			Case = 10;
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <ESP8266_Init+0x5a4>)
 8002aac:	220a      	movs	r2, #10
 8002aae:	701a      	strb	r2, [r3, #0]
		break;
 8002ab0:	e0be      	b.n	8002c30 <ESP8266_Init+0x714>
 8002ab2:	bf00      	nop
 8002ab4:	20001cd0 	.word	0x20001cd0
 8002ab8:	08003a74 	.word	0x08003a74
 8002abc:	20001ec4 	.word	0x20001ec4
 8002ac0:	20000890 	.word	0x20000890
 8002ac4:	08003974 	.word	0x08003974
 8002ac8:	200008a4 	.word	0x200008a4
 8002acc:	08003a80 	.word	0x08003a80
 8002ad0:	20001c2c 	.word	0x20001c2c
 8002ad4:	08003a90 	.word	0x08003a90
 8002ad8:	200008af 	.word	0x200008af
 8002adc:	08003aa0 	.word	0x08003aa0
 8002ae0:	08003ac8 	.word	0x08003ac8
 8002ae4:	08003ad8 	.word	0x08003ad8
 8002ae8:	08003af8 	.word	0x08003af8
 8002aec:	08003b1c 	.word	0x08003b1c
 8002af0:	08003b30 	.word	0x08003b30
 8002af4:	08003b44 	.word	0x08003b44
	case 12:
		if(strstr(Esp_Veri_Buffer,"GET")){
 8002af8:	494f      	ldr	r1, [pc, #316]	; (8002c38 <ESP8266_Init+0x71c>)
 8002afa:	4850      	ldr	r0, [pc, #320]	; (8002c3c <ESP8266_Init+0x720>)
 8002afc:	f000 fac7 	bl	800308e <strstr>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 8091 	beq.w	8002c2a <ESP8266_Init+0x70e>
			sprintf(datatosend, Basic_inclusion);
 8002b08:	4b4d      	ldr	r3, [pc, #308]	; (8002c40 <ESP8266_Init+0x724>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	484d      	ldr	r0, [pc, #308]	; (8002c44 <ESP8266_Init+0x728>)
 8002b10:	f000 fa7c 	bl	800300c <siprintf>
			strcat(datatosend, LED_ON);
 8002b14:	4b4c      	ldr	r3, [pc, #304]	; (8002c48 <ESP8266_Init+0x72c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	484a      	ldr	r0, [pc, #296]	; (8002c44 <ESP8266_Init+0x728>)
 8002b1c:	f000 fa9a 	bl	8003054 <strcat>
			strcat(datatosend, LED_OFF);
 8002b20:	4b4a      	ldr	r3, [pc, #296]	; (8002c4c <ESP8266_Init+0x730>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4619      	mov	r1, r3
 8002b26:	4847      	ldr	r0, [pc, #284]	; (8002c44 <ESP8266_Init+0x728>)
 8002b28:	f000 fa94 	bl	8003054 <strcat>
			len = strlen(datatosend);
 8002b2c:	4845      	ldr	r0, [pc, #276]	; (8002c44 <ESP8266_Init+0x728>)
 8002b2e:	f7fd fb4f 	bl	80001d0 <strlen>
 8002b32:	4603      	mov	r3, r0
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b46      	ldr	r3, [pc, #280]	; (8002c50 <ESP8266_Init+0x734>)
 8002b38:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CIPSEND=%d,%d\r\n",0,len), 1000);
 8002b3a:	4b45      	ldr	r3, [pc, #276]	; (8002c50 <ESP8266_Init+0x734>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	4944      	ldr	r1, [pc, #272]	; (8002c54 <ESP8266_Init+0x738>)
 8002b42:	4845      	ldr	r0, [pc, #276]	; (8002c58 <ESP8266_Init+0x73c>)
 8002b44:	f000 fa62 	bl	800300c <siprintf>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b50:	4941      	ldr	r1, [pc, #260]	; (8002c58 <ESP8266_Init+0x73c>)
 8002b52:	4842      	ldr	r0, [pc, #264]	; (8002c5c <ESP8266_Init+0x740>)
 8002b54:	f7fe fd45 	bl	80015e2 <HAL_UART_Transmit>
			HAL_Delay(500);
 8002b58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b5c:	f7fd fd8a 	bl	8000674 <HAL_Delay>
			if(strstr(Esp_Veri_Buffer,">")){
 8002b60:	213e      	movs	r1, #62	; 0x3e
 8002b62:	4836      	ldr	r0, [pc, #216]	; (8002c3c <ESP8266_Init+0x720>)
 8002b64:	f000 fa85 	bl	8003072 <strchr>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d05d      	beq.n	8002c2a <ESP8266_Init+0x70e>
				HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, datatosend), 1000);
 8002b6e:	4935      	ldr	r1, [pc, #212]	; (8002c44 <ESP8266_Init+0x728>)
 8002b70:	4839      	ldr	r0, [pc, #228]	; (8002c58 <ESP8266_Init+0x73c>)
 8002b72:	f000 fa4b 	bl	800300c <siprintf>
 8002b76:	4603      	mov	r3, r0
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b7e:	4936      	ldr	r1, [pc, #216]	; (8002c58 <ESP8266_Init+0x73c>)
 8002b80:	4836      	ldr	r0, [pc, #216]	; (8002c5c <ESP8266_Init+0x740>)
 8002b82:	f7fe fd2e 	bl	80015e2 <HAL_UART_Transmit>
				HAL_Delay(500);
 8002b86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b8a:	f7fd fd73 	bl	8000674 <HAL_Delay>
				Case = 13;
 8002b8e:	4b34      	ldr	r3, [pc, #208]	; (8002c60 <ESP8266_Init+0x744>)
 8002b90:	220d      	movs	r2, #13
 8002b92:	701a      	strb	r2, [r3, #0]
			}

		}

		break;
 8002b94:	e049      	b.n	8002c2a <ESP8266_Init+0x70e>
	case 13:
		if(strstr(Esp_Veri_Buffer,":GET /?pin=on")) {
 8002b96:	4933      	ldr	r1, [pc, #204]	; (8002c64 <ESP8266_Init+0x748>)
 8002b98:	4828      	ldr	r0, [pc, #160]	; (8002c3c <ESP8266_Init+0x720>)
 8002b9a:	f000 fa78 	bl	800308e <strstr>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d01c      	beq.n	8002bde <ESP8266_Init+0x6c2>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13| GPIO_PIN_14| GPIO_PIN_15, GPIO_PIN_SET);
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002baa:	482f      	ldr	r0, [pc, #188]	; (8002c68 <ESP8266_Init+0x74c>)
 8002bac:	f7fe f850 	bl	8000c50 <HAL_GPIO_WritePin>
			//HAL_Delay(500);
			HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CIPCLOSE=0\r\n"), 1000);
 8002bb0:	4a29      	ldr	r2, [pc, #164]	; (8002c58 <ESP8266_Init+0x73c>)
 8002bb2:	4b2e      	ldr	r3, [pc, #184]	; (8002c6c <ESP8266_Init+0x750>)
 8002bb4:	4614      	mov	r4, r2
 8002bb6:	461d      	mov	r5, r3
 8002bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bba:	6020      	str	r0, [r4, #0]
 8002bbc:	6061      	str	r1, [r4, #4]
 8002bbe:	60a2      	str	r2, [r4, #8]
 8002bc0:	60e3      	str	r3, [r4, #12]
 8002bc2:	230f      	movs	r3, #15
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bca:	4923      	ldr	r1, [pc, #140]	; (8002c58 <ESP8266_Init+0x73c>)
 8002bcc:	4823      	ldr	r0, [pc, #140]	; (8002c5c <ESP8266_Init+0x740>)
 8002bce:	f7fe fd08 	bl	80015e2 <HAL_UART_Transmit>
			Clear_ESP_Buffer();
 8002bd2:	f000 f84f 	bl	8002c74 <Clear_ESP_Buffer>
			Case = 12;
 8002bd6:	4b22      	ldr	r3, [pc, #136]	; (8002c60 <ESP8266_Init+0x744>)
 8002bd8:	220c      	movs	r2, #12
 8002bda:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CIPCLOSE=0\r\n"), 1000);
			Clear_ESP_Buffer();
			Case = 12;
		}

		break;
 8002bdc:	e027      	b.n	8002c2e <ESP8266_Init+0x712>
		else if(strstr(Esp_Veri_Buffer,":GET /?pin=off")) {
 8002bde:	4924      	ldr	r1, [pc, #144]	; (8002c70 <ESP8266_Init+0x754>)
 8002be0:	4816      	ldr	r0, [pc, #88]	; (8002c3c <ESP8266_Init+0x720>)
 8002be2:	f000 fa54 	bl	800308e <strstr>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d020      	beq.n	8002c2e <ESP8266_Init+0x712>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13| GPIO_PIN_14| GPIO_PIN_15, GPIO_PIN_RESET);
 8002bec:	2200      	movs	r2, #0
 8002bee:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002bf2:	481d      	ldr	r0, [pc, #116]	; (8002c68 <ESP8266_Init+0x74c>)
 8002bf4:	f7fe f82c 	bl	8000c50 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CIPCLOSE=0\r\n"), 1000);
 8002bf8:	4a17      	ldr	r2, [pc, #92]	; (8002c58 <ESP8266_Init+0x73c>)
 8002bfa:	4b1c      	ldr	r3, [pc, #112]	; (8002c6c <ESP8266_Init+0x750>)
 8002bfc:	4614      	mov	r4, r2
 8002bfe:	461d      	mov	r5, r3
 8002c00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c02:	6020      	str	r0, [r4, #0]
 8002c04:	6061      	str	r1, [r4, #4]
 8002c06:	60a2      	str	r2, [r4, #8]
 8002c08:	60e3      	str	r3, [r4, #12]
 8002c0a:	230f      	movs	r3, #15
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c12:	4911      	ldr	r1, [pc, #68]	; (8002c58 <ESP8266_Init+0x73c>)
 8002c14:	4811      	ldr	r0, [pc, #68]	; (8002c5c <ESP8266_Init+0x740>)
 8002c16:	f7fe fce4 	bl	80015e2 <HAL_UART_Transmit>
			Clear_ESP_Buffer();
 8002c1a:	f000 f82b 	bl	8002c74 <Clear_ESP_Buffer>
			Case = 12;
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <ESP8266_Init+0x744>)
 8002c20:	220c      	movs	r2, #12
 8002c22:	701a      	strb	r2, [r3, #0]
		break;
 8002c24:	e003      	b.n	8002c2e <ESP8266_Init+0x712>
		break;
 8002c26:	bf00      	nop
 8002c28:	e002      	b.n	8002c30 <ESP8266_Init+0x714>
		break;
 8002c2a:	bf00      	nop
 8002c2c:	e000      	b.n	8002c30 <ESP8266_Init+0x714>
		break;
 8002c2e:	bf00      	nop
		}

}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c38:	08003b58 	.word	0x08003b58
 8002c3c:	200008a4 	.word	0x200008a4
 8002c40:	20000008 	.word	0x20000008
 8002c44:	200000b4 	.word	0x200000b4
 8002c48:	2000000c 	.word	0x2000000c
 8002c4c:	20000010 	.word	0x20000010
 8002c50:	2000088c 	.word	0x2000088c
 8002c54:	08003b5c 	.word	0x08003b5c
 8002c58:	20001cd0 	.word	0x20001cd0
 8002c5c:	20001ec4 	.word	0x20001ec4
 8002c60:	20000890 	.word	0x20000890
 8002c64:	08003b70 	.word	0x08003b70
 8002c68:	40020c00 	.word	0x40020c00
 8002c6c:	08003b80 	.word	0x08003b80
 8002c70:	08003b90 	.word	0x08003b90

08002c74 <Clear_ESP_Buffer>:

void Clear_ESP_Buffer(void){
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0

	uint16_t i;
	for(i= 0; i < ESP_Buffer_Boyutu; i++){
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	80fb      	strh	r3, [r7, #6]
 8002c7e:	e006      	b.n	8002c8e <Clear_ESP_Buffer+0x1a>
		Esp_Veri_Buffer[i] = 0;
 8002c80:	88fb      	ldrh	r3, [r7, #6]
 8002c82:	4a0a      	ldr	r2, [pc, #40]	; (8002cac <Clear_ESP_Buffer+0x38>)
 8002c84:	2100      	movs	r1, #0
 8002c86:	54d1      	strb	r1, [r2, r3]
	for(i= 0; i < ESP_Buffer_Boyutu; i++){
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	80fb      	strh	r3, [r7, #6]
 8002c8e:	88fb      	ldrh	r3, [r7, #6]
 8002c90:	f241 3287 	movw	r2, #4999	; 0x1387
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d9f3      	bls.n	8002c80 <Clear_ESP_Buffer+0xc>
	}
	Sayac = 0;
 8002c98:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <Clear_ESP_Buffer+0x3c>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	801a      	strh	r2, [r3, #0]
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	200008a4 	.word	0x200008a4
 8002cb0:	20000884 	.word	0x20000884

08002cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	607b      	str	r3, [r7, #4]
 8002cce:	4a10      	ldr	r2, [pc, #64]	; (8002d10 <HAL_MspInit+0x4c>)
 8002cd0:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <HAL_MspInit+0x4c>)
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cda:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <HAL_MspInit+0x4c>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce2:	607b      	str	r3, [r7, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	603b      	str	r3, [r7, #0]
 8002cea:	4a09      	ldr	r2, [pc, #36]	; (8002d10 <HAL_MspInit+0x4c>)
 8002cec:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <HAL_MspInit+0x4c>)
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf6:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_MspInit+0x4c>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800

08002d14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08c      	sub	sp, #48	; 0x30
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d1c:	f107 031c 	add.w	r3, r7, #28
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	60da      	str	r2, [r3, #12]
 8002d2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a36      	ldr	r2, [pc, #216]	; (8002e0c <HAL_UART_MspInit+0xf8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d134      	bne.n	8002da0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
 8002d3a:	4a35      	ldr	r2, [pc, #212]	; (8002e10 <HAL_UART_MspInit+0xfc>)
 8002d3c:	4b34      	ldr	r3, [pc, #208]	; (8002e10 <HAL_UART_MspInit+0xfc>)
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d44:	6413      	str	r3, [r2, #64]	; 0x40
 8002d46:	4b32      	ldr	r3, [pc, #200]	; (8002e10 <HAL_UART_MspInit+0xfc>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4e:	61bb      	str	r3, [r7, #24]
 8002d50:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	4a2e      	ldr	r2, [pc, #184]	; (8002e10 <HAL_UART_MspInit+0xfc>)
 8002d58:	4b2d      	ldr	r3, [pc, #180]	; (8002e10 <HAL_UART_MspInit+0xfc>)
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	6313      	str	r3, [r2, #48]	; 0x30
 8002d62:	4b2b      	ldr	r3, [pc, #172]	; (8002e10 <HAL_UART_MspInit+0xfc>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d6e:	230c      	movs	r3, #12
 8002d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d76:	2301      	movs	r3, #1
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d7e:	2307      	movs	r3, #7
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d82:	f107 031c 	add.w	r3, r7, #28
 8002d86:	4619      	mov	r1, r3
 8002d88:	4822      	ldr	r0, [pc, #136]	; (8002e14 <HAL_UART_MspInit+0x100>)
 8002d8a:	f7fd fdc7 	bl	800091c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2100      	movs	r1, #0
 8002d92:	2026      	movs	r0, #38	; 0x26
 8002d94:	f7fd fd69 	bl	800086a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d98:	2026      	movs	r0, #38	; 0x26
 8002d9a:	f7fd fd82 	bl	80008a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d9e:	e031      	b.n	8002e04 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a1c      	ldr	r2, [pc, #112]	; (8002e18 <HAL_UART_MspInit+0x104>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d12c      	bne.n	8002e04 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	4a18      	ldr	r2, [pc, #96]	; (8002e10 <HAL_UART_MspInit+0xfc>)
 8002db0:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <HAL_UART_MspInit+0xfc>)
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dba:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <HAL_UART_MspInit+0xfc>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dc2:	613b      	str	r3, [r7, #16]
 8002dc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	4a11      	ldr	r2, [pc, #68]	; (8002e10 <HAL_UART_MspInit+0xfc>)
 8002dcc:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <HAL_UART_MspInit+0xfc>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	f043 0302 	orr.w	r3, r3, #2
 8002dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd6:	4b0e      	ldr	r3, [pc, #56]	; (8002e10 <HAL_UART_MspInit+0xfc>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002de2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de8:	2302      	movs	r3, #2
 8002dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dec:	2301      	movs	r3, #1
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df0:	2303      	movs	r3, #3
 8002df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002df4:	2307      	movs	r3, #7
 8002df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df8:	f107 031c 	add.w	r3, r7, #28
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4807      	ldr	r0, [pc, #28]	; (8002e1c <HAL_UART_MspInit+0x108>)
 8002e00:	f7fd fd8c 	bl	800091c <HAL_GPIO_Init>
}
 8002e04:	bf00      	nop
 8002e06:	3730      	adds	r7, #48	; 0x30
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40004400 	.word	0x40004400
 8002e10:	40023800 	.word	0x40023800
 8002e14:	40020000 	.word	0x40020000
 8002e18:	40004800 	.word	0x40004800
 8002e1c:	40020400 	.word	0x40020400

08002e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e32:	e7fe      	b.n	8002e32 <HardFault_Handler+0x4>

08002e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e38:	e7fe      	b.n	8002e38 <MemManage_Handler+0x4>

08002e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e3e:	e7fe      	b.n	8002e3e <BusFault_Handler+0x4>

08002e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e44:	e7fe      	b.n	8002e44 <UsageFault_Handler+0x4>

08002e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e46:	b480      	push	{r7}
 8002e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e58:	bf00      	nop
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e62:	b480      	push	{r7}
 8002e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e74:	f7fd fbde 	bl	8000634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e78:	bf00      	nop
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e82:	480e      	ldr	r0, [pc, #56]	; (8002ebc <USART2_IRQHandler+0x40>)
 8002e84:	f7fe fc46 	bl	8001714 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  uint8_t Gelen_Byte = USART2->DR;
 8002e88:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <USART2_IRQHandler+0x44>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	71fb      	strb	r3, [r7, #7]
  USART3->DR = Gelen_Byte;
 8002e8e:	4a0d      	ldr	r2, [pc, #52]	; (8002ec4 <USART2_IRQHandler+0x48>)
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	6053      	str	r3, [r2, #4]
  if(Gelen_Byte != 0){
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00b      	beq.n	8002eb2 <USART2_IRQHandler+0x36>
	  Esp_Veri_Buffer[Sayac] = Gelen_Byte;
 8002e9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <USART2_IRQHandler+0x4c>)
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4a0a      	ldr	r2, [pc, #40]	; (8002ecc <USART2_IRQHandler+0x50>)
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
 8002ea4:	5453      	strb	r3, [r2, r1]
	  Sayac++;
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <USART2_IRQHandler+0x4c>)
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <USART2_IRQHandler+0x4c>)
 8002eb0:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END USART2_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20001ec4 	.word	0x20001ec4
 8002ec0:	40004400 	.word	0x40004400
 8002ec4:	40004800 	.word	0x40004800
 8002ec8:	20000884 	.word	0x20000884
 8002ecc:	200008a4 	.word	0x200008a4

08002ed0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ed8:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <_sbrk+0x50>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d102      	bne.n	8002ee6 <_sbrk+0x16>
		heap_end = &end;
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <_sbrk+0x50>)
 8002ee2:	4a10      	ldr	r2, [pc, #64]	; (8002f24 <_sbrk+0x54>)
 8002ee4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <_sbrk+0x50>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002eec:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <_sbrk+0x50>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	466a      	mov	r2, sp
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d907      	bls.n	8002f0a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002efa:	f000 f855 	bl	8002fa8 <__errno>
 8002efe:	4602      	mov	r2, r0
 8002f00:	230c      	movs	r3, #12
 8002f02:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002f04:	f04f 33ff 	mov.w	r3, #4294967295
 8002f08:	e006      	b.n	8002f18 <_sbrk+0x48>
	}

	heap_end += incr;
 8002f0a:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <_sbrk+0x50>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	4a03      	ldr	r2, [pc, #12]	; (8002f20 <_sbrk+0x50>)
 8002f14:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002f16:	68fb      	ldr	r3, [r7, #12]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20000894 	.word	0x20000894
 8002f24:	20001f08 	.word	0x20001f08

08002f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f2c:	4a08      	ldr	r2, [pc, #32]	; (8002f50 <SystemInit+0x28>)
 8002f2e:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <SystemInit+0x28>)
 8002f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f3c:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <SystemInit+0x28>)
 8002f3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f42:	609a      	str	r2, [r3, #8]
#endif
}
 8002f44:	bf00      	nop
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f5a:	e003      	b.n	8002f64 <LoopCopyDataInit>

08002f5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f5c:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f62:	3104      	adds	r1, #4

08002f64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f64:	480b      	ldr	r0, [pc, #44]	; (8002f94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f66:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f6c:	d3f6      	bcc.n	8002f5c <CopyDataInit>
  ldr  r2, =_sbss
 8002f6e:	4a0b      	ldr	r2, [pc, #44]	; (8002f9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f70:	e002      	b.n	8002f78 <LoopFillZerobss>

08002f72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f74:	f842 3b04 	str.w	r3, [r2], #4

08002f78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f78:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f7c:	d3f9      	bcc.n	8002f72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f7e:	f7ff ffd3 	bl	8002f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f82:	f000 f817 	bl	8002fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f86:	f7ff f98b 	bl	80022a0 <main>
  bx  lr    
 8002f8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f8c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002f90:	08003bfc 	.word	0x08003bfc
  ldr  r0, =_sdata
 8002f94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f98:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8002f9c:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8002fa0:	20001f08 	.word	0x20001f08

08002fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fa4:	e7fe      	b.n	8002fa4 <ADC_IRQHandler>
	...

08002fa8 <__errno>:
 8002fa8:	4b01      	ldr	r3, [pc, #4]	; (8002fb0 <__errno+0x8>)
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20000034 	.word	0x20000034

08002fb4 <__libc_init_array>:
 8002fb4:	b570      	push	{r4, r5, r6, lr}
 8002fb6:	4e0d      	ldr	r6, [pc, #52]	; (8002fec <__libc_init_array+0x38>)
 8002fb8:	4c0d      	ldr	r4, [pc, #52]	; (8002ff0 <__libc_init_array+0x3c>)
 8002fba:	1ba4      	subs	r4, r4, r6
 8002fbc:	10a4      	asrs	r4, r4, #2
 8002fbe:	2500      	movs	r5, #0
 8002fc0:	42a5      	cmp	r5, r4
 8002fc2:	d109      	bne.n	8002fd8 <__libc_init_array+0x24>
 8002fc4:	4e0b      	ldr	r6, [pc, #44]	; (8002ff4 <__libc_init_array+0x40>)
 8002fc6:	4c0c      	ldr	r4, [pc, #48]	; (8002ff8 <__libc_init_array+0x44>)
 8002fc8:	f000 fc76 	bl	80038b8 <_init>
 8002fcc:	1ba4      	subs	r4, r4, r6
 8002fce:	10a4      	asrs	r4, r4, #2
 8002fd0:	2500      	movs	r5, #0
 8002fd2:	42a5      	cmp	r5, r4
 8002fd4:	d105      	bne.n	8002fe2 <__libc_init_array+0x2e>
 8002fd6:	bd70      	pop	{r4, r5, r6, pc}
 8002fd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fdc:	4798      	blx	r3
 8002fde:	3501      	adds	r5, #1
 8002fe0:	e7ee      	b.n	8002fc0 <__libc_init_array+0xc>
 8002fe2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fe6:	4798      	blx	r3
 8002fe8:	3501      	adds	r5, #1
 8002fea:	e7f2      	b.n	8002fd2 <__libc_init_array+0x1e>
 8002fec:	08003bf4 	.word	0x08003bf4
 8002ff0:	08003bf4 	.word	0x08003bf4
 8002ff4:	08003bf4 	.word	0x08003bf4
 8002ff8:	08003bf8 	.word	0x08003bf8

08002ffc <memset>:
 8002ffc:	4402      	add	r2, r0
 8002ffe:	4603      	mov	r3, r0
 8003000:	4293      	cmp	r3, r2
 8003002:	d100      	bne.n	8003006 <memset+0xa>
 8003004:	4770      	bx	lr
 8003006:	f803 1b01 	strb.w	r1, [r3], #1
 800300a:	e7f9      	b.n	8003000 <memset+0x4>

0800300c <siprintf>:
 800300c:	b40e      	push	{r1, r2, r3}
 800300e:	b500      	push	{lr}
 8003010:	b09c      	sub	sp, #112	; 0x70
 8003012:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003016:	ab1d      	add	r3, sp, #116	; 0x74
 8003018:	f8ad 1014 	strh.w	r1, [sp, #20]
 800301c:	9002      	str	r0, [sp, #8]
 800301e:	9006      	str	r0, [sp, #24]
 8003020:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003024:	480a      	ldr	r0, [pc, #40]	; (8003050 <siprintf+0x44>)
 8003026:	9104      	str	r1, [sp, #16]
 8003028:	9107      	str	r1, [sp, #28]
 800302a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800302e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003032:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003036:	6800      	ldr	r0, [r0, #0]
 8003038:	9301      	str	r3, [sp, #4]
 800303a:	a902      	add	r1, sp, #8
 800303c:	f000 f89e 	bl	800317c <_svfiprintf_r>
 8003040:	9b02      	ldr	r3, [sp, #8]
 8003042:	2200      	movs	r2, #0
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	b01c      	add	sp, #112	; 0x70
 8003048:	f85d eb04 	ldr.w	lr, [sp], #4
 800304c:	b003      	add	sp, #12
 800304e:	4770      	bx	lr
 8003050:	20000034 	.word	0x20000034

08003054 <strcat>:
 8003054:	b510      	push	{r4, lr}
 8003056:	4602      	mov	r2, r0
 8003058:	4613      	mov	r3, r2
 800305a:	3201      	adds	r2, #1
 800305c:	781c      	ldrb	r4, [r3, #0]
 800305e:	2c00      	cmp	r4, #0
 8003060:	d1fa      	bne.n	8003058 <strcat+0x4>
 8003062:	3b01      	subs	r3, #1
 8003064:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003068:	f803 2f01 	strb.w	r2, [r3, #1]!
 800306c:	2a00      	cmp	r2, #0
 800306e:	d1f9      	bne.n	8003064 <strcat+0x10>
 8003070:	bd10      	pop	{r4, pc}

08003072 <strchr>:
 8003072:	b2c9      	uxtb	r1, r1
 8003074:	4603      	mov	r3, r0
 8003076:	f810 2b01 	ldrb.w	r2, [r0], #1
 800307a:	b11a      	cbz	r2, 8003084 <strchr+0x12>
 800307c:	4291      	cmp	r1, r2
 800307e:	d1f9      	bne.n	8003074 <strchr+0x2>
 8003080:	4618      	mov	r0, r3
 8003082:	4770      	bx	lr
 8003084:	2900      	cmp	r1, #0
 8003086:	bf0c      	ite	eq
 8003088:	4618      	moveq	r0, r3
 800308a:	2000      	movne	r0, #0
 800308c:	4770      	bx	lr

0800308e <strstr>:
 800308e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003090:	7803      	ldrb	r3, [r0, #0]
 8003092:	b133      	cbz	r3, 80030a2 <strstr+0x14>
 8003094:	4603      	mov	r3, r0
 8003096:	4618      	mov	r0, r3
 8003098:	1c5e      	adds	r6, r3, #1
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	b933      	cbnz	r3, 80030ac <strstr+0x1e>
 800309e:	4618      	mov	r0, r3
 80030a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030a2:	780b      	ldrb	r3, [r1, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf18      	it	ne
 80030a8:	2000      	movne	r0, #0
 80030aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ac:	1e4d      	subs	r5, r1, #1
 80030ae:	1e44      	subs	r4, r0, #1
 80030b0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80030b4:	2a00      	cmp	r2, #0
 80030b6:	d0f3      	beq.n	80030a0 <strstr+0x12>
 80030b8:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 80030bc:	4297      	cmp	r7, r2
 80030be:	4633      	mov	r3, r6
 80030c0:	d0f6      	beq.n	80030b0 <strstr+0x22>
 80030c2:	e7e8      	b.n	8003096 <strstr+0x8>

080030c4 <__ssputs_r>:
 80030c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030c8:	688e      	ldr	r6, [r1, #8]
 80030ca:	429e      	cmp	r6, r3
 80030cc:	4682      	mov	sl, r0
 80030ce:	460c      	mov	r4, r1
 80030d0:	4691      	mov	r9, r2
 80030d2:	4698      	mov	r8, r3
 80030d4:	d835      	bhi.n	8003142 <__ssputs_r+0x7e>
 80030d6:	898a      	ldrh	r2, [r1, #12]
 80030d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80030dc:	d031      	beq.n	8003142 <__ssputs_r+0x7e>
 80030de:	6825      	ldr	r5, [r4, #0]
 80030e0:	6909      	ldr	r1, [r1, #16]
 80030e2:	1a6f      	subs	r7, r5, r1
 80030e4:	6965      	ldr	r5, [r4, #20]
 80030e6:	2302      	movs	r3, #2
 80030e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030ec:	fb95 f5f3 	sdiv	r5, r5, r3
 80030f0:	f108 0301 	add.w	r3, r8, #1
 80030f4:	443b      	add	r3, r7
 80030f6:	429d      	cmp	r5, r3
 80030f8:	bf38      	it	cc
 80030fa:	461d      	movcc	r5, r3
 80030fc:	0553      	lsls	r3, r2, #21
 80030fe:	d531      	bpl.n	8003164 <__ssputs_r+0xa0>
 8003100:	4629      	mov	r1, r5
 8003102:	f000 fb39 	bl	8003778 <_malloc_r>
 8003106:	4606      	mov	r6, r0
 8003108:	b950      	cbnz	r0, 8003120 <__ssputs_r+0x5c>
 800310a:	230c      	movs	r3, #12
 800310c:	f8ca 3000 	str.w	r3, [sl]
 8003110:	89a3      	ldrh	r3, [r4, #12]
 8003112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003116:	81a3      	strh	r3, [r4, #12]
 8003118:	f04f 30ff 	mov.w	r0, #4294967295
 800311c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003120:	463a      	mov	r2, r7
 8003122:	6921      	ldr	r1, [r4, #16]
 8003124:	f000 fab4 	bl	8003690 <memcpy>
 8003128:	89a3      	ldrh	r3, [r4, #12]
 800312a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800312e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003132:	81a3      	strh	r3, [r4, #12]
 8003134:	6126      	str	r6, [r4, #16]
 8003136:	6165      	str	r5, [r4, #20]
 8003138:	443e      	add	r6, r7
 800313a:	1bed      	subs	r5, r5, r7
 800313c:	6026      	str	r6, [r4, #0]
 800313e:	60a5      	str	r5, [r4, #8]
 8003140:	4646      	mov	r6, r8
 8003142:	4546      	cmp	r6, r8
 8003144:	bf28      	it	cs
 8003146:	4646      	movcs	r6, r8
 8003148:	4632      	mov	r2, r6
 800314a:	4649      	mov	r1, r9
 800314c:	6820      	ldr	r0, [r4, #0]
 800314e:	f000 faaa 	bl	80036a6 <memmove>
 8003152:	68a3      	ldr	r3, [r4, #8]
 8003154:	1b9b      	subs	r3, r3, r6
 8003156:	60a3      	str	r3, [r4, #8]
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	441e      	add	r6, r3
 800315c:	6026      	str	r6, [r4, #0]
 800315e:	2000      	movs	r0, #0
 8003160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003164:	462a      	mov	r2, r5
 8003166:	f000 fb65 	bl	8003834 <_realloc_r>
 800316a:	4606      	mov	r6, r0
 800316c:	2800      	cmp	r0, #0
 800316e:	d1e1      	bne.n	8003134 <__ssputs_r+0x70>
 8003170:	6921      	ldr	r1, [r4, #16]
 8003172:	4650      	mov	r0, sl
 8003174:	f000 fab2 	bl	80036dc <_free_r>
 8003178:	e7c7      	b.n	800310a <__ssputs_r+0x46>
	...

0800317c <_svfiprintf_r>:
 800317c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003180:	b09d      	sub	sp, #116	; 0x74
 8003182:	4680      	mov	r8, r0
 8003184:	9303      	str	r3, [sp, #12]
 8003186:	898b      	ldrh	r3, [r1, #12]
 8003188:	061c      	lsls	r4, r3, #24
 800318a:	460d      	mov	r5, r1
 800318c:	4616      	mov	r6, r2
 800318e:	d50f      	bpl.n	80031b0 <_svfiprintf_r+0x34>
 8003190:	690b      	ldr	r3, [r1, #16]
 8003192:	b96b      	cbnz	r3, 80031b0 <_svfiprintf_r+0x34>
 8003194:	2140      	movs	r1, #64	; 0x40
 8003196:	f000 faef 	bl	8003778 <_malloc_r>
 800319a:	6028      	str	r0, [r5, #0]
 800319c:	6128      	str	r0, [r5, #16]
 800319e:	b928      	cbnz	r0, 80031ac <_svfiprintf_r+0x30>
 80031a0:	230c      	movs	r3, #12
 80031a2:	f8c8 3000 	str.w	r3, [r8]
 80031a6:	f04f 30ff 	mov.w	r0, #4294967295
 80031aa:	e0c5      	b.n	8003338 <_svfiprintf_r+0x1bc>
 80031ac:	2340      	movs	r3, #64	; 0x40
 80031ae:	616b      	str	r3, [r5, #20]
 80031b0:	2300      	movs	r3, #0
 80031b2:	9309      	str	r3, [sp, #36]	; 0x24
 80031b4:	2320      	movs	r3, #32
 80031b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031ba:	2330      	movs	r3, #48	; 0x30
 80031bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031c0:	f04f 0b01 	mov.w	fp, #1
 80031c4:	4637      	mov	r7, r6
 80031c6:	463c      	mov	r4, r7
 80031c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d13c      	bne.n	800324a <_svfiprintf_r+0xce>
 80031d0:	ebb7 0a06 	subs.w	sl, r7, r6
 80031d4:	d00b      	beq.n	80031ee <_svfiprintf_r+0x72>
 80031d6:	4653      	mov	r3, sl
 80031d8:	4632      	mov	r2, r6
 80031da:	4629      	mov	r1, r5
 80031dc:	4640      	mov	r0, r8
 80031de:	f7ff ff71 	bl	80030c4 <__ssputs_r>
 80031e2:	3001      	adds	r0, #1
 80031e4:	f000 80a3 	beq.w	800332e <_svfiprintf_r+0x1b2>
 80031e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031ea:	4453      	add	r3, sl
 80031ec:	9309      	str	r3, [sp, #36]	; 0x24
 80031ee:	783b      	ldrb	r3, [r7, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 809c 	beq.w	800332e <_svfiprintf_r+0x1b2>
 80031f6:	2300      	movs	r3, #0
 80031f8:	f04f 32ff 	mov.w	r2, #4294967295
 80031fc:	9304      	str	r3, [sp, #16]
 80031fe:	9307      	str	r3, [sp, #28]
 8003200:	9205      	str	r2, [sp, #20]
 8003202:	9306      	str	r3, [sp, #24]
 8003204:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003208:	931a      	str	r3, [sp, #104]	; 0x68
 800320a:	2205      	movs	r2, #5
 800320c:	7821      	ldrb	r1, [r4, #0]
 800320e:	4850      	ldr	r0, [pc, #320]	; (8003350 <_svfiprintf_r+0x1d4>)
 8003210:	f7fc ffe6 	bl	80001e0 <memchr>
 8003214:	1c67      	adds	r7, r4, #1
 8003216:	9b04      	ldr	r3, [sp, #16]
 8003218:	b9d8      	cbnz	r0, 8003252 <_svfiprintf_r+0xd6>
 800321a:	06d9      	lsls	r1, r3, #27
 800321c:	bf44      	itt	mi
 800321e:	2220      	movmi	r2, #32
 8003220:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003224:	071a      	lsls	r2, r3, #28
 8003226:	bf44      	itt	mi
 8003228:	222b      	movmi	r2, #43	; 0x2b
 800322a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800322e:	7822      	ldrb	r2, [r4, #0]
 8003230:	2a2a      	cmp	r2, #42	; 0x2a
 8003232:	d016      	beq.n	8003262 <_svfiprintf_r+0xe6>
 8003234:	9a07      	ldr	r2, [sp, #28]
 8003236:	2100      	movs	r1, #0
 8003238:	200a      	movs	r0, #10
 800323a:	4627      	mov	r7, r4
 800323c:	3401      	adds	r4, #1
 800323e:	783b      	ldrb	r3, [r7, #0]
 8003240:	3b30      	subs	r3, #48	; 0x30
 8003242:	2b09      	cmp	r3, #9
 8003244:	d951      	bls.n	80032ea <_svfiprintf_r+0x16e>
 8003246:	b1c9      	cbz	r1, 800327c <_svfiprintf_r+0x100>
 8003248:	e011      	b.n	800326e <_svfiprintf_r+0xf2>
 800324a:	2b25      	cmp	r3, #37	; 0x25
 800324c:	d0c0      	beq.n	80031d0 <_svfiprintf_r+0x54>
 800324e:	4627      	mov	r7, r4
 8003250:	e7b9      	b.n	80031c6 <_svfiprintf_r+0x4a>
 8003252:	4a3f      	ldr	r2, [pc, #252]	; (8003350 <_svfiprintf_r+0x1d4>)
 8003254:	1a80      	subs	r0, r0, r2
 8003256:	fa0b f000 	lsl.w	r0, fp, r0
 800325a:	4318      	orrs	r0, r3
 800325c:	9004      	str	r0, [sp, #16]
 800325e:	463c      	mov	r4, r7
 8003260:	e7d3      	b.n	800320a <_svfiprintf_r+0x8e>
 8003262:	9a03      	ldr	r2, [sp, #12]
 8003264:	1d11      	adds	r1, r2, #4
 8003266:	6812      	ldr	r2, [r2, #0]
 8003268:	9103      	str	r1, [sp, #12]
 800326a:	2a00      	cmp	r2, #0
 800326c:	db01      	blt.n	8003272 <_svfiprintf_r+0xf6>
 800326e:	9207      	str	r2, [sp, #28]
 8003270:	e004      	b.n	800327c <_svfiprintf_r+0x100>
 8003272:	4252      	negs	r2, r2
 8003274:	f043 0302 	orr.w	r3, r3, #2
 8003278:	9207      	str	r2, [sp, #28]
 800327a:	9304      	str	r3, [sp, #16]
 800327c:	783b      	ldrb	r3, [r7, #0]
 800327e:	2b2e      	cmp	r3, #46	; 0x2e
 8003280:	d10e      	bne.n	80032a0 <_svfiprintf_r+0x124>
 8003282:	787b      	ldrb	r3, [r7, #1]
 8003284:	2b2a      	cmp	r3, #42	; 0x2a
 8003286:	f107 0101 	add.w	r1, r7, #1
 800328a:	d132      	bne.n	80032f2 <_svfiprintf_r+0x176>
 800328c:	9b03      	ldr	r3, [sp, #12]
 800328e:	1d1a      	adds	r2, r3, #4
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	9203      	str	r2, [sp, #12]
 8003294:	2b00      	cmp	r3, #0
 8003296:	bfb8      	it	lt
 8003298:	f04f 33ff 	movlt.w	r3, #4294967295
 800329c:	3702      	adds	r7, #2
 800329e:	9305      	str	r3, [sp, #20]
 80032a0:	4c2c      	ldr	r4, [pc, #176]	; (8003354 <_svfiprintf_r+0x1d8>)
 80032a2:	7839      	ldrb	r1, [r7, #0]
 80032a4:	2203      	movs	r2, #3
 80032a6:	4620      	mov	r0, r4
 80032a8:	f7fc ff9a 	bl	80001e0 <memchr>
 80032ac:	b138      	cbz	r0, 80032be <_svfiprintf_r+0x142>
 80032ae:	2340      	movs	r3, #64	; 0x40
 80032b0:	1b00      	subs	r0, r0, r4
 80032b2:	fa03 f000 	lsl.w	r0, r3, r0
 80032b6:	9b04      	ldr	r3, [sp, #16]
 80032b8:	4303      	orrs	r3, r0
 80032ba:	9304      	str	r3, [sp, #16]
 80032bc:	3701      	adds	r7, #1
 80032be:	7839      	ldrb	r1, [r7, #0]
 80032c0:	4825      	ldr	r0, [pc, #148]	; (8003358 <_svfiprintf_r+0x1dc>)
 80032c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032c6:	2206      	movs	r2, #6
 80032c8:	1c7e      	adds	r6, r7, #1
 80032ca:	f7fc ff89 	bl	80001e0 <memchr>
 80032ce:	2800      	cmp	r0, #0
 80032d0:	d035      	beq.n	800333e <_svfiprintf_r+0x1c2>
 80032d2:	4b22      	ldr	r3, [pc, #136]	; (800335c <_svfiprintf_r+0x1e0>)
 80032d4:	b9fb      	cbnz	r3, 8003316 <_svfiprintf_r+0x19a>
 80032d6:	9b03      	ldr	r3, [sp, #12]
 80032d8:	3307      	adds	r3, #7
 80032da:	f023 0307 	bic.w	r3, r3, #7
 80032de:	3308      	adds	r3, #8
 80032e0:	9303      	str	r3, [sp, #12]
 80032e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032e4:	444b      	add	r3, r9
 80032e6:	9309      	str	r3, [sp, #36]	; 0x24
 80032e8:	e76c      	b.n	80031c4 <_svfiprintf_r+0x48>
 80032ea:	fb00 3202 	mla	r2, r0, r2, r3
 80032ee:	2101      	movs	r1, #1
 80032f0:	e7a3      	b.n	800323a <_svfiprintf_r+0xbe>
 80032f2:	2300      	movs	r3, #0
 80032f4:	9305      	str	r3, [sp, #20]
 80032f6:	4618      	mov	r0, r3
 80032f8:	240a      	movs	r4, #10
 80032fa:	460f      	mov	r7, r1
 80032fc:	3101      	adds	r1, #1
 80032fe:	783a      	ldrb	r2, [r7, #0]
 8003300:	3a30      	subs	r2, #48	; 0x30
 8003302:	2a09      	cmp	r2, #9
 8003304:	d903      	bls.n	800330e <_svfiprintf_r+0x192>
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0ca      	beq.n	80032a0 <_svfiprintf_r+0x124>
 800330a:	9005      	str	r0, [sp, #20]
 800330c:	e7c8      	b.n	80032a0 <_svfiprintf_r+0x124>
 800330e:	fb04 2000 	mla	r0, r4, r0, r2
 8003312:	2301      	movs	r3, #1
 8003314:	e7f1      	b.n	80032fa <_svfiprintf_r+0x17e>
 8003316:	ab03      	add	r3, sp, #12
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	462a      	mov	r2, r5
 800331c:	4b10      	ldr	r3, [pc, #64]	; (8003360 <_svfiprintf_r+0x1e4>)
 800331e:	a904      	add	r1, sp, #16
 8003320:	4640      	mov	r0, r8
 8003322:	f3af 8000 	nop.w
 8003326:	f1b0 3fff 	cmp.w	r0, #4294967295
 800332a:	4681      	mov	r9, r0
 800332c:	d1d9      	bne.n	80032e2 <_svfiprintf_r+0x166>
 800332e:	89ab      	ldrh	r3, [r5, #12]
 8003330:	065b      	lsls	r3, r3, #25
 8003332:	f53f af38 	bmi.w	80031a6 <_svfiprintf_r+0x2a>
 8003336:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003338:	b01d      	add	sp, #116	; 0x74
 800333a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800333e:	ab03      	add	r3, sp, #12
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	462a      	mov	r2, r5
 8003344:	4b06      	ldr	r3, [pc, #24]	; (8003360 <_svfiprintf_r+0x1e4>)
 8003346:	a904      	add	r1, sp, #16
 8003348:	4640      	mov	r0, r8
 800334a:	f000 f881 	bl	8003450 <_printf_i>
 800334e:	e7ea      	b.n	8003326 <_svfiprintf_r+0x1aa>
 8003350:	08003bb8 	.word	0x08003bb8
 8003354:	08003bbe 	.word	0x08003bbe
 8003358:	08003bc2 	.word	0x08003bc2
 800335c:	00000000 	.word	0x00000000
 8003360:	080030c5 	.word	0x080030c5

08003364 <_printf_common>:
 8003364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003368:	4691      	mov	r9, r2
 800336a:	461f      	mov	r7, r3
 800336c:	688a      	ldr	r2, [r1, #8]
 800336e:	690b      	ldr	r3, [r1, #16]
 8003370:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003374:	4293      	cmp	r3, r2
 8003376:	bfb8      	it	lt
 8003378:	4613      	movlt	r3, r2
 800337a:	f8c9 3000 	str.w	r3, [r9]
 800337e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003382:	4606      	mov	r6, r0
 8003384:	460c      	mov	r4, r1
 8003386:	b112      	cbz	r2, 800338e <_printf_common+0x2a>
 8003388:	3301      	adds	r3, #1
 800338a:	f8c9 3000 	str.w	r3, [r9]
 800338e:	6823      	ldr	r3, [r4, #0]
 8003390:	0699      	lsls	r1, r3, #26
 8003392:	bf42      	ittt	mi
 8003394:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003398:	3302      	addmi	r3, #2
 800339a:	f8c9 3000 	strmi.w	r3, [r9]
 800339e:	6825      	ldr	r5, [r4, #0]
 80033a0:	f015 0506 	ands.w	r5, r5, #6
 80033a4:	d107      	bne.n	80033b6 <_printf_common+0x52>
 80033a6:	f104 0a19 	add.w	sl, r4, #25
 80033aa:	68e3      	ldr	r3, [r4, #12]
 80033ac:	f8d9 2000 	ldr.w	r2, [r9]
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	429d      	cmp	r5, r3
 80033b4:	db29      	blt.n	800340a <_printf_common+0xa6>
 80033b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80033ba:	6822      	ldr	r2, [r4, #0]
 80033bc:	3300      	adds	r3, #0
 80033be:	bf18      	it	ne
 80033c0:	2301      	movne	r3, #1
 80033c2:	0692      	lsls	r2, r2, #26
 80033c4:	d42e      	bmi.n	8003424 <_printf_common+0xc0>
 80033c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033ca:	4639      	mov	r1, r7
 80033cc:	4630      	mov	r0, r6
 80033ce:	47c0      	blx	r8
 80033d0:	3001      	adds	r0, #1
 80033d2:	d021      	beq.n	8003418 <_printf_common+0xb4>
 80033d4:	6823      	ldr	r3, [r4, #0]
 80033d6:	68e5      	ldr	r5, [r4, #12]
 80033d8:	f8d9 2000 	ldr.w	r2, [r9]
 80033dc:	f003 0306 	and.w	r3, r3, #6
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	bf08      	it	eq
 80033e4:	1aad      	subeq	r5, r5, r2
 80033e6:	68a3      	ldr	r3, [r4, #8]
 80033e8:	6922      	ldr	r2, [r4, #16]
 80033ea:	bf0c      	ite	eq
 80033ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033f0:	2500      	movne	r5, #0
 80033f2:	4293      	cmp	r3, r2
 80033f4:	bfc4      	itt	gt
 80033f6:	1a9b      	subgt	r3, r3, r2
 80033f8:	18ed      	addgt	r5, r5, r3
 80033fa:	f04f 0900 	mov.w	r9, #0
 80033fe:	341a      	adds	r4, #26
 8003400:	454d      	cmp	r5, r9
 8003402:	d11b      	bne.n	800343c <_printf_common+0xd8>
 8003404:	2000      	movs	r0, #0
 8003406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800340a:	2301      	movs	r3, #1
 800340c:	4652      	mov	r2, sl
 800340e:	4639      	mov	r1, r7
 8003410:	4630      	mov	r0, r6
 8003412:	47c0      	blx	r8
 8003414:	3001      	adds	r0, #1
 8003416:	d103      	bne.n	8003420 <_printf_common+0xbc>
 8003418:	f04f 30ff 	mov.w	r0, #4294967295
 800341c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003420:	3501      	adds	r5, #1
 8003422:	e7c2      	b.n	80033aa <_printf_common+0x46>
 8003424:	18e1      	adds	r1, r4, r3
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	2030      	movs	r0, #48	; 0x30
 800342a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800342e:	4422      	add	r2, r4
 8003430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003438:	3302      	adds	r3, #2
 800343a:	e7c4      	b.n	80033c6 <_printf_common+0x62>
 800343c:	2301      	movs	r3, #1
 800343e:	4622      	mov	r2, r4
 8003440:	4639      	mov	r1, r7
 8003442:	4630      	mov	r0, r6
 8003444:	47c0      	blx	r8
 8003446:	3001      	adds	r0, #1
 8003448:	d0e6      	beq.n	8003418 <_printf_common+0xb4>
 800344a:	f109 0901 	add.w	r9, r9, #1
 800344e:	e7d7      	b.n	8003400 <_printf_common+0x9c>

08003450 <_printf_i>:
 8003450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003454:	4617      	mov	r7, r2
 8003456:	7e0a      	ldrb	r2, [r1, #24]
 8003458:	b085      	sub	sp, #20
 800345a:	2a6e      	cmp	r2, #110	; 0x6e
 800345c:	4698      	mov	r8, r3
 800345e:	4606      	mov	r6, r0
 8003460:	460c      	mov	r4, r1
 8003462:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003464:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003468:	f000 80bc 	beq.w	80035e4 <_printf_i+0x194>
 800346c:	d81a      	bhi.n	80034a4 <_printf_i+0x54>
 800346e:	2a63      	cmp	r2, #99	; 0x63
 8003470:	d02e      	beq.n	80034d0 <_printf_i+0x80>
 8003472:	d80a      	bhi.n	800348a <_printf_i+0x3a>
 8003474:	2a00      	cmp	r2, #0
 8003476:	f000 80c8 	beq.w	800360a <_printf_i+0x1ba>
 800347a:	2a58      	cmp	r2, #88	; 0x58
 800347c:	f000 808a 	beq.w	8003594 <_printf_i+0x144>
 8003480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003484:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003488:	e02a      	b.n	80034e0 <_printf_i+0x90>
 800348a:	2a64      	cmp	r2, #100	; 0x64
 800348c:	d001      	beq.n	8003492 <_printf_i+0x42>
 800348e:	2a69      	cmp	r2, #105	; 0x69
 8003490:	d1f6      	bne.n	8003480 <_printf_i+0x30>
 8003492:	6821      	ldr	r1, [r4, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	f011 0f80 	tst.w	r1, #128	; 0x80
 800349a:	d023      	beq.n	80034e4 <_printf_i+0x94>
 800349c:	1d11      	adds	r1, r2, #4
 800349e:	6019      	str	r1, [r3, #0]
 80034a0:	6813      	ldr	r3, [r2, #0]
 80034a2:	e027      	b.n	80034f4 <_printf_i+0xa4>
 80034a4:	2a73      	cmp	r2, #115	; 0x73
 80034a6:	f000 80b4 	beq.w	8003612 <_printf_i+0x1c2>
 80034aa:	d808      	bhi.n	80034be <_printf_i+0x6e>
 80034ac:	2a6f      	cmp	r2, #111	; 0x6f
 80034ae:	d02a      	beq.n	8003506 <_printf_i+0xb6>
 80034b0:	2a70      	cmp	r2, #112	; 0x70
 80034b2:	d1e5      	bne.n	8003480 <_printf_i+0x30>
 80034b4:	680a      	ldr	r2, [r1, #0]
 80034b6:	f042 0220 	orr.w	r2, r2, #32
 80034ba:	600a      	str	r2, [r1, #0]
 80034bc:	e003      	b.n	80034c6 <_printf_i+0x76>
 80034be:	2a75      	cmp	r2, #117	; 0x75
 80034c0:	d021      	beq.n	8003506 <_printf_i+0xb6>
 80034c2:	2a78      	cmp	r2, #120	; 0x78
 80034c4:	d1dc      	bne.n	8003480 <_printf_i+0x30>
 80034c6:	2278      	movs	r2, #120	; 0x78
 80034c8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80034cc:	496e      	ldr	r1, [pc, #440]	; (8003688 <_printf_i+0x238>)
 80034ce:	e064      	b.n	800359a <_printf_i+0x14a>
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80034d6:	1d11      	adds	r1, r2, #4
 80034d8:	6019      	str	r1, [r3, #0]
 80034da:	6813      	ldr	r3, [r2, #0]
 80034dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0a3      	b.n	800362c <_printf_i+0x1dc>
 80034e4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80034e8:	f102 0104 	add.w	r1, r2, #4
 80034ec:	6019      	str	r1, [r3, #0]
 80034ee:	d0d7      	beq.n	80034a0 <_printf_i+0x50>
 80034f0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	da03      	bge.n	8003500 <_printf_i+0xb0>
 80034f8:	222d      	movs	r2, #45	; 0x2d
 80034fa:	425b      	negs	r3, r3
 80034fc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003500:	4962      	ldr	r1, [pc, #392]	; (800368c <_printf_i+0x23c>)
 8003502:	220a      	movs	r2, #10
 8003504:	e017      	b.n	8003536 <_printf_i+0xe6>
 8003506:	6820      	ldr	r0, [r4, #0]
 8003508:	6819      	ldr	r1, [r3, #0]
 800350a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800350e:	d003      	beq.n	8003518 <_printf_i+0xc8>
 8003510:	1d08      	adds	r0, r1, #4
 8003512:	6018      	str	r0, [r3, #0]
 8003514:	680b      	ldr	r3, [r1, #0]
 8003516:	e006      	b.n	8003526 <_printf_i+0xd6>
 8003518:	f010 0f40 	tst.w	r0, #64	; 0x40
 800351c:	f101 0004 	add.w	r0, r1, #4
 8003520:	6018      	str	r0, [r3, #0]
 8003522:	d0f7      	beq.n	8003514 <_printf_i+0xc4>
 8003524:	880b      	ldrh	r3, [r1, #0]
 8003526:	4959      	ldr	r1, [pc, #356]	; (800368c <_printf_i+0x23c>)
 8003528:	2a6f      	cmp	r2, #111	; 0x6f
 800352a:	bf14      	ite	ne
 800352c:	220a      	movne	r2, #10
 800352e:	2208      	moveq	r2, #8
 8003530:	2000      	movs	r0, #0
 8003532:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003536:	6865      	ldr	r5, [r4, #4]
 8003538:	60a5      	str	r5, [r4, #8]
 800353a:	2d00      	cmp	r5, #0
 800353c:	f2c0 809c 	blt.w	8003678 <_printf_i+0x228>
 8003540:	6820      	ldr	r0, [r4, #0]
 8003542:	f020 0004 	bic.w	r0, r0, #4
 8003546:	6020      	str	r0, [r4, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d13f      	bne.n	80035cc <_printf_i+0x17c>
 800354c:	2d00      	cmp	r5, #0
 800354e:	f040 8095 	bne.w	800367c <_printf_i+0x22c>
 8003552:	4675      	mov	r5, lr
 8003554:	2a08      	cmp	r2, #8
 8003556:	d10b      	bne.n	8003570 <_printf_i+0x120>
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	07da      	lsls	r2, r3, #31
 800355c:	d508      	bpl.n	8003570 <_printf_i+0x120>
 800355e:	6923      	ldr	r3, [r4, #16]
 8003560:	6862      	ldr	r2, [r4, #4]
 8003562:	429a      	cmp	r2, r3
 8003564:	bfde      	ittt	le
 8003566:	2330      	movle	r3, #48	; 0x30
 8003568:	f805 3c01 	strble.w	r3, [r5, #-1]
 800356c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003570:	ebae 0305 	sub.w	r3, lr, r5
 8003574:	6123      	str	r3, [r4, #16]
 8003576:	f8cd 8000 	str.w	r8, [sp]
 800357a:	463b      	mov	r3, r7
 800357c:	aa03      	add	r2, sp, #12
 800357e:	4621      	mov	r1, r4
 8003580:	4630      	mov	r0, r6
 8003582:	f7ff feef 	bl	8003364 <_printf_common>
 8003586:	3001      	adds	r0, #1
 8003588:	d155      	bne.n	8003636 <_printf_i+0x1e6>
 800358a:	f04f 30ff 	mov.w	r0, #4294967295
 800358e:	b005      	add	sp, #20
 8003590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003594:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003598:	493c      	ldr	r1, [pc, #240]	; (800368c <_printf_i+0x23c>)
 800359a:	6822      	ldr	r2, [r4, #0]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	f012 0f80 	tst.w	r2, #128	; 0x80
 80035a2:	f100 0504 	add.w	r5, r0, #4
 80035a6:	601d      	str	r5, [r3, #0]
 80035a8:	d001      	beq.n	80035ae <_printf_i+0x15e>
 80035aa:	6803      	ldr	r3, [r0, #0]
 80035ac:	e002      	b.n	80035b4 <_printf_i+0x164>
 80035ae:	0655      	lsls	r5, r2, #25
 80035b0:	d5fb      	bpl.n	80035aa <_printf_i+0x15a>
 80035b2:	8803      	ldrh	r3, [r0, #0]
 80035b4:	07d0      	lsls	r0, r2, #31
 80035b6:	bf44      	itt	mi
 80035b8:	f042 0220 	orrmi.w	r2, r2, #32
 80035bc:	6022      	strmi	r2, [r4, #0]
 80035be:	b91b      	cbnz	r3, 80035c8 <_printf_i+0x178>
 80035c0:	6822      	ldr	r2, [r4, #0]
 80035c2:	f022 0220 	bic.w	r2, r2, #32
 80035c6:	6022      	str	r2, [r4, #0]
 80035c8:	2210      	movs	r2, #16
 80035ca:	e7b1      	b.n	8003530 <_printf_i+0xe0>
 80035cc:	4675      	mov	r5, lr
 80035ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80035d2:	fb02 3310 	mls	r3, r2, r0, r3
 80035d6:	5ccb      	ldrb	r3, [r1, r3]
 80035d8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80035dc:	4603      	mov	r3, r0
 80035de:	2800      	cmp	r0, #0
 80035e0:	d1f5      	bne.n	80035ce <_printf_i+0x17e>
 80035e2:	e7b7      	b.n	8003554 <_printf_i+0x104>
 80035e4:	6808      	ldr	r0, [r1, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	6949      	ldr	r1, [r1, #20]
 80035ea:	f010 0f80 	tst.w	r0, #128	; 0x80
 80035ee:	d004      	beq.n	80035fa <_printf_i+0x1aa>
 80035f0:	1d10      	adds	r0, r2, #4
 80035f2:	6018      	str	r0, [r3, #0]
 80035f4:	6813      	ldr	r3, [r2, #0]
 80035f6:	6019      	str	r1, [r3, #0]
 80035f8:	e007      	b.n	800360a <_printf_i+0x1ba>
 80035fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80035fe:	f102 0004 	add.w	r0, r2, #4
 8003602:	6018      	str	r0, [r3, #0]
 8003604:	6813      	ldr	r3, [r2, #0]
 8003606:	d0f6      	beq.n	80035f6 <_printf_i+0x1a6>
 8003608:	8019      	strh	r1, [r3, #0]
 800360a:	2300      	movs	r3, #0
 800360c:	6123      	str	r3, [r4, #16]
 800360e:	4675      	mov	r5, lr
 8003610:	e7b1      	b.n	8003576 <_printf_i+0x126>
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	1d11      	adds	r1, r2, #4
 8003616:	6019      	str	r1, [r3, #0]
 8003618:	6815      	ldr	r5, [r2, #0]
 800361a:	6862      	ldr	r2, [r4, #4]
 800361c:	2100      	movs	r1, #0
 800361e:	4628      	mov	r0, r5
 8003620:	f7fc fdde 	bl	80001e0 <memchr>
 8003624:	b108      	cbz	r0, 800362a <_printf_i+0x1da>
 8003626:	1b40      	subs	r0, r0, r5
 8003628:	6060      	str	r0, [r4, #4]
 800362a:	6863      	ldr	r3, [r4, #4]
 800362c:	6123      	str	r3, [r4, #16]
 800362e:	2300      	movs	r3, #0
 8003630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003634:	e79f      	b.n	8003576 <_printf_i+0x126>
 8003636:	6923      	ldr	r3, [r4, #16]
 8003638:	462a      	mov	r2, r5
 800363a:	4639      	mov	r1, r7
 800363c:	4630      	mov	r0, r6
 800363e:	47c0      	blx	r8
 8003640:	3001      	adds	r0, #1
 8003642:	d0a2      	beq.n	800358a <_printf_i+0x13a>
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	079b      	lsls	r3, r3, #30
 8003648:	d507      	bpl.n	800365a <_printf_i+0x20a>
 800364a:	2500      	movs	r5, #0
 800364c:	f104 0919 	add.w	r9, r4, #25
 8003650:	68e3      	ldr	r3, [r4, #12]
 8003652:	9a03      	ldr	r2, [sp, #12]
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	429d      	cmp	r5, r3
 8003658:	db05      	blt.n	8003666 <_printf_i+0x216>
 800365a:	68e0      	ldr	r0, [r4, #12]
 800365c:	9b03      	ldr	r3, [sp, #12]
 800365e:	4298      	cmp	r0, r3
 8003660:	bfb8      	it	lt
 8003662:	4618      	movlt	r0, r3
 8003664:	e793      	b.n	800358e <_printf_i+0x13e>
 8003666:	2301      	movs	r3, #1
 8003668:	464a      	mov	r2, r9
 800366a:	4639      	mov	r1, r7
 800366c:	4630      	mov	r0, r6
 800366e:	47c0      	blx	r8
 8003670:	3001      	adds	r0, #1
 8003672:	d08a      	beq.n	800358a <_printf_i+0x13a>
 8003674:	3501      	adds	r5, #1
 8003676:	e7eb      	b.n	8003650 <_printf_i+0x200>
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1a7      	bne.n	80035cc <_printf_i+0x17c>
 800367c:	780b      	ldrb	r3, [r1, #0]
 800367e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003682:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003686:	e765      	b.n	8003554 <_printf_i+0x104>
 8003688:	08003bda 	.word	0x08003bda
 800368c:	08003bc9 	.word	0x08003bc9

08003690 <memcpy>:
 8003690:	b510      	push	{r4, lr}
 8003692:	1e43      	subs	r3, r0, #1
 8003694:	440a      	add	r2, r1
 8003696:	4291      	cmp	r1, r2
 8003698:	d100      	bne.n	800369c <memcpy+0xc>
 800369a:	bd10      	pop	{r4, pc}
 800369c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036a4:	e7f7      	b.n	8003696 <memcpy+0x6>

080036a6 <memmove>:
 80036a6:	4288      	cmp	r0, r1
 80036a8:	b510      	push	{r4, lr}
 80036aa:	eb01 0302 	add.w	r3, r1, r2
 80036ae:	d803      	bhi.n	80036b8 <memmove+0x12>
 80036b0:	1e42      	subs	r2, r0, #1
 80036b2:	4299      	cmp	r1, r3
 80036b4:	d10c      	bne.n	80036d0 <memmove+0x2a>
 80036b6:	bd10      	pop	{r4, pc}
 80036b8:	4298      	cmp	r0, r3
 80036ba:	d2f9      	bcs.n	80036b0 <memmove+0xa>
 80036bc:	1881      	adds	r1, r0, r2
 80036be:	1ad2      	subs	r2, r2, r3
 80036c0:	42d3      	cmn	r3, r2
 80036c2:	d100      	bne.n	80036c6 <memmove+0x20>
 80036c4:	bd10      	pop	{r4, pc}
 80036c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036ca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80036ce:	e7f7      	b.n	80036c0 <memmove+0x1a>
 80036d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036d4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80036d8:	e7eb      	b.n	80036b2 <memmove+0xc>
	...

080036dc <_free_r>:
 80036dc:	b538      	push	{r3, r4, r5, lr}
 80036de:	4605      	mov	r5, r0
 80036e0:	2900      	cmp	r1, #0
 80036e2:	d045      	beq.n	8003770 <_free_r+0x94>
 80036e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036e8:	1f0c      	subs	r4, r1, #4
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	bfb8      	it	lt
 80036ee:	18e4      	addlt	r4, r4, r3
 80036f0:	f000 f8d6 	bl	80038a0 <__malloc_lock>
 80036f4:	4a1f      	ldr	r2, [pc, #124]	; (8003774 <_free_r+0x98>)
 80036f6:	6813      	ldr	r3, [r2, #0]
 80036f8:	4610      	mov	r0, r2
 80036fa:	b933      	cbnz	r3, 800370a <_free_r+0x2e>
 80036fc:	6063      	str	r3, [r4, #4]
 80036fe:	6014      	str	r4, [r2, #0]
 8003700:	4628      	mov	r0, r5
 8003702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003706:	f000 b8cc 	b.w	80038a2 <__malloc_unlock>
 800370a:	42a3      	cmp	r3, r4
 800370c:	d90c      	bls.n	8003728 <_free_r+0x4c>
 800370e:	6821      	ldr	r1, [r4, #0]
 8003710:	1862      	adds	r2, r4, r1
 8003712:	4293      	cmp	r3, r2
 8003714:	bf04      	itt	eq
 8003716:	681a      	ldreq	r2, [r3, #0]
 8003718:	685b      	ldreq	r3, [r3, #4]
 800371a:	6063      	str	r3, [r4, #4]
 800371c:	bf04      	itt	eq
 800371e:	1852      	addeq	r2, r2, r1
 8003720:	6022      	streq	r2, [r4, #0]
 8003722:	6004      	str	r4, [r0, #0]
 8003724:	e7ec      	b.n	8003700 <_free_r+0x24>
 8003726:	4613      	mov	r3, r2
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	b10a      	cbz	r2, 8003730 <_free_r+0x54>
 800372c:	42a2      	cmp	r2, r4
 800372e:	d9fa      	bls.n	8003726 <_free_r+0x4a>
 8003730:	6819      	ldr	r1, [r3, #0]
 8003732:	1858      	adds	r0, r3, r1
 8003734:	42a0      	cmp	r0, r4
 8003736:	d10b      	bne.n	8003750 <_free_r+0x74>
 8003738:	6820      	ldr	r0, [r4, #0]
 800373a:	4401      	add	r1, r0
 800373c:	1858      	adds	r0, r3, r1
 800373e:	4282      	cmp	r2, r0
 8003740:	6019      	str	r1, [r3, #0]
 8003742:	d1dd      	bne.n	8003700 <_free_r+0x24>
 8003744:	6810      	ldr	r0, [r2, #0]
 8003746:	6852      	ldr	r2, [r2, #4]
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	4401      	add	r1, r0
 800374c:	6019      	str	r1, [r3, #0]
 800374e:	e7d7      	b.n	8003700 <_free_r+0x24>
 8003750:	d902      	bls.n	8003758 <_free_r+0x7c>
 8003752:	230c      	movs	r3, #12
 8003754:	602b      	str	r3, [r5, #0]
 8003756:	e7d3      	b.n	8003700 <_free_r+0x24>
 8003758:	6820      	ldr	r0, [r4, #0]
 800375a:	1821      	adds	r1, r4, r0
 800375c:	428a      	cmp	r2, r1
 800375e:	bf04      	itt	eq
 8003760:	6811      	ldreq	r1, [r2, #0]
 8003762:	6852      	ldreq	r2, [r2, #4]
 8003764:	6062      	str	r2, [r4, #4]
 8003766:	bf04      	itt	eq
 8003768:	1809      	addeq	r1, r1, r0
 800376a:	6021      	streq	r1, [r4, #0]
 800376c:	605c      	str	r4, [r3, #4]
 800376e:	e7c7      	b.n	8003700 <_free_r+0x24>
 8003770:	bd38      	pop	{r3, r4, r5, pc}
 8003772:	bf00      	nop
 8003774:	20000898 	.word	0x20000898

08003778 <_malloc_r>:
 8003778:	b570      	push	{r4, r5, r6, lr}
 800377a:	1ccd      	adds	r5, r1, #3
 800377c:	f025 0503 	bic.w	r5, r5, #3
 8003780:	3508      	adds	r5, #8
 8003782:	2d0c      	cmp	r5, #12
 8003784:	bf38      	it	cc
 8003786:	250c      	movcc	r5, #12
 8003788:	2d00      	cmp	r5, #0
 800378a:	4606      	mov	r6, r0
 800378c:	db01      	blt.n	8003792 <_malloc_r+0x1a>
 800378e:	42a9      	cmp	r1, r5
 8003790:	d903      	bls.n	800379a <_malloc_r+0x22>
 8003792:	230c      	movs	r3, #12
 8003794:	6033      	str	r3, [r6, #0]
 8003796:	2000      	movs	r0, #0
 8003798:	bd70      	pop	{r4, r5, r6, pc}
 800379a:	f000 f881 	bl	80038a0 <__malloc_lock>
 800379e:	4a23      	ldr	r2, [pc, #140]	; (800382c <_malloc_r+0xb4>)
 80037a0:	6814      	ldr	r4, [r2, #0]
 80037a2:	4621      	mov	r1, r4
 80037a4:	b991      	cbnz	r1, 80037cc <_malloc_r+0x54>
 80037a6:	4c22      	ldr	r4, [pc, #136]	; (8003830 <_malloc_r+0xb8>)
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	b91b      	cbnz	r3, 80037b4 <_malloc_r+0x3c>
 80037ac:	4630      	mov	r0, r6
 80037ae:	f000 f867 	bl	8003880 <_sbrk_r>
 80037b2:	6020      	str	r0, [r4, #0]
 80037b4:	4629      	mov	r1, r5
 80037b6:	4630      	mov	r0, r6
 80037b8:	f000 f862 	bl	8003880 <_sbrk_r>
 80037bc:	1c43      	adds	r3, r0, #1
 80037be:	d126      	bne.n	800380e <_malloc_r+0x96>
 80037c0:	230c      	movs	r3, #12
 80037c2:	6033      	str	r3, [r6, #0]
 80037c4:	4630      	mov	r0, r6
 80037c6:	f000 f86c 	bl	80038a2 <__malloc_unlock>
 80037ca:	e7e4      	b.n	8003796 <_malloc_r+0x1e>
 80037cc:	680b      	ldr	r3, [r1, #0]
 80037ce:	1b5b      	subs	r3, r3, r5
 80037d0:	d41a      	bmi.n	8003808 <_malloc_r+0x90>
 80037d2:	2b0b      	cmp	r3, #11
 80037d4:	d90f      	bls.n	80037f6 <_malloc_r+0x7e>
 80037d6:	600b      	str	r3, [r1, #0]
 80037d8:	50cd      	str	r5, [r1, r3]
 80037da:	18cc      	adds	r4, r1, r3
 80037dc:	4630      	mov	r0, r6
 80037de:	f000 f860 	bl	80038a2 <__malloc_unlock>
 80037e2:	f104 000b 	add.w	r0, r4, #11
 80037e6:	1d23      	adds	r3, r4, #4
 80037e8:	f020 0007 	bic.w	r0, r0, #7
 80037ec:	1ac3      	subs	r3, r0, r3
 80037ee:	d01b      	beq.n	8003828 <_malloc_r+0xb0>
 80037f0:	425a      	negs	r2, r3
 80037f2:	50e2      	str	r2, [r4, r3]
 80037f4:	bd70      	pop	{r4, r5, r6, pc}
 80037f6:	428c      	cmp	r4, r1
 80037f8:	bf0d      	iteet	eq
 80037fa:	6863      	ldreq	r3, [r4, #4]
 80037fc:	684b      	ldrne	r3, [r1, #4]
 80037fe:	6063      	strne	r3, [r4, #4]
 8003800:	6013      	streq	r3, [r2, #0]
 8003802:	bf18      	it	ne
 8003804:	460c      	movne	r4, r1
 8003806:	e7e9      	b.n	80037dc <_malloc_r+0x64>
 8003808:	460c      	mov	r4, r1
 800380a:	6849      	ldr	r1, [r1, #4]
 800380c:	e7ca      	b.n	80037a4 <_malloc_r+0x2c>
 800380e:	1cc4      	adds	r4, r0, #3
 8003810:	f024 0403 	bic.w	r4, r4, #3
 8003814:	42a0      	cmp	r0, r4
 8003816:	d005      	beq.n	8003824 <_malloc_r+0xac>
 8003818:	1a21      	subs	r1, r4, r0
 800381a:	4630      	mov	r0, r6
 800381c:	f000 f830 	bl	8003880 <_sbrk_r>
 8003820:	3001      	adds	r0, #1
 8003822:	d0cd      	beq.n	80037c0 <_malloc_r+0x48>
 8003824:	6025      	str	r5, [r4, #0]
 8003826:	e7d9      	b.n	80037dc <_malloc_r+0x64>
 8003828:	bd70      	pop	{r4, r5, r6, pc}
 800382a:	bf00      	nop
 800382c:	20000898 	.word	0x20000898
 8003830:	2000089c 	.word	0x2000089c

08003834 <_realloc_r>:
 8003834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003836:	4607      	mov	r7, r0
 8003838:	4614      	mov	r4, r2
 800383a:	460e      	mov	r6, r1
 800383c:	b921      	cbnz	r1, 8003848 <_realloc_r+0x14>
 800383e:	4611      	mov	r1, r2
 8003840:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003844:	f7ff bf98 	b.w	8003778 <_malloc_r>
 8003848:	b922      	cbnz	r2, 8003854 <_realloc_r+0x20>
 800384a:	f7ff ff47 	bl	80036dc <_free_r>
 800384e:	4625      	mov	r5, r4
 8003850:	4628      	mov	r0, r5
 8003852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003854:	f000 f826 	bl	80038a4 <_malloc_usable_size_r>
 8003858:	4284      	cmp	r4, r0
 800385a:	d90f      	bls.n	800387c <_realloc_r+0x48>
 800385c:	4621      	mov	r1, r4
 800385e:	4638      	mov	r0, r7
 8003860:	f7ff ff8a 	bl	8003778 <_malloc_r>
 8003864:	4605      	mov	r5, r0
 8003866:	2800      	cmp	r0, #0
 8003868:	d0f2      	beq.n	8003850 <_realloc_r+0x1c>
 800386a:	4631      	mov	r1, r6
 800386c:	4622      	mov	r2, r4
 800386e:	f7ff ff0f 	bl	8003690 <memcpy>
 8003872:	4631      	mov	r1, r6
 8003874:	4638      	mov	r0, r7
 8003876:	f7ff ff31 	bl	80036dc <_free_r>
 800387a:	e7e9      	b.n	8003850 <_realloc_r+0x1c>
 800387c:	4635      	mov	r5, r6
 800387e:	e7e7      	b.n	8003850 <_realloc_r+0x1c>

08003880 <_sbrk_r>:
 8003880:	b538      	push	{r3, r4, r5, lr}
 8003882:	4c06      	ldr	r4, [pc, #24]	; (800389c <_sbrk_r+0x1c>)
 8003884:	2300      	movs	r3, #0
 8003886:	4605      	mov	r5, r0
 8003888:	4608      	mov	r0, r1
 800388a:	6023      	str	r3, [r4, #0]
 800388c:	f7ff fb20 	bl	8002ed0 <_sbrk>
 8003890:	1c43      	adds	r3, r0, #1
 8003892:	d102      	bne.n	800389a <_sbrk_r+0x1a>
 8003894:	6823      	ldr	r3, [r4, #0]
 8003896:	b103      	cbz	r3, 800389a <_sbrk_r+0x1a>
 8003898:	602b      	str	r3, [r5, #0]
 800389a:	bd38      	pop	{r3, r4, r5, pc}
 800389c:	20001f04 	.word	0x20001f04

080038a0 <__malloc_lock>:
 80038a0:	4770      	bx	lr

080038a2 <__malloc_unlock>:
 80038a2:	4770      	bx	lr

080038a4 <_malloc_usable_size_r>:
 80038a4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80038a8:	2800      	cmp	r0, #0
 80038aa:	f1a0 0004 	sub.w	r0, r0, #4
 80038ae:	bfbc      	itt	lt
 80038b0:	580b      	ldrlt	r3, [r1, r0]
 80038b2:	18c0      	addlt	r0, r0, r3
 80038b4:	4770      	bx	lr
	...

080038b8 <_init>:
 80038b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ba:	bf00      	nop
 80038bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038be:	bc08      	pop	{r3}
 80038c0:	469e      	mov	lr, r3
 80038c2:	4770      	bx	lr

080038c4 <_fini>:
 80038c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c6:	bf00      	nop
 80038c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ca:	bc08      	pop	{r3}
 80038cc:	469e      	mov	lr, r3
 80038ce:	4770      	bx	lr
