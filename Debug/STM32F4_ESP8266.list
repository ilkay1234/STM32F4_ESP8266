
STM32F4_ESP8266.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002174  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08002304  08002304  00012304  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080025cc  080025cc  000125cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080025d4  080025d4  000125d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080025d8  080025d8  000125d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000000  080025dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
  8 .bss          00000cd4  20000090  20000090  00020090  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000d64  20000d64  00020090  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 11 .debug_info   00009472  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001b34  00000000  00000000  00029532  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002d21  00000000  00000000  0002b066  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000618  00000000  00000000  0002dd88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a0  00000000  00000000  0002e3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000032b2  00000000  00000000  0002eb40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000297c  00000000  00000000  00031df2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003476e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000134c  00000000  00000000  000347ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080022ec 	.word	0x080022ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080022ec 	.word	0x080022ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000592:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <HAL_InitTick+0x3c>)
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_InitTick+0x40>)
{
 8000596:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000598:	7818      	ldrb	r0, [r3, #0]
 800059a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059e:	fbb3 f3f0 	udiv	r3, r3, r0
 80005a2:	6810      	ldr	r0, [r2, #0]
 80005a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005a8:	f000 f8aa 	bl	8000700 <HAL_SYSTICK_Config>
 80005ac:	4604      	mov	r4, r0
 80005ae:	b958      	cbnz	r0, 80005c8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b0:	2d0f      	cmp	r5, #15
 80005b2:	d809      	bhi.n	80005c8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b4:	4602      	mov	r2, r0
 80005b6:	4629      	mov	r1, r5
 80005b8:	f04f 30ff 	mov.w	r0, #4294967295
 80005bc:	f000 f85e 	bl	800067c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <HAL_InitTick+0x44>)
 80005c2:	4620      	mov	r0, r4
 80005c4:	601d      	str	r5, [r3, #0]
 80005c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005c8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ca:	bd38      	pop	{r3, r4, r5, pc}
 80005cc:	20000028 	.word	0x20000028
 80005d0:	20000000 	.word	0x20000000
 80005d4:	20000004 	.word	0x20000004

080005d8 <HAL_Init>:
{
 80005d8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <HAL_Init+0x30>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005e2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005ea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005f2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 f82f 	bl	8000658 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff ffc8 	bl	8000590 <HAL_InitTick>
  HAL_MspInit();
 8000600:	f001 f8e2 	bl	80017c8 <HAL_MspInit>
}
 8000604:	2000      	movs	r0, #0
 8000606:	bd08      	pop	{r3, pc}
 8000608:	40023c00 	.word	0x40023c00

0800060c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <HAL_IncTick+0x10>)
 800060e:	4b04      	ldr	r3, [pc, #16]	; (8000620 <HAL_IncTick+0x14>)
 8000610:	6811      	ldr	r1, [r2, #0]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	440b      	add	r3, r1
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000890 	.word	0x20000890
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000624:	4b01      	ldr	r3, [pc, #4]	; (800062c <HAL_GetTick+0x8>)
 8000626:	6818      	ldr	r0, [r3, #0]
}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000890 	.word	0x20000890

08000630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000630:	b538      	push	{r3, r4, r5, lr}
 8000632:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000634:	f7ff fff6 	bl	8000624 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000638:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800063a:	bf1c      	itt	ne
 800063c:	4b05      	ldrne	r3, [pc, #20]	; (8000654 <HAL_Delay+0x24>)
 800063e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000640:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000642:	bf18      	it	ne
 8000644:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000646:	f7ff ffed 	bl	8000624 <HAL_GetTick>
 800064a:	1b40      	subs	r0, r0, r5
 800064c:	4284      	cmp	r4, r0
 800064e:	d8fa      	bhi.n	8000646 <HAL_Delay+0x16>
  {
  }
}
 8000650:	bd38      	pop	{r3, r4, r5, pc}
 8000652:	bf00      	nop
 8000654:	20000000 	.word	0x20000000

08000658 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800065a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000660:	041b      	lsls	r3, r3, #16
 8000662:	0c1b      	lsrs	r3, r3, #16
 8000664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000668:	0200      	lsls	r0, r0, #8
 800066a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000672:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000674:	60d3      	str	r3, [r2, #12]
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800067e:	b530      	push	{r4, r5, lr}
 8000680:	68dc      	ldr	r4, [r3, #12]
 8000682:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000686:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800068a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800068c:	2b04      	cmp	r3, #4
 800068e:	bf28      	it	cs
 8000690:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000692:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000694:	f04f 0501 	mov.w	r5, #1
 8000698:	fa05 f303 	lsl.w	r3, r5, r3
 800069c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a0:	bf8c      	ite	hi
 80006a2:	3c03      	subhi	r4, #3
 80006a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a6:	4019      	ands	r1, r3
 80006a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006aa:	fa05 f404 	lsl.w	r4, r5, r4
 80006ae:	3c01      	subs	r4, #1
 80006b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80006b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	ea42 0201 	orr.w	r2, r2, r1
 80006b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	bfad      	iteet	ge
 80006be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	f000 000f 	andlt.w	r0, r0, #15
 80006c6:	4b06      	ldrlt	r3, [pc, #24]	; (80006e0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	bfb5      	itete	lt
 80006ce:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	bf00      	nop
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	e000ed14 	.word	0xe000ed14

080006e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006e4:	2800      	cmp	r0, #0
 80006e6:	db08      	blt.n	80006fa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006e8:	0942      	lsrs	r2, r0, #5
 80006ea:	2301      	movs	r3, #1
 80006ec:	f000 001f 	and.w	r0, r0, #31
 80006f0:	fa03 f000 	lsl.w	r0, r3, r0
 80006f4:	4b01      	ldr	r3, [pc, #4]	; (80006fc <HAL_NVIC_EnableIRQ+0x18>)
 80006f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006fa:	4770      	bx	lr
 80006fc:	e000e100 	.word	0xe000e100

08000700 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000700:	3801      	subs	r0, #1
 8000702:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000706:	d20a      	bcs.n	800071e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	4a07      	ldr	r2, [pc, #28]	; (8000728 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800070c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070e:	21f0      	movs	r1, #240	; 0xf0
 8000710:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000714:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000716:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000718:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800071e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000e010 	.word	0xe000e010
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800072c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000730:	2b02      	cmp	r3, #2
 8000732:	d003      	beq.n	800073c <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000734:	2380      	movs	r3, #128	; 0x80
 8000736:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000738:	2001      	movs	r0, #1
 800073a:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800073c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800073e:	2305      	movs	r3, #5
 8000740:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000744:	6813      	ldr	r3, [r2, #0]
 8000746:	f023 0301 	bic.w	r3, r3, #1
 800074a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800074c:	2000      	movs	r0, #0
}
 800074e:	4770      	bx	lr

08000750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000754:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000756:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000758:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000908 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800075c:	4a68      	ldr	r2, [pc, #416]	; (8000900 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800075e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800090c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000762:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000764:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000766:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000768:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 800076a:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800076c:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800076e:	42ac      	cmp	r4, r5
 8000770:	f040 80b0 	bne.w	80008d4 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000774:	684c      	ldr	r4, [r1, #4]
 8000776:	f024 0c10 	bic.w	ip, r4, #16
 800077a:	f10c 36ff 	add.w	r6, ip, #4294967295
 800077e:	2e01      	cmp	r6, #1
 8000780:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000784:	d812      	bhi.n	80007ac <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000786:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000788:	2603      	movs	r6, #3
 800078a:	fa06 f60e 	lsl.w	r6, r6, lr
 800078e:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000792:	68ce      	ldr	r6, [r1, #12]
 8000794:	fa06 f60e 	lsl.w	r6, r6, lr
 8000798:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800079a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800079c:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800079e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007a2:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007a6:	409e      	lsls	r6, r3
 80007a8:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80007aa:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007ac:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 80007ae:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007b0:	fa06 f60e 	lsl.w	r6, r6, lr
 80007b4:	43f6      	mvns	r6, r6
 80007b6:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007ba:	688f      	ldr	r7, [r1, #8]
 80007bc:	fa07 f70e 	lsl.w	r7, r7, lr
 80007c0:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007c4:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80007c8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007ca:	d116      	bne.n	80007fa <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80007cc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80007d0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007d4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80007d8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007dc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80007e0:	f04f 0c0f 	mov.w	ip, #15
 80007e4:	fa0c fc0b 	lsl.w	ip, ip, fp
 80007e8:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007ec:	690f      	ldr	r7, [r1, #16]
 80007ee:	fa07 f70b 	lsl.w	r7, r7, fp
 80007f2:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80007f6:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80007fa:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007fc:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007fe:	f004 0703 	and.w	r7, r4, #3
 8000802:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000806:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 800080a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800080c:	00e6      	lsls	r6, r4, #3
 800080e:	d561      	bpl.n	80008d4 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000810:	f04f 0b00 	mov.w	fp, #0
 8000814:	f8cd b00c 	str.w	fp, [sp, #12]
 8000818:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800081c:	4e39      	ldr	r6, [pc, #228]	; (8000904 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000822:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000826:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800082a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800082e:	9703      	str	r7, [sp, #12]
 8000830:	9f03      	ldr	r7, [sp, #12]
 8000832:	f023 0703 	bic.w	r7, r3, #3
 8000836:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800083a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800083e:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000842:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000846:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800084a:	f04f 0e0f 	mov.w	lr, #15
 800084e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000852:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000854:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000858:	d043      	beq.n	80008e2 <HAL_GPIO_Init+0x192>
 800085a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800085e:	42b0      	cmp	r0, r6
 8000860:	d041      	beq.n	80008e6 <HAL_GPIO_Init+0x196>
 8000862:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000866:	42b0      	cmp	r0, r6
 8000868:	d03f      	beq.n	80008ea <HAL_GPIO_Init+0x19a>
 800086a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800086e:	42b0      	cmp	r0, r6
 8000870:	d03d      	beq.n	80008ee <HAL_GPIO_Init+0x19e>
 8000872:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000876:	42b0      	cmp	r0, r6
 8000878:	d03b      	beq.n	80008f2 <HAL_GPIO_Init+0x1a2>
 800087a:	4548      	cmp	r0, r9
 800087c:	d03b      	beq.n	80008f6 <HAL_GPIO_Init+0x1a6>
 800087e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000882:	42b0      	cmp	r0, r6
 8000884:	d039      	beq.n	80008fa <HAL_GPIO_Init+0x1aa>
 8000886:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800088a:	42b0      	cmp	r0, r6
 800088c:	bf14      	ite	ne
 800088e:	2608      	movne	r6, #8
 8000890:	2607      	moveq	r6, #7
 8000892:	fa06 f60c 	lsl.w	r6, r6, ip
 8000896:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800089a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800089c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800089e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008a0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80008a4:	bf0c      	ite	eq
 80008a6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80008a8:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80008aa:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80008ac:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008ae:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80008b2:	bf0c      	ite	eq
 80008b4:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80008b6:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80008b8:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008ba:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008bc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80008c0:	bf0c      	ite	eq
 80008c2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80008c4:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80008c6:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80008c8:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008ca:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008cc:	bf54      	ite	pl
 80008ce:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80008d0:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80008d2:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008d4:	3301      	adds	r3, #1
 80008d6:	2b10      	cmp	r3, #16
 80008d8:	f47f af45 	bne.w	8000766 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008dc:	b005      	add	sp, #20
 80008de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008e2:	465e      	mov	r6, fp
 80008e4:	e7d5      	b.n	8000892 <HAL_GPIO_Init+0x142>
 80008e6:	2601      	movs	r6, #1
 80008e8:	e7d3      	b.n	8000892 <HAL_GPIO_Init+0x142>
 80008ea:	2602      	movs	r6, #2
 80008ec:	e7d1      	b.n	8000892 <HAL_GPIO_Init+0x142>
 80008ee:	2603      	movs	r6, #3
 80008f0:	e7cf      	b.n	8000892 <HAL_GPIO_Init+0x142>
 80008f2:	2604      	movs	r6, #4
 80008f4:	e7cd      	b.n	8000892 <HAL_GPIO_Init+0x142>
 80008f6:	2605      	movs	r6, #5
 80008f8:	e7cb      	b.n	8000892 <HAL_GPIO_Init+0x142>
 80008fa:	2606      	movs	r6, #6
 80008fc:	e7c9      	b.n	8000892 <HAL_GPIO_Init+0x142>
 80008fe:	bf00      	nop
 8000900:	40013c00 	.word	0x40013c00
 8000904:	40020000 	.word	0x40020000
 8000908:	40023800 	.word	0x40023800
 800090c:	40021400 	.word	0x40021400

08000910 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000910:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000914:	4604      	mov	r4, r0
 8000916:	b908      	cbnz	r0, 800091c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000918:	2001      	movs	r0, #1
 800091a:	e03f      	b.n	800099c <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800091c:	6803      	ldr	r3, [r0, #0]
 800091e:	07dd      	lsls	r5, r3, #31
 8000920:	d410      	bmi.n	8000944 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000922:	6823      	ldr	r3, [r4, #0]
 8000924:	0798      	lsls	r0, r3, #30
 8000926:	d45a      	bmi.n	80009de <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000928:	6823      	ldr	r3, [r4, #0]
 800092a:	071a      	lsls	r2, r3, #28
 800092c:	f100 809c 	bmi.w	8000a68 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000930:	6823      	ldr	r3, [r4, #0]
 8000932:	075b      	lsls	r3, r3, #29
 8000934:	f100 80ba 	bmi.w	8000aac <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000938:	69a0      	ldr	r0, [r4, #24]
 800093a:	2800      	cmp	r0, #0
 800093c:	f040 811b 	bne.w	8000b76 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000940:	2000      	movs	r0, #0
 8000942:	e02b      	b.n	800099c <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000944:	4ba4      	ldr	r3, [pc, #656]	; (8000bd8 <HAL_RCC_OscConfig+0x2c8>)
 8000946:	689a      	ldr	r2, [r3, #8]
 8000948:	f002 020c 	and.w	r2, r2, #12
 800094c:	2a04      	cmp	r2, #4
 800094e:	d007      	beq.n	8000960 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000956:	2a08      	cmp	r2, #8
 8000958:	d10a      	bne.n	8000970 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	0259      	lsls	r1, r3, #9
 800095e:	d507      	bpl.n	8000970 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000960:	4b9d      	ldr	r3, [pc, #628]	; (8000bd8 <HAL_RCC_OscConfig+0x2c8>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	039a      	lsls	r2, r3, #14
 8000966:	d5dc      	bpl.n	8000922 <HAL_RCC_OscConfig+0x12>
 8000968:	6863      	ldr	r3, [r4, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d1d9      	bne.n	8000922 <HAL_RCC_OscConfig+0x12>
 800096e:	e7d3      	b.n	8000918 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000970:	6863      	ldr	r3, [r4, #4]
 8000972:	4d99      	ldr	r5, [pc, #612]	; (8000bd8 <HAL_RCC_OscConfig+0x2c8>)
 8000974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000978:	d113      	bne.n	80009a2 <HAL_RCC_OscConfig+0x92>
 800097a:	682b      	ldr	r3, [r5, #0]
 800097c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000980:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000982:	f7ff fe4f 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000986:	4d94      	ldr	r5, [pc, #592]	; (8000bd8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000988:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800098a:	682b      	ldr	r3, [r5, #0]
 800098c:	039b      	lsls	r3, r3, #14
 800098e:	d4c8      	bmi.n	8000922 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000990:	f7ff fe48 	bl	8000624 <HAL_GetTick>
 8000994:	1b80      	subs	r0, r0, r6
 8000996:	2864      	cmp	r0, #100	; 0x64
 8000998:	d9f7      	bls.n	800098a <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800099a:	2003      	movs	r0, #3
}
 800099c:	b002      	add	sp, #8
 800099e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009a6:	d104      	bne.n	80009b2 <HAL_RCC_OscConfig+0xa2>
 80009a8:	682b      	ldr	r3, [r5, #0]
 80009aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009ae:	602b      	str	r3, [r5, #0]
 80009b0:	e7e3      	b.n	800097a <HAL_RCC_OscConfig+0x6a>
 80009b2:	682a      	ldr	r2, [r5, #0]
 80009b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009b8:	602a      	str	r2, [r5, #0]
 80009ba:	682a      	ldr	r2, [r5, #0]
 80009bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80009c0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d1dd      	bne.n	8000982 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 80009c6:	f7ff fe2d 	bl	8000624 <HAL_GetTick>
 80009ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009cc:	682b      	ldr	r3, [r5, #0]
 80009ce:	039f      	lsls	r7, r3, #14
 80009d0:	d5a7      	bpl.n	8000922 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009d2:	f7ff fe27 	bl	8000624 <HAL_GetTick>
 80009d6:	1b80      	subs	r0, r0, r6
 80009d8:	2864      	cmp	r0, #100	; 0x64
 80009da:	d9f7      	bls.n	80009cc <HAL_RCC_OscConfig+0xbc>
 80009dc:	e7dd      	b.n	800099a <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009de:	4b7e      	ldr	r3, [pc, #504]	; (8000bd8 <HAL_RCC_OscConfig+0x2c8>)
 80009e0:	689a      	ldr	r2, [r3, #8]
 80009e2:	f012 0f0c 	tst.w	r2, #12
 80009e6:	d007      	beq.n	80009f8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009e8:	689a      	ldr	r2, [r3, #8]
 80009ea:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009ee:	2a08      	cmp	r2, #8
 80009f0:	d111      	bne.n	8000a16 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	025e      	lsls	r6, r3, #9
 80009f6:	d40e      	bmi.n	8000a16 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009f8:	4b77      	ldr	r3, [pc, #476]	; (8000bd8 <HAL_RCC_OscConfig+0x2c8>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	0795      	lsls	r5, r2, #30
 80009fe:	d502      	bpl.n	8000a06 <HAL_RCC_OscConfig+0xf6>
 8000a00:	68e2      	ldr	r2, [r4, #12]
 8000a02:	2a01      	cmp	r2, #1
 8000a04:	d188      	bne.n	8000918 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	6921      	ldr	r1, [r4, #16]
 8000a0a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000a0e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000a12:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a14:	e788      	b.n	8000928 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a16:	68e2      	ldr	r2, [r4, #12]
 8000a18:	4b70      	ldr	r3, [pc, #448]	; (8000bdc <HAL_RCC_OscConfig+0x2cc>)
 8000a1a:	b1b2      	cbz	r2, 8000a4a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a20:	f7ff fe00 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a24:	4d6c      	ldr	r5, [pc, #432]	; (8000bd8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000a26:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a28:	682b      	ldr	r3, [r5, #0]
 8000a2a:	0798      	lsls	r0, r3, #30
 8000a2c:	d507      	bpl.n	8000a3e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a2e:	682b      	ldr	r3, [r5, #0]
 8000a30:	6922      	ldr	r2, [r4, #16]
 8000a32:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a36:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a3a:	602b      	str	r3, [r5, #0]
 8000a3c:	e774      	b.n	8000928 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a3e:	f7ff fdf1 	bl	8000624 <HAL_GetTick>
 8000a42:	1b80      	subs	r0, r0, r6
 8000a44:	2802      	cmp	r0, #2
 8000a46:	d9ef      	bls.n	8000a28 <HAL_RCC_OscConfig+0x118>
 8000a48:	e7a7      	b.n	800099a <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000a4a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a4c:	f7ff fdea 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a50:	4d61      	ldr	r5, [pc, #388]	; (8000bd8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000a52:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a54:	682b      	ldr	r3, [r5, #0]
 8000a56:	0799      	lsls	r1, r3, #30
 8000a58:	f57f af66 	bpl.w	8000928 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a5c:	f7ff fde2 	bl	8000624 <HAL_GetTick>
 8000a60:	1b80      	subs	r0, r0, r6
 8000a62:	2802      	cmp	r0, #2
 8000a64:	d9f6      	bls.n	8000a54 <HAL_RCC_OscConfig+0x144>
 8000a66:	e798      	b.n	800099a <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a68:	6962      	ldr	r2, [r4, #20]
 8000a6a:	4b5d      	ldr	r3, [pc, #372]	; (8000be0 <HAL_RCC_OscConfig+0x2d0>)
 8000a6c:	b17a      	cbz	r2, 8000a8e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a6e:	2201      	movs	r2, #1
 8000a70:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a72:	f7ff fdd7 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a76:	4d58      	ldr	r5, [pc, #352]	; (8000bd8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a78:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a7a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a7c:	079f      	lsls	r7, r3, #30
 8000a7e:	f53f af57 	bmi.w	8000930 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a82:	f7ff fdcf 	bl	8000624 <HAL_GetTick>
 8000a86:	1b80      	subs	r0, r0, r6
 8000a88:	2802      	cmp	r0, #2
 8000a8a:	d9f6      	bls.n	8000a7a <HAL_RCC_OscConfig+0x16a>
 8000a8c:	e785      	b.n	800099a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000a8e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a90:	f7ff fdc8 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a94:	4d50      	ldr	r5, [pc, #320]	; (8000bd8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a96:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a98:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a9a:	0798      	lsls	r0, r3, #30
 8000a9c:	f57f af48 	bpl.w	8000930 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000aa0:	f7ff fdc0 	bl	8000624 <HAL_GetTick>
 8000aa4:	1b80      	subs	r0, r0, r6
 8000aa6:	2802      	cmp	r0, #2
 8000aa8:	d9f6      	bls.n	8000a98 <HAL_RCC_OscConfig+0x188>
 8000aaa:	e776      	b.n	800099a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000aac:	4b4a      	ldr	r3, [pc, #296]	; (8000bd8 <HAL_RCC_OscConfig+0x2c8>)
 8000aae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ab0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000ab4:	d128      	bne.n	8000b08 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	9201      	str	r2, [sp, #4]
 8000ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000abe:	641a      	str	r2, [r3, #64]	; 0x40
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	9301      	str	r3, [sp, #4]
 8000ac8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000aca:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000acc:	4d45      	ldr	r5, [pc, #276]	; (8000be4 <HAL_RCC_OscConfig+0x2d4>)
 8000ace:	682b      	ldr	r3, [r5, #0]
 8000ad0:	05d9      	lsls	r1, r3, #23
 8000ad2:	d51b      	bpl.n	8000b0c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ad4:	68a3      	ldr	r3, [r4, #8]
 8000ad6:	4d40      	ldr	r5, [pc, #256]	; (8000bd8 <HAL_RCC_OscConfig+0x2c8>)
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d127      	bne.n	8000b2c <HAL_RCC_OscConfig+0x21c>
 8000adc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000ae4:	f7ff fd9e 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ae8:	4d3b      	ldr	r5, [pc, #236]	; (8000bd8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000aea:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aec:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000af0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000af2:	079b      	lsls	r3, r3, #30
 8000af4:	d539      	bpl.n	8000b6a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	f43f af1e 	beq.w	8000938 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000afc:	4a36      	ldr	r2, [pc, #216]	; (8000bd8 <HAL_RCC_OscConfig+0x2c8>)
 8000afe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	e717      	b.n	8000938 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000b08:	2600      	movs	r6, #0
 8000b0a:	e7df      	b.n	8000acc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b0c:	682b      	ldr	r3, [r5, #0]
 8000b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b12:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000b14:	f7ff fd86 	bl	8000624 <HAL_GetTick>
 8000b18:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b1a:	682b      	ldr	r3, [r5, #0]
 8000b1c:	05da      	lsls	r2, r3, #23
 8000b1e:	d4d9      	bmi.n	8000ad4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b20:	f7ff fd80 	bl	8000624 <HAL_GetTick>
 8000b24:	1bc0      	subs	r0, r0, r7
 8000b26:	2802      	cmp	r0, #2
 8000b28:	d9f7      	bls.n	8000b1a <HAL_RCC_OscConfig+0x20a>
 8000b2a:	e736      	b.n	800099a <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b2c:	2b05      	cmp	r3, #5
 8000b2e:	d104      	bne.n	8000b3a <HAL_RCC_OscConfig+0x22a>
 8000b30:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b32:	f043 0304 	orr.w	r3, r3, #4
 8000b36:	672b      	str	r3, [r5, #112]	; 0x70
 8000b38:	e7d0      	b.n	8000adc <HAL_RCC_OscConfig+0x1cc>
 8000b3a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b3c:	f022 0201 	bic.w	r2, r2, #1
 8000b40:	672a      	str	r2, [r5, #112]	; 0x70
 8000b42:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b44:	f022 0204 	bic.w	r2, r2, #4
 8000b48:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d1ca      	bne.n	8000ae4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b4e:	f7ff fd69 	bl	8000624 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b52:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b56:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b58:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b5a:	0798      	lsls	r0, r3, #30
 8000b5c:	d5cb      	bpl.n	8000af6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b5e:	f7ff fd61 	bl	8000624 <HAL_GetTick>
 8000b62:	1bc0      	subs	r0, r0, r7
 8000b64:	4540      	cmp	r0, r8
 8000b66:	d9f7      	bls.n	8000b58 <HAL_RCC_OscConfig+0x248>
 8000b68:	e717      	b.n	800099a <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b6a:	f7ff fd5b 	bl	8000624 <HAL_GetTick>
 8000b6e:	1bc0      	subs	r0, r0, r7
 8000b70:	4540      	cmp	r0, r8
 8000b72:	d9bd      	bls.n	8000af0 <HAL_RCC_OscConfig+0x1e0>
 8000b74:	e711      	b.n	800099a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b76:	4d18      	ldr	r5, [pc, #96]	; (8000bd8 <HAL_RCC_OscConfig+0x2c8>)
 8000b78:	68ab      	ldr	r3, [r5, #8]
 8000b7a:	f003 030c 	and.w	r3, r3, #12
 8000b7e:	2b08      	cmp	r3, #8
 8000b80:	d047      	beq.n	8000c12 <HAL_RCC_OscConfig+0x302>
 8000b82:	4e19      	ldr	r6, [pc, #100]	; (8000be8 <HAL_RCC_OscConfig+0x2d8>)
 8000b84:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b86:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000b88:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b8a:	d135      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b8c:	f7ff fd4a 	bl	8000624 <HAL_GetTick>
 8000b90:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b92:	682b      	ldr	r3, [r5, #0]
 8000b94:	0199      	lsls	r1, r3, #6
 8000b96:	d429      	bmi.n	8000bec <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b98:	6a22      	ldr	r2, [r4, #32]
 8000b9a:	69e3      	ldr	r3, [r4, #28]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ba0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ba4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ba6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000baa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bac:	4c0a      	ldr	r4, [pc, #40]	; (8000bd8 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000bae:	0852      	lsrs	r2, r2, #1
 8000bb0:	3a01      	subs	r2, #1
 8000bb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bb8:	2301      	movs	r3, #1
 8000bba:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000bbc:	f7ff fd32 	bl	8000624 <HAL_GetTick>
 8000bc0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bc2:	6823      	ldr	r3, [r4, #0]
 8000bc4:	019a      	lsls	r2, r3, #6
 8000bc6:	f53f aebb 	bmi.w	8000940 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bca:	f7ff fd2b 	bl	8000624 <HAL_GetTick>
 8000bce:	1b40      	subs	r0, r0, r5
 8000bd0:	2802      	cmp	r0, #2
 8000bd2:	d9f6      	bls.n	8000bc2 <HAL_RCC_OscConfig+0x2b2>
 8000bd4:	e6e1      	b.n	800099a <HAL_RCC_OscConfig+0x8a>
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	42470000 	.word	0x42470000
 8000be0:	42470e80 	.word	0x42470e80
 8000be4:	40007000 	.word	0x40007000
 8000be8:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bec:	f7ff fd1a 	bl	8000624 <HAL_GetTick>
 8000bf0:	1bc0      	subs	r0, r0, r7
 8000bf2:	2802      	cmp	r0, #2
 8000bf4:	d9cd      	bls.n	8000b92 <HAL_RCC_OscConfig+0x282>
 8000bf6:	e6d0      	b.n	800099a <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000bf8:	f7ff fd14 	bl	8000624 <HAL_GetTick>
 8000bfc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bfe:	682b      	ldr	r3, [r5, #0]
 8000c00:	019b      	lsls	r3, r3, #6
 8000c02:	f57f ae9d 	bpl.w	8000940 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c06:	f7ff fd0d 	bl	8000624 <HAL_GetTick>
 8000c0a:	1b00      	subs	r0, r0, r4
 8000c0c:	2802      	cmp	r0, #2
 8000c0e:	d9f6      	bls.n	8000bfe <HAL_RCC_OscConfig+0x2ee>
 8000c10:	e6c3      	b.n	800099a <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c12:	2801      	cmp	r0, #1
 8000c14:	f43f aec2 	beq.w	800099c <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8000c18:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c1a:	69e3      	ldr	r3, [r4, #28]
 8000c1c:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000c20:	429a      	cmp	r2, r3
 8000c22:	f47f ae79 	bne.w	8000918 <HAL_RCC_OscConfig+0x8>
 8000c26:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000c28:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	f47f ae73 	bne.w	8000918 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000c32:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000c38:	4003      	ands	r3, r0
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	f47f ae6c 	bne.w	8000918 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000c40:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000c42:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000c46:	4293      	cmp	r3, r2
 8000c48:	f47f ae66 	bne.w	8000918 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000c4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000c4e:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000c52:	1ac0      	subs	r0, r0, r3
 8000c54:	bf18      	it	ne
 8000c56:	2001      	movne	r0, #1
 8000c58:	e6a0      	b.n	800099c <HAL_RCC_OscConfig+0x8c>
 8000c5a:	bf00      	nop

08000c5c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c5c:	4913      	ldr	r1, [pc, #76]	; (8000cac <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000c5e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c60:	688b      	ldr	r3, [r1, #8]
 8000c62:	f003 030c 	and.w	r3, r3, #12
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	d003      	beq.n	8000c72 <HAL_RCC_GetSysClockFreq+0x16>
 8000c6a:	2b08      	cmp	r3, #8
 8000c6c:	d003      	beq.n	8000c76 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c6e:	4810      	ldr	r0, [pc, #64]	; (8000cb0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c70:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c72:	4810      	ldr	r0, [pc, #64]	; (8000cb4 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c74:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c76:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c78:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c7a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c7c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c80:	bf14      	ite	ne
 8000c82:	480c      	ldrne	r0, [pc, #48]	; (8000cb4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c84:	480a      	ldreq	r0, [pc, #40]	; (8000cb0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c86:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c8a:	bf18      	it	ne
 8000c8c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c8e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c92:	fba1 0100 	umull	r0, r1, r1, r0
 8000c96:	f7ff faf3 	bl	8000280 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <HAL_RCC_GetSysClockFreq+0x50>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000ca6:	fbb0 f0f3 	udiv	r0, r0, r3
 8000caa:	bd08      	pop	{r3, pc}
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	00f42400 	.word	0x00f42400
 8000cb4:	007a1200 	.word	0x007a1200

08000cb8 <HAL_RCC_ClockConfig>:
{
 8000cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cbc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	b910      	cbnz	r0, 8000cc8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000cc8:	4b44      	ldr	r3, [pc, #272]	; (8000ddc <HAL_RCC_ClockConfig+0x124>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	f002 020f 	and.w	r2, r2, #15
 8000cd0:	428a      	cmp	r2, r1
 8000cd2:	d329      	bcc.n	8000d28 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cd4:	6821      	ldr	r1, [r4, #0]
 8000cd6:	078f      	lsls	r7, r1, #30
 8000cd8:	d42e      	bmi.n	8000d38 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cda:	07c8      	lsls	r0, r1, #31
 8000cdc:	d441      	bmi.n	8000d62 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000cde:	4b3f      	ldr	r3, [pc, #252]	; (8000ddc <HAL_RCC_ClockConfig+0x124>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	f002 020f 	and.w	r2, r2, #15
 8000ce6:	4295      	cmp	r5, r2
 8000ce8:	d367      	bcc.n	8000dba <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cea:	6822      	ldr	r2, [r4, #0]
 8000cec:	0751      	lsls	r1, r2, #29
 8000cee:	d46d      	bmi.n	8000dcc <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cf0:	0713      	lsls	r3, r2, #28
 8000cf2:	d507      	bpl.n	8000d04 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000cf4:	4a3a      	ldr	r2, [pc, #232]	; (8000de0 <HAL_RCC_ClockConfig+0x128>)
 8000cf6:	6921      	ldr	r1, [r4, #16]
 8000cf8:	6893      	ldr	r3, [r2, #8]
 8000cfa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000cfe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d02:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d04:	f7ff ffaa 	bl	8000c5c <HAL_RCC_GetSysClockFreq>
 8000d08:	4b35      	ldr	r3, [pc, #212]	; (8000de0 <HAL_RCC_ClockConfig+0x128>)
 8000d0a:	4a36      	ldr	r2, [pc, #216]	; (8000de4 <HAL_RCC_ClockConfig+0x12c>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d12:	5cd3      	ldrb	r3, [r2, r3]
 8000d14:	40d8      	lsrs	r0, r3
 8000d16:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <HAL_RCC_ClockConfig+0x130>)
 8000d18:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000d1a:	4b34      	ldr	r3, [pc, #208]	; (8000dec <HAL_RCC_ClockConfig+0x134>)
 8000d1c:	6818      	ldr	r0, [r3, #0]
 8000d1e:	f7ff fc37 	bl	8000590 <HAL_InitTick>
  return HAL_OK;
 8000d22:	2000      	movs	r0, #0
 8000d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d28:	b2ca      	uxtb	r2, r1
 8000d2a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d1c5      	bne.n	8000cc2 <HAL_RCC_ClockConfig+0xa>
 8000d36:	e7cd      	b.n	8000cd4 <HAL_RCC_ClockConfig+0x1c>
 8000d38:	4b29      	ldr	r3, [pc, #164]	; (8000de0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d3a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d3e:	bf1e      	ittt	ne
 8000d40:	689a      	ldrne	r2, [r3, #8]
 8000d42:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000d46:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d48:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d4a:	bf42      	ittt	mi
 8000d4c:	689a      	ldrmi	r2, [r3, #8]
 8000d4e:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000d52:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	68a0      	ldr	r0, [r4, #8]
 8000d58:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d5c:	4302      	orrs	r2, r0
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	e7bb      	b.n	8000cda <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d62:	6862      	ldr	r2, [r4, #4]
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <HAL_RCC_ClockConfig+0x128>)
 8000d66:	2a01      	cmp	r2, #1
 8000d68:	d11d      	bne.n	8000da6 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d70:	d0a7      	beq.n	8000cc2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d72:	4e1b      	ldr	r6, [pc, #108]	; (8000de0 <HAL_RCC_ClockConfig+0x128>)
 8000d74:	68b3      	ldr	r3, [r6, #8]
 8000d76:	f023 0303 	bic.w	r3, r3, #3
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d7e:	f7ff fc51 	bl	8000624 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d82:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d86:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d88:	68b3      	ldr	r3, [r6, #8]
 8000d8a:	6862      	ldr	r2, [r4, #4]
 8000d8c:	f003 030c 	and.w	r3, r3, #12
 8000d90:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d94:	d0a3      	beq.n	8000cde <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d96:	f7ff fc45 	bl	8000624 <HAL_GetTick>
 8000d9a:	1bc0      	subs	r0, r0, r7
 8000d9c:	4540      	cmp	r0, r8
 8000d9e:	d9f3      	bls.n	8000d88 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000da0:	2003      	movs	r0, #3
}
 8000da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000da6:	1e91      	subs	r1, r2, #2
 8000da8:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000daa:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000dac:	d802      	bhi.n	8000db4 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000db2:	e7dd      	b.n	8000d70 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db4:	f013 0f02 	tst.w	r3, #2
 8000db8:	e7da      	b.n	8000d70 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dba:	b2ea      	uxtb	r2, r5
 8000dbc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 030f 	and.w	r3, r3, #15
 8000dc4:	429d      	cmp	r5, r3
 8000dc6:	f47f af7c 	bne.w	8000cc2 <HAL_RCC_ClockConfig+0xa>
 8000dca:	e78e      	b.n	8000cea <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dcc:	4904      	ldr	r1, [pc, #16]	; (8000de0 <HAL_RCC_ClockConfig+0x128>)
 8000dce:	68e0      	ldr	r0, [r4, #12]
 8000dd0:	688b      	ldr	r3, [r1, #8]
 8000dd2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	608b      	str	r3, [r1, #8]
 8000dda:	e789      	b.n	8000cf0 <HAL_RCC_ClockConfig+0x38>
 8000ddc:	40023c00 	.word	0x40023c00
 8000de0:	40023800 	.word	0x40023800
 8000de4:	0800257f 	.word	0x0800257f
 8000de8:	20000028 	.word	0x20000028
 8000dec:	20000004 	.word	0x20000004

08000df0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000dfa:	5cd3      	ldrb	r3, [r2, r3]
 8000dfc:	4a03      	ldr	r2, [pc, #12]	; (8000e0c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000dfe:	6810      	ldr	r0, [r2, #0]
}
 8000e00:	40d8      	lsrs	r0, r3
 8000e02:	4770      	bx	lr
 8000e04:	40023800 	.word	0x40023800
 8000e08:	0800258f 	.word	0x0800258f
 8000e0c:	20000028 	.word	0x20000028

08000e10 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000e12:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000e1a:	5cd3      	ldrb	r3, [r2, r3]
 8000e1c:	4a03      	ldr	r2, [pc, #12]	; (8000e2c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e1e:	6810      	ldr	r0, [r2, #0]
}
 8000e20:	40d8      	lsrs	r0, r3
 8000e22:	4770      	bx	lr
 8000e24:	40023800 	.word	0x40023800
 8000e28:	0800258f 	.word	0x0800258f
 8000e2c:	20000028 	.word	0x20000028

08000e30 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000e30:	6803      	ldr	r3, [r0, #0]
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000e38:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000e3a:	695a      	ldr	r2, [r3, #20]
 8000e3c:	f022 0201 	bic.w	r2, r2, #1
 8000e40:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000e42:	2320      	movs	r3, #32
 8000e44:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000e48:	4770      	bx	lr
	...

08000e4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000e4c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e4e:	6803      	ldr	r3, [r0, #0]
 8000e50:	68c1      	ldr	r1, [r0, #12]
 8000e52:	691a      	ldr	r2, [r3, #16]
{
 8000e54:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e56:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e5e:	6925      	ldr	r5, [r4, #16]
 8000e60:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8000e62:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e64:	69c0      	ldr	r0, [r0, #28]
 8000e66:	432a      	orrs	r2, r5
 8000e68:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000e6a:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e6e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8000e70:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e74:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8000e76:	430a      	orrs	r2, r1
 8000e78:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000e7a:	695a      	ldr	r2, [r3, #20]
 8000e7c:	69a1      	ldr	r1, [r4, #24]
 8000e7e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000e82:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e84:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000e88:	615a      	str	r2, [r3, #20]
 8000e8a:	4a25      	ldr	r2, [pc, #148]	; (8000f20 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e8c:	d129      	bne.n	8000ee2 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d003      	beq.n	8000e9a <UART_SetConfig+0x4e>
 8000e92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d120      	bne.n	8000edc <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000e9a:	f7ff ffb9 	bl	8000e10 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000e9e:	6862      	ldr	r2, [r4, #4]
 8000ea0:	6825      	ldr	r5, [r4, #0]
 8000ea2:	1892      	adds	r2, r2, r2
 8000ea4:	f04f 0300 	mov.w	r3, #0
 8000ea8:	f04f 0119 	mov.w	r1, #25
 8000eac:	415b      	adcs	r3, r3
 8000eae:	fba0 0101 	umull	r0, r1, r0, r1
 8000eb2:	f7ff f9e5 	bl	8000280 <__aeabi_uldivmod>
 8000eb6:	2164      	movs	r1, #100	; 0x64
 8000eb8:	fbb0 f4f1 	udiv	r4, r0, r1
 8000ebc:	fb01 0314 	mls	r3, r1, r4, r0
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	3332      	adds	r3, #50	; 0x32
 8000ec4:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec8:	f003 0207 	and.w	r2, r3, #7
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8000ed2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000ed6:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000ed8:	60ab      	str	r3, [r5, #8]
 8000eda:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8000edc:	f7ff ff88 	bl	8000df0 <HAL_RCC_GetPCLK1Freq>
 8000ee0:	e7dd      	b.n	8000e9e <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d002      	beq.n	8000eec <UART_SetConfig+0xa0>
 8000ee6:	4a0f      	ldr	r2, [pc, #60]	; (8000f24 <UART_SetConfig+0xd8>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d116      	bne.n	8000f1a <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8000eec:	f7ff ff90 	bl	8000e10 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000ef0:	6863      	ldr	r3, [r4, #4]
 8000ef2:	6825      	ldr	r5, [r4, #0]
 8000ef4:	2119      	movs	r1, #25
 8000ef6:	009a      	lsls	r2, r3, #2
 8000ef8:	fba0 0101 	umull	r0, r1, r0, r1
 8000efc:	0f9b      	lsrs	r3, r3, #30
 8000efe:	f7ff f9bf 	bl	8000280 <__aeabi_uldivmod>
 8000f02:	2264      	movs	r2, #100	; 0x64
 8000f04:	fbb0 f1f2 	udiv	r1, r0, r2
 8000f08:	fb02 0311 	mls	r3, r2, r1, r0
 8000f0c:	011b      	lsls	r3, r3, #4
 8000f0e:	3332      	adds	r3, #50	; 0x32
 8000f10:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f14:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8000f18:	e7de      	b.n	8000ed8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8000f1a:	f7ff ff69 	bl	8000df0 <HAL_RCC_GetPCLK1Freq>
 8000f1e:	e7e7      	b.n	8000ef0 <UART_SetConfig+0xa4>
 8000f20:	40011000 	.word	0x40011000
 8000f24:	40011400 	.word	0x40011400

08000f28 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	460e      	mov	r6, r1
 8000f2e:	4617      	mov	r7, r2
 8000f30:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000f32:	6821      	ldr	r1, [r4, #0]
 8000f34:	680b      	ldr	r3, [r1, #0]
 8000f36:	ea36 0303 	bics.w	r3, r6, r3
 8000f3a:	d101      	bne.n	8000f40 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000f3c:	2000      	movs	r0, #0
}
 8000f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000f40:	1c6b      	adds	r3, r5, #1
 8000f42:	d0f7      	beq.n	8000f34 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f44:	b995      	cbnz	r5, 8000f6c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000f46:	6823      	ldr	r3, [r4, #0]
 8000f48:	68da      	ldr	r2, [r3, #12]
 8000f4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000f4e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f50:	695a      	ldr	r2, [r3, #20]
 8000f52:	f022 0201 	bic.w	r2, r2, #1
 8000f56:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000f58:	2320      	movs	r3, #32
 8000f5a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000f5e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000f62:	2300      	movs	r3, #0
 8000f64:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000f68:	2003      	movs	r0, #3
 8000f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f6c:	f7ff fb5a 	bl	8000624 <HAL_GetTick>
 8000f70:	1bc0      	subs	r0, r0, r7
 8000f72:	4285      	cmp	r5, r0
 8000f74:	d2dd      	bcs.n	8000f32 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000f76:	e7e6      	b.n	8000f46 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000f78 <HAL_UART_Init>:
{
 8000f78:	b510      	push	{r4, lr}
  if (huart == NULL)
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	b340      	cbz	r0, 8000fd0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8000f7e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f82:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f86:	b91b      	cbnz	r3, 8000f90 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000f88:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000f8c:	f000 fc38 	bl	8001800 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8000f90:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000f92:	2324      	movs	r3, #36	; 0x24
 8000f94:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000f98:	68d3      	ldr	r3, [r2, #12]
 8000f9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f9e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	f7ff ff53 	bl	8000e4c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fa6:	6823      	ldr	r3, [r4, #0]
 8000fa8:	691a      	ldr	r2, [r3, #16]
 8000faa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000fae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000fb0:	695a      	ldr	r2, [r3, #20]
 8000fb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000fb6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000fb8:	68da      	ldr	r2, [r3, #12]
 8000fba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000fbe:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fc0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8000fc2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fc4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000fc6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000fca:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000fce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fd0:	2001      	movs	r0, #1
}
 8000fd2:	bd10      	pop	{r4, pc}

08000fd4 <HAL_UART_Transmit>:
{
 8000fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fd8:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8000fda:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000fde:	2b20      	cmp	r3, #32
{
 8000fe0:	4604      	mov	r4, r0
 8000fe2:	460d      	mov	r5, r1
 8000fe4:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8000fe6:	d151      	bne.n	800108c <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8000fe8:	2900      	cmp	r1, #0
 8000fea:	d04c      	beq.n	8001086 <HAL_UART_Transmit+0xb2>
 8000fec:	2a00      	cmp	r2, #0
 8000fee:	d04a      	beq.n	8001086 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8000ff0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d049      	beq.n	800108c <HAL_UART_Transmit+0xb8>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ffe:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001002:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001004:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001008:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800100c:	f7ff fb0a 	bl	8000624 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001010:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001014:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001016:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 800101a:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 800101e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001020:	b29b      	uxth	r3, r3
 8001022:	b95b      	cbnz	r3, 800103c <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	4632      	mov	r2, r6
 8001028:	2140      	movs	r1, #64	; 0x40
 800102a:	4620      	mov	r0, r4
 800102c:	f7ff ff7c 	bl	8000f28 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001030:	b9a0      	cbnz	r0, 800105c <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 8001032:	2320      	movs	r3, #32
 8001034:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 800103c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800103e:	3b01      	subs	r3, #1
 8001040:	b29b      	uxth	r3, r3
 8001042:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001044:	68a3      	ldr	r3, [r4, #8]
 8001046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800104a:	4632      	mov	r2, r6
 800104c:	463b      	mov	r3, r7
 800104e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001052:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001054:	d10e      	bne.n	8001074 <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001056:	f7ff ff67 	bl	8000f28 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800105a:	b110      	cbz	r0, 8001062 <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 800105c:	2003      	movs	r0, #3
 800105e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001062:	882b      	ldrh	r3, [r5, #0]
 8001064:	6822      	ldr	r2, [r4, #0]
 8001066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800106a:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800106c:	6923      	ldr	r3, [r4, #16]
 800106e:	b943      	cbnz	r3, 8001082 <HAL_UART_Transmit+0xae>
          pData += 2U;
 8001070:	3502      	adds	r5, #2
 8001072:	e7d4      	b.n	800101e <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001074:	f7ff ff58 	bl	8000f28 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001078:	2800      	cmp	r0, #0
 800107a:	d1ef      	bne.n	800105c <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800107c:	6823      	ldr	r3, [r4, #0]
 800107e:	782a      	ldrb	r2, [r5, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	3501      	adds	r5, #1
 8001084:	e7cb      	b.n	800101e <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 8001086:	2001      	movs	r0, #1
 8001088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800108c:	2002      	movs	r0, #2
}
 800108e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001092 <HAL_UART_TxCpltCallback>:
 8001092:	4770      	bx	lr

08001094 <HAL_UART_RxCpltCallback>:
 8001094:	4770      	bx	lr

08001096 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001096:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800109a:	2b22      	cmp	r3, #34	; 0x22
{
 800109c:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800109e:	d136      	bne.n	800110e <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010a0:	6883      	ldr	r3, [r0, #8]
 80010a2:	6901      	ldr	r1, [r0, #16]
 80010a4:	6802      	ldr	r2, [r0, #0]
 80010a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80010ac:	d123      	bne.n	80010f6 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80010ae:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80010b0:	b9e9      	cbnz	r1, 80010ee <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80010b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010b6:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80010ba:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80010bc:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80010be:	3c01      	subs	r4, #1
 80010c0:	b2a4      	uxth	r4, r4
 80010c2:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80010c4:	b98c      	cbnz	r4, 80010ea <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80010c6:	6803      	ldr	r3, [r0, #0]
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	f022 0220 	bic.w	r2, r2, #32
 80010ce:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010d6:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80010d8:	695a      	ldr	r2, [r3, #20]
 80010da:	f022 0201 	bic.w	r2, r2, #1
 80010de:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80010e0:	2320      	movs	r3, #32
 80010e2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80010e6:	f7ff ffd5 	bl	8001094 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 80010ea:	2000      	movs	r0, #0
}
 80010ec:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	f823 2b01 	strh.w	r2, [r3], #1
 80010f4:	e7e1      	b.n	80010ba <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80010f6:	b921      	cbnz	r1, 8001102 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80010f8:	1c59      	adds	r1, r3, #1
 80010fa:	6852      	ldr	r2, [r2, #4]
 80010fc:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80010fe:	701a      	strb	r2, [r3, #0]
 8001100:	e7dc      	b.n	80010bc <UART_Receive_IT+0x26>
 8001102:	6852      	ldr	r2, [r2, #4]
 8001104:	1c59      	adds	r1, r3, #1
 8001106:	6281      	str	r1, [r0, #40]	; 0x28
 8001108:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800110c:	e7f7      	b.n	80010fe <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800110e:	2002      	movs	r0, #2
 8001110:	bd10      	pop	{r4, pc}

08001112 <HAL_UART_ErrorCallback>:
 8001112:	4770      	bx	lr

08001114 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001114:	6803      	ldr	r3, [r0, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001118:	68d9      	ldr	r1, [r3, #12]
{
 800111a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 800111c:	0716      	lsls	r6, r2, #28
{
 800111e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001120:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8001122:	d107      	bne.n	8001134 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001124:	0696      	lsls	r6, r2, #26
 8001126:	d55c      	bpl.n	80011e2 <HAL_UART_IRQHandler+0xce>
 8001128:	068d      	lsls	r5, r1, #26
 800112a:	d55a      	bpl.n	80011e2 <HAL_UART_IRQHandler+0xce>
}
 800112c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001130:	f7ff bfb1 	b.w	8001096 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001134:	f015 0501 	ands.w	r5, r5, #1
 8001138:	d102      	bne.n	8001140 <HAL_UART_IRQHandler+0x2c>
 800113a:	f411 7f90 	tst.w	r1, #288	; 0x120
 800113e:	d050      	beq.n	80011e2 <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001140:	07d0      	lsls	r0, r2, #31
 8001142:	d505      	bpl.n	8001150 <HAL_UART_IRQHandler+0x3c>
 8001144:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001146:	bf42      	ittt	mi
 8001148:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800114a:	f043 0301 	orrmi.w	r3, r3, #1
 800114e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001150:	0756      	lsls	r6, r2, #29
 8001152:	d504      	bpl.n	800115e <HAL_UART_IRQHandler+0x4a>
 8001154:	b11d      	cbz	r5, 800115e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001156:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800115e:	0790      	lsls	r0, r2, #30
 8001160:	d504      	bpl.n	800116c <HAL_UART_IRQHandler+0x58>
 8001162:	b11d      	cbz	r5, 800116c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001164:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001166:	f043 0304 	orr.w	r3, r3, #4
 800116a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800116c:	0713      	lsls	r3, r2, #28
 800116e:	d506      	bpl.n	800117e <HAL_UART_IRQHandler+0x6a>
 8001170:	068e      	lsls	r6, r1, #26
 8001172:	d400      	bmi.n	8001176 <HAL_UART_IRQHandler+0x62>
 8001174:	b11d      	cbz	r5, 800117e <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001176:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001178:	f043 0308 	orr.w	r3, r3, #8
 800117c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800117e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001180:	2b00      	cmp	r3, #0
 8001182:	d066      	beq.n	8001252 <HAL_UART_IRQHandler+0x13e>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001184:	0695      	lsls	r5, r2, #26
 8001186:	d504      	bpl.n	8001192 <HAL_UART_IRQHandler+0x7e>
 8001188:	0688      	lsls	r0, r1, #26
 800118a:	d502      	bpl.n	8001192 <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 800118c:	4620      	mov	r0, r4
 800118e:	f7ff ff82 	bl	8001096 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001192:	6823      	ldr	r3, [r4, #0]
 8001194:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001196:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001198:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 800119a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800119c:	d402      	bmi.n	80011a4 <HAL_UART_IRQHandler+0x90>
 800119e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80011a2:	d01a      	beq.n	80011da <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 80011a4:	f7ff fe44 	bl	8000e30 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	695a      	ldr	r2, [r3, #20]
 80011ac:	0652      	lsls	r2, r2, #25
 80011ae:	d510      	bpl.n	80011d2 <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80011b0:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80011b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80011b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011b8:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80011ba:	b150      	cbz	r0, 80011d2 <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80011bc:	4b25      	ldr	r3, [pc, #148]	; (8001254 <HAL_UART_IRQHandler+0x140>)
 80011be:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80011c0:	f7ff fab4 	bl	800072c <HAL_DMA_Abort_IT>
 80011c4:	2800      	cmp	r0, #0
 80011c6:	d044      	beq.n	8001252 <HAL_UART_IRQHandler+0x13e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80011c8:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80011ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80011ce:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80011d0:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80011d2:	4620      	mov	r0, r4
 80011d4:	f7ff ff9d 	bl	8001112 <HAL_UART_ErrorCallback>
 80011d8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80011da:	f7ff ff9a 	bl	8001112 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011de:	63e5      	str	r5, [r4, #60]	; 0x3c
 80011e0:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80011e2:	0616      	lsls	r6, r2, #24
 80011e4:	d527      	bpl.n	8001236 <HAL_UART_IRQHandler+0x122>
 80011e6:	060d      	lsls	r5, r1, #24
 80011e8:	d525      	bpl.n	8001236 <HAL_UART_IRQHandler+0x122>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80011ea:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80011ee:	2a21      	cmp	r2, #33	; 0x21
 80011f0:	d12f      	bne.n	8001252 <HAL_UART_IRQHandler+0x13e>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80011f2:	68a2      	ldr	r2, [r4, #8]
 80011f4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80011f8:	6a22      	ldr	r2, [r4, #32]
 80011fa:	d117      	bne.n	800122c <HAL_UART_IRQHandler+0x118>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80011fc:	8811      	ldrh	r1, [r2, #0]
 80011fe:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001202:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001204:	6921      	ldr	r1, [r4, #16]
 8001206:	b979      	cbnz	r1, 8001228 <HAL_UART_IRQHandler+0x114>
        huart->pTxBuffPtr += 2U;
 8001208:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800120a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800120c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800120e:	3a01      	subs	r2, #1
 8001210:	b292      	uxth	r2, r2
 8001212:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001214:	b9ea      	cbnz	r2, 8001252 <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001216:	68da      	ldr	r2, [r3, #12]
 8001218:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800121c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800121e:	68da      	ldr	r2, [r3, #12]
 8001220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001228:	3201      	adds	r2, #1
 800122a:	e7ee      	b.n	800120a <HAL_UART_IRQHandler+0xf6>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800122c:	1c51      	adds	r1, r2, #1
 800122e:	6221      	str	r1, [r4, #32]
 8001230:	7812      	ldrb	r2, [r2, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	e7ea      	b.n	800120c <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001236:	0650      	lsls	r0, r2, #25
 8001238:	d50b      	bpl.n	8001252 <HAL_UART_IRQHandler+0x13e>
 800123a:	064a      	lsls	r2, r1, #25
 800123c:	d509      	bpl.n	8001252 <HAL_UART_IRQHandler+0x13e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800123e:	68da      	ldr	r2, [r3, #12]
 8001240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001244:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001246:	2320      	movs	r3, #32
 8001248:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800124c:	4620      	mov	r0, r4
 800124e:	f7ff ff20 	bl	8001092 <HAL_UART_TxCpltCallback>
 8001252:	bd70      	pop	{r4, r5, r6, pc}
 8001254:	08001259 	.word	0x08001259

08001258 <UART_DMAAbortOnError>:
{
 8001258:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800125a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 800125c:	2300      	movs	r3, #0
 800125e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001260:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001262:	f7ff ff56 	bl	8001112 <HAL_UART_ErrorCallback>
 8001266:	bd08      	pop	{r3, pc}

08001268 <Clear_ESP_Buffer>:

		}

}

void Clear_ESP_Buffer(void){
 8001268:	2300      	movs	r3, #0

	uint16_t i;
	for(i= 0; i < ESP_Buffer_Boyutu; i++){
		Esp_Veri_Buffer[i] = 0;
 800126a:	4905      	ldr	r1, [pc, #20]	; (8001280 <Clear_ESP_Buffer+0x18>)
 800126c:	461a      	mov	r2, r3
 800126e:	545a      	strb	r2, [r3, r1]
 8001270:	3301      	adds	r3, #1
	for(i= 0; i < ESP_Buffer_Boyutu; i++){
 8001272:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001276:	d1fa      	bne.n	800126e <Clear_ESP_Buffer+0x6>
	}
	Sayac = 0;
 8001278:	4b02      	ldr	r3, [pc, #8]	; (8001284 <Clear_ESP_Buffer+0x1c>)
 800127a:	801a      	strh	r2, [r3, #0]
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000894 	.word	0x20000894
 8001284:	200000ae 	.word	0x200000ae

08001288 <SystemClock_Config>:
{
 8001288:	b530      	push	{r4, r5, lr}
 800128a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128c:	2230      	movs	r2, #48	; 0x30
 800128e:	2100      	movs	r1, #0
 8001290:	a808      	add	r0, sp, #32
 8001292:	f000 fbc5 	bl	8001a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001296:	2100      	movs	r1, #0
 8001298:	2214      	movs	r2, #20
 800129a:	a803      	add	r0, sp, #12
 800129c:	f000 fbc0 	bl	8001a20 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	2400      	movs	r4, #0
 80012a2:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <SystemClock_Config+0x8c>)
 80012a4:	9401      	str	r4, [sp, #4]
 80012a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <SystemClock_Config+0x90>)
 80012ba:	9402      	str	r4, [sp, #8]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012c6:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012cc:	9302      	str	r3, [sp, #8]
 80012ce:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d0:	2301      	movs	r3, #1
 80012d2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012d4:	2310      	movs	r3, #16
 80012d6:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012d8:	2308      	movs	r3, #8
 80012da:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012dc:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012de:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012e0:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e2:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012e4:	2304      	movs	r3, #4
 80012e6:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e8:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ea:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ec:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ee:	f7ff fb0f 	bl	8000910 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f2:	230f      	movs	r3, #15
 80012f4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012fa:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012fc:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001302:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001304:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001306:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001308:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800130a:	f7ff fcd5 	bl	8000cb8 <HAL_RCC_ClockConfig>
}
 800130e:	b015      	add	sp, #84	; 0x54
 8001310:	bd30      	pop	{r4, r5, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40007000 	.word	0x40007000

0800131c <main>:
{
 800131c:	b58f      	push	{r0, r1, r2, r3, r7, lr}
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800131e:	2400      	movs	r4, #0
  HAL_Init();
 8001320:	f7ff f95a 	bl	80005d8 <HAL_Init>
  SystemClock_Config();
 8001324:	f7ff ffb0 	bl	8001288 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001328:	4bac      	ldr	r3, [pc, #688]	; (80015dc <main+0x2c0>)
 800132a:	9401      	str	r4, [sp, #4]
 800132c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  huart2.Instance = USART2;
 800132e:	4dac      	ldr	r5, [pc, #688]	; (80015e0 <main+0x2c4>)
		if(strstr(Esp_Veri_Buffer,"GET")){
 8001330:	f8df 831c 	ldr.w	r8, [pc, #796]	; 8001650 <main+0x334>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001334:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001338:	631a      	str	r2, [r3, #48]	; 0x30
 800133a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800133c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001340:	9201      	str	r2, [sp, #4]
 8001342:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001344:	9402      	str	r4, [sp, #8]
 8001346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001348:	f042 0201 	orr.w	r2, r2, #1
 800134c:	631a      	str	r2, [r3, #48]	; 0x30
 800134e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001350:	f002 0201 	and.w	r2, r2, #1
 8001354:	9202      	str	r2, [sp, #8]
 8001356:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001358:	9403      	str	r4, [sp, #12]
 800135a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800135c:	f042 0202 	orr.w	r2, r2, #2
 8001360:	631a      	str	r2, [r3, #48]	; 0x30
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001364:	60ac      	str	r4, [r5, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	9303      	str	r3, [sp, #12]
 800136c:	9b03      	ldr	r3, [sp, #12]
  huart2.Init.BaudRate = 115200;
 800136e:	4b9d      	ldr	r3, [pc, #628]	; (80015e4 <main+0x2c8>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001370:	60ec      	str	r4, [r5, #12]
  huart2.Init.BaudRate = 115200;
 8001372:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001376:	260c      	movs	r6, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001378:	4628      	mov	r0, r5
  huart2.Init.BaudRate = 115200;
 800137a:	e885 0088 	stmia.w	r5, {r3, r7}
  huart2.Init.Parity = UART_PARITY_NONE;
 800137e:	612c      	str	r4, [r5, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001380:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001382:	61ec      	str	r4, [r5, #28]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001384:	616e      	str	r6, [r5, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001386:	f7ff fdf7 	bl	8000f78 <HAL_UART_Init>
  huart3.Instance = USART3;
 800138a:	4897      	ldr	r0, [pc, #604]	; (80015e8 <main+0x2cc>)
 800138c:	4b97      	ldr	r3, [pc, #604]	; (80015ec <main+0x2d0>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8001390:	e880 0088 	stmia.w	r0, {r3, r7}
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001394:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001396:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001398:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800139a:	61c4      	str	r4, [r0, #28]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800139c:	6146      	str	r6, [r0, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800139e:	f7ff fdeb 	bl	8000f78 <HAL_UART_Init>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80013a2:	682a      	ldr	r2, [r5, #0]
	switch(Case){
 80013a4:	4f92      	ldr	r7, [pc, #584]	; (80015f0 <main+0x2d4>)
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80013a6:	68d3      	ldr	r3, [r2, #12]
 80013a8:	f043 0320 	orr.w	r3, r3, #32
 80013ac:	60d3      	str	r3, [r2, #12]
 80013ae:	463c      	mov	r4, r7
	switch(Case){
 80013b0:	783b      	ldrb	r3, [r7, #0]
 80013b2:	2b0c      	cmp	r3, #12
 80013b4:	d8fd      	bhi.n	80013b2 <main+0x96>
 80013b6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80013ba:	000d      	.short	0x000d
 80013bc:	0044001f 	.word	0x0044001f
 80013c0:	007d0051 	.word	0x007d0051
 80013c4:	00cc0090 	.word	0x00cc0090
 80013c8:	014d00dd 	.word	0x014d00dd
 80013cc:	017a015e 	.word	0x017a015e
 80013d0:	01a7018b 	.word	0x01a7018b
		HAL_UART_Transmit(&huart2,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"AT\r\n"), 1000);
 80013d4:	4987      	ldr	r1, [pc, #540]	; (80015f4 <main+0x2d8>)
 80013d6:	4888      	ldr	r0, [pc, #544]	; (80015f8 <main+0x2dc>)
 80013d8:	f000 fb6b 	bl	8001ab2 <strcpy>
 80013dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e0:	2204      	movs	r2, #4
 80013e2:	4985      	ldr	r1, [pc, #532]	; (80015f8 <main+0x2dc>)
 80013e4:	487e      	ldr	r0, [pc, #504]	; (80015e0 <main+0x2c4>)
 80013e6:	f7ff fdf5 	bl	8000fd4 <HAL_UART_Transmit>
		Case = 1;
 80013ea:	2301      	movs	r3, #1
		Case = 3;
 80013ec:	7023      	strb	r3, [r4, #0]
		HAL_Delay(2000);
 80013ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013f2:	f7ff f91d 	bl	8000630 <HAL_Delay>
 80013f6:	e7db      	b.n	80013b0 <main+0x94>
		if(strstr(Esp_Veri_Buffer,"OK")){
 80013f8:	4980      	ldr	r1, [pc, #512]	; (80015fc <main+0x2e0>)
 80013fa:	4881      	ldr	r0, [pc, #516]	; (8001600 <main+0x2e4>)
 80013fc:	f000 fb61 	bl	8001ac2 <strstr>
 8001400:	4605      	mov	r5, r0
 8001402:	b178      	cbz	r0, 8001424 <main+0x108>
			Clear_ESP_Buffer();
 8001404:	f7ff ff30 	bl	8001268 <Clear_ESP_Buffer>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Module Erisildi!\r\n"), 1000);
 8001408:	497e      	ldr	r1, [pc, #504]	; (8001604 <main+0x2e8>)
 800140a:	487b      	ldr	r0, [pc, #492]	; (80015f8 <main+0x2dc>)
 800140c:	f000 fb51 	bl	8001ab2 <strcpy>
 8001410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001414:	2212      	movs	r2, #18
 8001416:	4978      	ldr	r1, [pc, #480]	; (80015f8 <main+0x2dc>)
 8001418:	4873      	ldr	r0, [pc, #460]	; (80015e8 <main+0x2cc>)
 800141a:	f7ff fddb 	bl	8000fd4 <HAL_UART_Transmit>
			Case = 2;
 800141e:	2302      	movs	r3, #2
			Case = 10;
 8001420:	7023      	strb	r3, [r4, #0]
 8001422:	e7c5      	b.n	80013b0 <main+0x94>
			Clear_ESP_Buffer();
 8001424:	f7ff ff20 	bl	8001268 <Clear_ESP_Buffer>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Module Erisilemedi!\r\n"), 1000);
 8001428:	4977      	ldr	r1, [pc, #476]	; (8001608 <main+0x2ec>)
 800142a:	4873      	ldr	r0, [pc, #460]	; (80015f8 <main+0x2dc>)
 800142c:	f000 fb41 	bl	8001ab2 <strcpy>
 8001430:	4971      	ldr	r1, [pc, #452]	; (80015f8 <main+0x2dc>)
 8001432:	486d      	ldr	r0, [pc, #436]	; (80015e8 <main+0x2cc>)
 8001434:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001438:	2215      	movs	r2, #21
			HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CWMODE=1\r\n"), 1000);
 800143a:	f7ff fdcb 	bl	8000fd4 <HAL_UART_Transmit>
			Case = 0;
 800143e:	7025      	strb	r5, [r4, #0]
 8001440:	e7b6      	b.n	80013b0 <main+0x94>
		HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CWMODE?\r\n"), 1000);
 8001442:	4972      	ldr	r1, [pc, #456]	; (800160c <main+0x2f0>)
 8001444:	486c      	ldr	r0, [pc, #432]	; (80015f8 <main+0x2dc>)
 8001446:	f000 fb34 	bl	8001ab2 <strcpy>
 800144a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144e:	220c      	movs	r2, #12
 8001450:	4969      	ldr	r1, [pc, #420]	; (80015f8 <main+0x2dc>)
 8001452:	4863      	ldr	r0, [pc, #396]	; (80015e0 <main+0x2c4>)
 8001454:	f7ff fdbe 	bl	8000fd4 <HAL_UART_Transmit>
		Case = 3;
 8001458:	2303      	movs	r3, #3
 800145a:	e7c7      	b.n	80013ec <main+0xd0>
		if(strstr(Esp_Veri_Buffer,"+CWMODE:1")){
 800145c:	496c      	ldr	r1, [pc, #432]	; (8001610 <main+0x2f4>)
 800145e:	4868      	ldr	r0, [pc, #416]	; (8001600 <main+0x2e4>)
 8001460:	f000 fb2f 	bl	8001ac2 <strstr>
 8001464:	4605      	mov	r5, r0
 8001466:	b170      	cbz	r0, 8001486 <main+0x16a>
			Clear_ESP_Buffer();
 8001468:	f7ff fefe 	bl	8001268 <Clear_ESP_Buffer>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Mod ayari dogru!\r\n"), 1000);
 800146c:	4969      	ldr	r1, [pc, #420]	; (8001614 <main+0x2f8>)
 800146e:	4862      	ldr	r0, [pc, #392]	; (80015f8 <main+0x2dc>)
 8001470:	f000 fb1f 	bl	8001ab2 <strcpy>
 8001474:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001478:	2212      	movs	r2, #18
 800147a:	495f      	ldr	r1, [pc, #380]	; (80015f8 <main+0x2dc>)
 800147c:	485a      	ldr	r0, [pc, #360]	; (80015e8 <main+0x2cc>)
 800147e:	f7ff fda9 	bl	8000fd4 <HAL_UART_Transmit>
			Case = 4;
 8001482:	2304      	movs	r3, #4
 8001484:	e7cc      	b.n	8001420 <main+0x104>
			Clear_ESP_Buffer();
 8001486:	f7ff feef 	bl	8001268 <Clear_ESP_Buffer>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Mod ayari yanlis!\r\n"), 1000);
 800148a:	4963      	ldr	r1, [pc, #396]	; (8001618 <main+0x2fc>)
 800148c:	485a      	ldr	r0, [pc, #360]	; (80015f8 <main+0x2dc>)
 800148e:	f000 fb10 	bl	8001ab2 <strcpy>
 8001492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001496:	2213      	movs	r2, #19
 8001498:	4957      	ldr	r1, [pc, #348]	; (80015f8 <main+0x2dc>)
 800149a:	4853      	ldr	r0, [pc, #332]	; (80015e8 <main+0x2cc>)
 800149c:	f7ff fd9a 	bl	8000fd4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CWMODE=1\r\n"), 1000);
 80014a0:	495e      	ldr	r1, [pc, #376]	; (800161c <main+0x300>)
 80014a2:	4855      	ldr	r0, [pc, #340]	; (80015f8 <main+0x2dc>)
 80014a4:	f000 fb05 	bl	8001ab2 <strcpy>
 80014a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ac:	220d      	movs	r2, #13
 80014ae:	4952      	ldr	r1, [pc, #328]	; (80015f8 <main+0x2dc>)
 80014b0:	484b      	ldr	r0, [pc, #300]	; (80015e0 <main+0x2c4>)
 80014b2:	e7c2      	b.n	800143a <main+0x11e>
		HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CWJAP=\"%s\",\"%s\"\r\n",SSID,PW), 1000);
 80014b4:	4b5a      	ldr	r3, [pc, #360]	; (8001620 <main+0x304>)
 80014b6:	4a5b      	ldr	r2, [pc, #364]	; (8001624 <main+0x308>)
 80014b8:	495b      	ldr	r1, [pc, #364]	; (8001628 <main+0x30c>)
 80014ba:	484f      	ldr	r0, [pc, #316]	; (80015f8 <main+0x2dc>)
 80014bc:	f000 fab8 	bl	8001a30 <siprintf>
 80014c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c4:	b282      	uxth	r2, r0
 80014c6:	494c      	ldr	r1, [pc, #304]	; (80015f8 <main+0x2dc>)
 80014c8:	4845      	ldr	r0, [pc, #276]	; (80015e0 <main+0x2c4>)
 80014ca:	f7ff fd83 	bl	8000fd4 <HAL_UART_Transmit>
		HAL_Delay(2000);
 80014ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014d2:	f7ff f8ad 	bl	8000630 <HAL_Delay>
		Case = 5;
 80014d6:	2305      	movs	r3, #5
 80014d8:	e7a2      	b.n	8001420 <main+0x104>
		if(strstr(Esp_Veri_Buffer,"OK")){
 80014da:	4948      	ldr	r1, [pc, #288]	; (80015fc <main+0x2e0>)
 80014dc:	4848      	ldr	r0, [pc, #288]	; (8001600 <main+0x2e4>)
 80014de:	f000 faf0 	bl	8001ac2 <strstr>
 80014e2:	4606      	mov	r6, r0
 80014e4:	b170      	cbz	r0, 8001504 <main+0x1e8>
			Clear_ESP_Buffer();
 80014e6:	f7ff febf 	bl	8001268 <Clear_ESP_Buffer>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Baglanti yapildi!\r\n"), 1000);
 80014ea:	4950      	ldr	r1, [pc, #320]	; (800162c <main+0x310>)
 80014ec:	4842      	ldr	r0, [pc, #264]	; (80015f8 <main+0x2dc>)
 80014ee:	f000 fae0 	bl	8001ab2 <strcpy>
 80014f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f6:	2213      	movs	r2, #19
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"IP Alinamadi!! Tekrar deneniyor!!!\r\n"), 1000);
 80014f8:	493f      	ldr	r1, [pc, #252]	; (80015f8 <main+0x2dc>)
 80014fa:	483b      	ldr	r0, [pc, #236]	; (80015e8 <main+0x2cc>)
 80014fc:	f7ff fd6a 	bl	8000fd4 <HAL_UART_Transmit>
			Case = 6;
 8001500:	2306      	movs	r3, #6
 8001502:	e78d      	b.n	8001420 <main+0x104>
			Clear_ESP_Buffer();
 8001504:	f7ff feb0 	bl	8001268 <Clear_ESP_Buffer>
			baglanti_sayaci++;
 8001508:	4d49      	ldr	r5, [pc, #292]	; (8001630 <main+0x314>)
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Baglanti yapilamadi! Bekleniyor!!\r\n"), 1000);
 800150a:	494a      	ldr	r1, [pc, #296]	; (8001634 <main+0x318>)
 800150c:	483a      	ldr	r0, [pc, #232]	; (80015f8 <main+0x2dc>)
 800150e:	f000 fad0 	bl	8001ab2 <strcpy>
 8001512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001516:	2223      	movs	r2, #35	; 0x23
 8001518:	4937      	ldr	r1, [pc, #220]	; (80015f8 <main+0x2dc>)
 800151a:	4833      	ldr	r0, [pc, #204]	; (80015e8 <main+0x2cc>)
 800151c:	f7ff fd5a 	bl	8000fd4 <HAL_UART_Transmit>
			baglanti_sayaci++;
 8001520:	682b      	ldr	r3, [r5, #0]
			HAL_Delay(2000);
 8001522:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
			baglanti_sayaci++;
 8001526:	3301      	adds	r3, #1
 8001528:	602b      	str	r3, [r5, #0]
			HAL_Delay(2000);
 800152a:	f7ff f881 	bl	8000630 <HAL_Delay>
			if (baglanti_sayaci == 5){
 800152e:	682b      	ldr	r3, [r5, #0]
 8001530:	2b05      	cmp	r3, #5
 8001532:	f47f af3d 	bne.w	80013b0 <main+0x94>
				HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Baglanti basarisiz. Tekrar deneniyor!!!\r\n"), 1000);
 8001536:	4940      	ldr	r1, [pc, #256]	; (8001638 <main+0x31c>)
 8001538:	482f      	ldr	r0, [pc, #188]	; (80015f8 <main+0x2dc>)
 800153a:	f000 faba 	bl	8001ab2 <strcpy>
 800153e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001542:	2229      	movs	r2, #41	; 0x29
 8001544:	492c      	ldr	r1, [pc, #176]	; (80015f8 <main+0x2dc>)
 8001546:	4828      	ldr	r0, [pc, #160]	; (80015e8 <main+0x2cc>)
 8001548:	f7ff fd44 	bl	8000fd4 <HAL_UART_Transmit>
				Case = 0;
 800154c:	7026      	strb	r6, [r4, #0]
				baglanti_sayaci = 0;
 800154e:	602e      	str	r6, [r5, #0]
 8001550:	e72e      	b.n	80013b0 <main+0x94>
		HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CIFSR\r\n"), 1000);
 8001552:	493a      	ldr	r1, [pc, #232]	; (800163c <main+0x320>)
 8001554:	4828      	ldr	r0, [pc, #160]	; (80015f8 <main+0x2dc>)
 8001556:	f000 faac 	bl	8001ab2 <strcpy>
 800155a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155e:	220a      	movs	r2, #10
 8001560:	4925      	ldr	r1, [pc, #148]	; (80015f8 <main+0x2dc>)
 8001562:	481f      	ldr	r0, [pc, #124]	; (80015e0 <main+0x2c4>)
 8001564:	f7ff fd36 	bl	8000fd4 <HAL_UART_Transmit>
		HAL_Delay(2000);
 8001568:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800156c:	f7ff f860 	bl	8000630 <HAL_Delay>
		Case = 7;
 8001570:	2307      	movs	r3, #7
 8001572:	e755      	b.n	8001420 <main+0x104>
		if(strstr(Esp_Veri_Buffer,"OK")){
 8001574:	4921      	ldr	r1, [pc, #132]	; (80015fc <main+0x2e0>)
 8001576:	4822      	ldr	r0, [pc, #136]	; (8001600 <main+0x2e4>)
 8001578:	f000 faa3 	bl	8001ac2 <strstr>
 800157c:	b320      	cbz	r0, 80015c8 <main+0x2ac>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"IP Alindi!!!\r\n"), 1000);
 800157e:	4930      	ldr	r1, [pc, #192]	; (8001640 <main+0x324>)
 8001580:	481d      	ldr	r0, [pc, #116]	; (80015f8 <main+0x2dc>)
 8001582:	f000 fa96 	bl	8001ab2 <strcpy>
 8001586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158a:	220e      	movs	r2, #14
 800158c:	491a      	ldr	r1, [pc, #104]	; (80015f8 <main+0x2dc>)
 800158e:	4816      	ldr	r0, [pc, #88]	; (80015e8 <main+0x2cc>)
 8001590:	f7ff fd20 	bl	8000fd4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Cihaz IP = \r\n"), 1000);
 8001594:	492b      	ldr	r1, [pc, #172]	; (8001644 <main+0x328>)
 8001596:	4818      	ldr	r0, [pc, #96]	; (80015f8 <main+0x2dc>)
 8001598:	f000 fa8b 	bl	8001ab2 <strcpy>
 800159c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a0:	220d      	movs	r2, #13
 80015a2:	4915      	ldr	r1, [pc, #84]	; (80015f8 <main+0x2dc>)
 80015a4:	4810      	ldr	r0, [pc, #64]	; (80015e8 <main+0x2cc>)
 80015a6:	f7ff fd15 	bl	8000fd4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer, &Esp_Veri_Buffer[11]), 1000);
 80015aa:	4927      	ldr	r1, [pc, #156]	; (8001648 <main+0x32c>)
 80015ac:	4812      	ldr	r0, [pc, #72]	; (80015f8 <main+0x2dc>)
 80015ae:	f000 fa3f 	bl	8001a30 <siprintf>
 80015b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b6:	b282      	uxth	r2, r0
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Coklu baglanti dogrulanamadi!!!!\r\n"), 1000);
 80015b8:	490f      	ldr	r1, [pc, #60]	; (80015f8 <main+0x2dc>)
 80015ba:	480b      	ldr	r0, [pc, #44]	; (80015e8 <main+0x2cc>)
 80015bc:	f7ff fd0a 	bl	8000fd4 <HAL_UART_Transmit>
			Clear_ESP_Buffer();
 80015c0:	f7ff fe52 	bl	8001268 <Clear_ESP_Buffer>
			Case = 8;
 80015c4:	2308      	movs	r3, #8
 80015c6:	e72b      	b.n	8001420 <main+0x104>
			Clear_ESP_Buffer();
 80015c8:	f7ff fe4e 	bl	8001268 <Clear_ESP_Buffer>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"IP Alinamadi!! Tekrar deneniyor!!!\r\n"), 1000);
 80015cc:	491f      	ldr	r1, [pc, #124]	; (800164c <main+0x330>)
 80015ce:	480a      	ldr	r0, [pc, #40]	; (80015f8 <main+0x2dc>)
 80015d0:	f000 fa6f 	bl	8001ab2 <strcpy>
 80015d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d8:	2224      	movs	r2, #36	; 0x24
 80015da:	e78d      	b.n	80014f8 <main+0x1dc>
 80015dc:	40023800 	.word	0x40023800
 80015e0:	20000d20 	.word	0x20000d20
 80015e4:	40004400 	.word	0x40004400
 80015e8:	20000a88 	.word	0x20000a88
 80015ec:	40004800 	.word	0x40004800
 80015f0:	200000ac 	.word	0x200000ac
 80015f4:	08002304 	.word	0x08002304
 80015f8:	20000b2c 	.word	0x20000b2c
 80015fc:	08002309 	.word	0x08002309
 8001600:	20000894 	.word	0x20000894
 8001604:	0800230c 	.word	0x0800230c
 8001608:	0800231f 	.word	0x0800231f
 800160c:	08002335 	.word	0x08002335
 8001610:	08002342 	.word	0x08002342
 8001614:	0800234c 	.word	0x0800234c
 8001618:	0800235f 	.word	0x0800235f
 800161c:	08002373 	.word	0x08002373
 8001620:	2000001c 	.word	0x2000001c
 8001624:	2000000c 	.word	0x2000000c
 8001628:	08002381 	.word	0x08002381
 800162c:	08002396 	.word	0x08002396
 8001630:	200000b0 	.word	0x200000b0
 8001634:	080023aa 	.word	0x080023aa
 8001638:	080023ce 	.word	0x080023ce
 800163c:	080023f8 	.word	0x080023f8
 8001640:	08002403 	.word	0x08002403
 8001644:	08002412 	.word	0x08002412
 8001648:	2000089f 	.word	0x2000089f
 800164c:	08002420 	.word	0x08002420
 8001650:	080024d1 	.word	0x080024d1
		HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CIPMUX=1\r\n"), 1000);
 8001654:	494c      	ldr	r1, [pc, #304]	; (8001788 <main+0x46c>)
 8001656:	484d      	ldr	r0, [pc, #308]	; (800178c <main+0x470>)
 8001658:	f000 fa2b 	bl	8001ab2 <strcpy>
 800165c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001660:	220d      	movs	r2, #13
 8001662:	494a      	ldr	r1, [pc, #296]	; (800178c <main+0x470>)
 8001664:	484a      	ldr	r0, [pc, #296]	; (8001790 <main+0x474>)
 8001666:	f7ff fcb5 	bl	8000fd4 <HAL_UART_Transmit>
		HAL_Delay(2000);
 800166a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800166e:	f7fe ffdf 	bl	8000630 <HAL_Delay>
		Case = 9;
 8001672:	2309      	movs	r3, #9
 8001674:	e6d4      	b.n	8001420 <main+0x104>
		if(strstr(Esp_Veri_Buffer,"OK")){
 8001676:	4947      	ldr	r1, [pc, #284]	; (8001794 <main+0x478>)
 8001678:	4847      	ldr	r0, [pc, #284]	; (8001798 <main+0x47c>)
 800167a:	f000 fa22 	bl	8001ac2 <strstr>
 800167e:	b170      	cbz	r0, 800169e <main+0x382>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Coklu baglanti dogrulandi!!!!\r\n"), 1000);
 8001680:	4946      	ldr	r1, [pc, #280]	; (800179c <main+0x480>)
 8001682:	4842      	ldr	r0, [pc, #264]	; (800178c <main+0x470>)
 8001684:	f000 fa15 	bl	8001ab2 <strcpy>
 8001688:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168c:	221f      	movs	r2, #31
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Server baslamadi\r\n"), 1000);
 800168e:	493f      	ldr	r1, [pc, #252]	; (800178c <main+0x470>)
 8001690:	4843      	ldr	r0, [pc, #268]	; (80017a0 <main+0x484>)
 8001692:	f7ff fc9f 	bl	8000fd4 <HAL_UART_Transmit>
			Clear_ESP_Buffer();
 8001696:	f7ff fde7 	bl	8001268 <Clear_ESP_Buffer>
			Case = 10;
 800169a:	230a      	movs	r3, #10
 800169c:	e6c0      	b.n	8001420 <main+0x104>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Coklu baglanti dogrulanamadi!!!!\r\n"), 1000);
 800169e:	4941      	ldr	r1, [pc, #260]	; (80017a4 <main+0x488>)
 80016a0:	483a      	ldr	r0, [pc, #232]	; (800178c <main+0x470>)
 80016a2:	f000 fa06 	bl	8001ab2 <strcpy>
 80016a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016aa:	2222      	movs	r2, #34	; 0x22
 80016ac:	e784      	b.n	80015b8 <main+0x29c>
		HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CIPSERVER=1,80\r\n"), 1000);
 80016ae:	493e      	ldr	r1, [pc, #248]	; (80017a8 <main+0x48c>)
 80016b0:	4836      	ldr	r0, [pc, #216]	; (800178c <main+0x470>)
 80016b2:	f000 f9fe 	bl	8001ab2 <strcpy>
 80016b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ba:	2213      	movs	r2, #19
 80016bc:	4933      	ldr	r1, [pc, #204]	; (800178c <main+0x470>)
 80016be:	4834      	ldr	r0, [pc, #208]	; (8001790 <main+0x474>)
 80016c0:	f7ff fc88 	bl	8000fd4 <HAL_UART_Transmit>
		HAL_Delay(2000);
 80016c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016c8:	f7fe ffb2 	bl	8000630 <HAL_Delay>
		Case = 11;
 80016cc:	230b      	movs	r3, #11
 80016ce:	e6a7      	b.n	8001420 <main+0x104>
		if(strstr(Esp_Veri_Buffer,"OK")){
 80016d0:	4930      	ldr	r1, [pc, #192]	; (8001794 <main+0x478>)
 80016d2:	4831      	ldr	r0, [pc, #196]	; (8001798 <main+0x47c>)
 80016d4:	f000 f9f5 	bl	8001ac2 <strstr>
 80016d8:	b170      	cbz	r0, 80016f8 <main+0x3dc>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Server basladi!!!\r\n"), 1000);
 80016da:	4934      	ldr	r1, [pc, #208]	; (80017ac <main+0x490>)
 80016dc:	482b      	ldr	r0, [pc, #172]	; (800178c <main+0x470>)
 80016de:	f000 f9e8 	bl	8001ab2 <strcpy>
 80016e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e6:	2213      	movs	r2, #19
 80016e8:	4928      	ldr	r1, [pc, #160]	; (800178c <main+0x470>)
 80016ea:	482d      	ldr	r0, [pc, #180]	; (80017a0 <main+0x484>)
 80016ec:	f7ff fc72 	bl	8000fd4 <HAL_UART_Transmit>
			Clear_ESP_Buffer();
 80016f0:	f7ff fdba 	bl	8001268 <Clear_ESP_Buffer>
			Case = 12;
 80016f4:	230c      	movs	r3, #12
 80016f6:	e693      	b.n	8001420 <main+0x104>
			HAL_UART_Transmit(&huart3,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"Server baslamadi\r\n"), 1000);
 80016f8:	492d      	ldr	r1, [pc, #180]	; (80017b0 <main+0x494>)
 80016fa:	4824      	ldr	r0, [pc, #144]	; (800178c <main+0x470>)
 80016fc:	f000 f9d9 	bl	8001ab2 <strcpy>
 8001700:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001704:	2212      	movs	r2, #18
 8001706:	e7c2      	b.n	800168e <main+0x372>
		if(strstr(Esp_Veri_Buffer,"GET")){
 8001708:	4641      	mov	r1, r8
 800170a:	4823      	ldr	r0, [pc, #140]	; (8001798 <main+0x47c>)
 800170c:	f000 f9d9 	bl	8001ac2 <strstr>
 8001710:	2800      	cmp	r0, #0
 8001712:	f43f ae4d 	beq.w	80013b0 <main+0x94>
		sprintf(datatosend, Basic_inclusion);
 8001716:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <main+0x498>)
 8001718:	4827      	ldr	r0, [pc, #156]	; (80017b8 <main+0x49c>)
 800171a:	6819      	ldr	r1, [r3, #0]
 800171c:	f000 f988 	bl	8001a30 <siprintf>
		strcat(datatosend, LED_ON);
 8001720:	4b26      	ldr	r3, [pc, #152]	; (80017bc <main+0x4a0>)
 8001722:	4825      	ldr	r0, [pc, #148]	; (80017b8 <main+0x49c>)
 8001724:	6819      	ldr	r1, [r3, #0]
 8001726:	f000 f9a7 	bl	8001a78 <strcat>
		strcat(datatosend, LED_OFF);
 800172a:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <main+0x4a4>)
 800172c:	4822      	ldr	r0, [pc, #136]	; (80017b8 <main+0x49c>)
 800172e:	6819      	ldr	r1, [r3, #0]
 8001730:	f000 f9a2 	bl	8001a78 <strcat>
		int len = strlen(datatosend);
 8001734:	4820      	ldr	r0, [pc, #128]	; (80017b8 <main+0x49c>)
 8001736:	f7fe fd4b 	bl	80001d0 <strlen>
		HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, "AT+CIPSEND=%d,%d\r\n",0,len), 1000);
 800173a:	2200      	movs	r2, #0
 800173c:	4603      	mov	r3, r0
 800173e:	4921      	ldr	r1, [pc, #132]	; (80017c4 <main+0x4a8>)
 8001740:	4812      	ldr	r0, [pc, #72]	; (800178c <main+0x470>)
 8001742:	f000 f975 	bl	8001a30 <siprintf>
 8001746:	4911      	ldr	r1, [pc, #68]	; (800178c <main+0x470>)
 8001748:	b282      	uxth	r2, r0
 800174a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174e:	4810      	ldr	r0, [pc, #64]	; (8001790 <main+0x474>)
 8001750:	f7ff fc40 	bl	8000fd4 <HAL_UART_Transmit>
		HAL_Delay(2000);
 8001754:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001758:	f7fe ff6a 	bl	8000630 <HAL_Delay>
		if(strstr(Esp_Veri_Buffer,">")){
 800175c:	213e      	movs	r1, #62	; 0x3e
 800175e:	480e      	ldr	r0, [pc, #56]	; (8001798 <main+0x47c>)
 8001760:	f000 f999 	bl	8001a96 <strchr>
 8001764:	2800      	cmp	r0, #0
 8001766:	f43f ae23 	beq.w	80013b0 <main+0x94>
		HAL_UART_Transmit(&huart2, (uint8_t*)TX_Buffer, sprintf(TX_Buffer, datatosend), 1000);
 800176a:	4913      	ldr	r1, [pc, #76]	; (80017b8 <main+0x49c>)
 800176c:	4807      	ldr	r0, [pc, #28]	; (800178c <main+0x470>)
 800176e:	f000 f95f 	bl	8001a30 <siprintf>
 8001772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001776:	b282      	uxth	r2, r0
 8001778:	4904      	ldr	r1, [pc, #16]	; (800178c <main+0x470>)
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <main+0x474>)
 800177c:	f7ff fc2a 	bl	8000fd4 <HAL_UART_Transmit>
		HAL_Delay(6000);
 8001780:	f241 7070 	movw	r0, #6000	; 0x1770
 8001784:	e635      	b.n	80013f2 <main+0xd6>
 8001786:	bf00      	nop
 8001788:	08002445 	.word	0x08002445
 800178c:	20000b2c 	.word	0x20000b2c
 8001790:	20000d20 	.word	0x20000d20
 8001794:	08002309 	.word	0x08002309
 8001798:	20000894 	.word	0x20000894
 800179c:	08002453 	.word	0x08002453
 80017a0:	20000a88 	.word	0x20000a88
 80017a4:	08002473 	.word	0x08002473
 80017a8:	08002496 	.word	0x08002496
 80017ac:	080024aa 	.word	0x080024aa
 80017b0:	080024be 	.word	0x080024be
 80017b4:	20000008 	.word	0x20000008
 80017b8:	200000b4 	.word	0x200000b4
 80017bc:	20000018 	.word	0x20000018
 80017c0:	20000014 	.word	0x20000014
 80017c4:	080024d5 	.word	0x080024d5

080017c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <HAL_MspInit+0x34>)
 80017cc:	2100      	movs	r1, #0
 80017ce:	9100      	str	r1, [sp, #0]
 80017d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017d6:	645a      	str	r2, [r3, #68]	; 0x44
 80017d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017da:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80017de:	9200      	str	r2, [sp, #0]
 80017e0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	9101      	str	r1, [sp, #4]
 80017e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017ea:	641a      	str	r2, [r3, #64]	; 0x40
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f6:	b002      	add	sp, #8
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800

08001800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001800:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001802:	2214      	movs	r2, #20
{
 8001804:	b08a      	sub	sp, #40	; 0x28
 8001806:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	2100      	movs	r1, #0
 800180a:	eb0d 0002 	add.w	r0, sp, r2
 800180e:	f000 f907 	bl	8001a20 <memset>
  if(huart->Instance==USART2)
 8001812:	6823      	ldr	r3, [r4, #0]
 8001814:	4a2c      	ldr	r2, [pc, #176]	; (80018c8 <HAL_UART_MspInit+0xc8>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d12d      	bne.n	8001876 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800181a:	4b2c      	ldr	r3, [pc, #176]	; (80018cc <HAL_UART_MspInit+0xcc>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181c:	482c      	ldr	r0, [pc, #176]	; (80018d0 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800181e:	2400      	movs	r4, #0
 8001820:	9401      	str	r4, [sp, #4]
 8001822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001824:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001828:	641a      	str	r2, [r3, #64]	; 0x40
 800182a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800182c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001830:	9201      	str	r2, [sp, #4]
 8001832:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001834:	9402      	str	r4, [sp, #8]
 8001836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001838:	f042 0201 	orr.w	r2, r2, #1
 800183c:	631a      	str	r2, [r3, #48]	; 0x30
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001848:	230c      	movs	r3, #12
 800184a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001850:	2301      	movs	r3, #1
 8001852:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001854:	2303      	movs	r3, #3
 8001856:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800185a:	2307      	movs	r3, #7
 800185c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f7fe ff77 	bl	8000750 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001862:	2026      	movs	r0, #38	; 0x26
 8001864:	4622      	mov	r2, r4
 8001866:	4621      	mov	r1, r4
 8001868:	f7fe ff08 	bl	800067c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800186c:	2026      	movs	r0, #38	; 0x26
 800186e:	f7fe ff39 	bl	80006e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001872:	b00a      	add	sp, #40	; 0x28
 8001874:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 8001876:	4a17      	ldr	r2, [pc, #92]	; (80018d4 <HAL_UART_MspInit+0xd4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d1fa      	bne.n	8001872 <HAL_UART_MspInit+0x72>
    __HAL_RCC_USART3_CLK_ENABLE();
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <HAL_UART_MspInit+0xcc>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	4816      	ldr	r0, [pc, #88]	; (80018d8 <HAL_UART_MspInit+0xd8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001880:	2100      	movs	r1, #0
 8001882:	9103      	str	r1, [sp, #12]
 8001884:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001886:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800188a:	641a      	str	r2, [r3, #64]	; 0x40
 800188c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800188e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001892:	9203      	str	r2, [sp, #12]
 8001894:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001896:	9104      	str	r1, [sp, #16]
 8001898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800189a:	f042 0202 	orr.w	r2, r2, #2
 800189e:	631a      	str	r2, [r3, #48]	; 0x30
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	9304      	str	r3, [sp, #16]
 80018a8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018ae:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b4:	2301      	movs	r3, #1
 80018b6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b8:	2303      	movs	r3, #3
 80018ba:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018bc:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018be:	2307      	movs	r3, #7
 80018c0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c2:	f7fe ff45 	bl	8000750 <HAL_GPIO_Init>
}
 80018c6:	e7d4      	b.n	8001872 <HAL_UART_MspInit+0x72>
 80018c8:	40004400 	.word	0x40004400
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40020000 	.word	0x40020000
 80018d4:	40004800 	.word	0x40004800
 80018d8:	40020400 	.word	0x40020400

080018dc <NMI_Handler>:
 80018dc:	4770      	bx	lr

080018de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018de:	e7fe      	b.n	80018de <HardFault_Handler>

080018e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e0:	e7fe      	b.n	80018e0 <MemManage_Handler>

080018e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e2:	e7fe      	b.n	80018e2 <BusFault_Handler>

080018e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e4:	e7fe      	b.n	80018e4 <UsageFault_Handler>

080018e6 <SVC_Handler>:
 80018e6:	4770      	bx	lr

080018e8 <DebugMon_Handler>:
 80018e8:	4770      	bx	lr

080018ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ea:	4770      	bx	lr

080018ec <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ec:	f7fe be8e 	b.w	800060c <HAL_IncTick>

080018f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018f2:	4808      	ldr	r0, [pc, #32]	; (8001914 <USART2_IRQHandler+0x24>)
 80018f4:	f7ff fc0e 	bl	8001114 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  uint8_t Gelen_Byte = USART2->DR;
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <USART2_IRQHandler+0x28>)
  USART3->DR = Gelen_Byte;
 80018fa:	4a08      	ldr	r2, [pc, #32]	; (800191c <USART2_IRQHandler+0x2c>)
  uint8_t Gelen_Byte = USART2->DR;
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	b2db      	uxtb	r3, r3
  USART3->DR = Gelen_Byte;
 8001900:	6053      	str	r3, [r2, #4]
  if(Gelen_Byte != 0){
 8001902:	b12b      	cbz	r3, 8001910 <USART2_IRQHandler+0x20>
	  Esp_Veri_Buffer[Sayac] = Gelen_Byte;
 8001904:	4906      	ldr	r1, [pc, #24]	; (8001920 <USART2_IRQHandler+0x30>)
 8001906:	4807      	ldr	r0, [pc, #28]	; (8001924 <USART2_IRQHandler+0x34>)
 8001908:	880a      	ldrh	r2, [r1, #0]
 800190a:	5483      	strb	r3, [r0, r2]
	  Sayac++;
 800190c:	3201      	adds	r2, #1
 800190e:	800a      	strh	r2, [r1, #0]
 8001910:	bd08      	pop	{r3, pc}
 8001912:	bf00      	nop
 8001914:	20000d20 	.word	0x20000d20
 8001918:	40004400 	.word	0x40004400
 800191c:	40004800 	.word	0x40004800
 8001920:	200000ae 	.word	0x200000ae
 8001924:	20000894 	.word	0x20000894

08001928 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001928:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800192a:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <_sbrk+0x2c>)
 800192c:	6819      	ldr	r1, [r3, #0]
{
 800192e:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001930:	b909      	cbnz	r1, 8001936 <_sbrk+0xe>
		heap_end = &end;
 8001932:	4909      	ldr	r1, [pc, #36]	; (8001958 <_sbrk+0x30>)
 8001934:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8001936:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001938:	4669      	mov	r1, sp
 800193a:	4402      	add	r2, r0
 800193c:	428a      	cmp	r2, r1
 800193e:	d906      	bls.n	800194e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001940:	f000 f844 	bl	80019cc <__errno>
 8001944:	230c      	movs	r3, #12
 8001946:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001948:	f04f 30ff 	mov.w	r0, #4294967295
 800194c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800194e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001950:	bd08      	pop	{r3, pc}
 8001952:	bf00      	nop
 8001954:	20000884 	.word	0x20000884
 8001958:	20000d64 	.word	0x20000d64

0800195c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <SystemInit+0x18>)
 800195e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001962:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001966:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800196a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800197c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800197e:	e003      	b.n	8001988 <LoopCopyDataInit>

08001980 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001982:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001984:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001986:	3104      	adds	r1, #4

08001988 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001988:	480b      	ldr	r0, [pc, #44]	; (80019b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800198a:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800198c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800198e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001990:	d3f6      	bcc.n	8001980 <CopyDataInit>
  ldr  r2, =_sbss
 8001992:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001994:	e002      	b.n	800199c <LoopFillZerobss>

08001996 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001996:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001998:	f842 3b04 	str.w	r3, [r2], #4

0800199c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800199e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019a0:	d3f9      	bcc.n	8001996 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019a2:	f7ff ffdb 	bl	800195c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019a6:	f000 f817 	bl	80019d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019aa:	f7ff fcb7 	bl	800131c <main>
  bx  lr    
 80019ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80019b4:	080025dc 	.word	0x080025dc
  ldr  r0, =_sdata
 80019b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019bc:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80019c0:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80019c4:	20000d64 	.word	0x20000d64

080019c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c8:	e7fe      	b.n	80019c8 <ADC_IRQHandler>
	...

080019cc <__errno>:
 80019cc:	4b01      	ldr	r3, [pc, #4]	; (80019d4 <__errno+0x8>)
 80019ce:	6818      	ldr	r0, [r3, #0]
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	2000002c 	.word	0x2000002c

080019d8 <__libc_init_array>:
 80019d8:	b570      	push	{r4, r5, r6, lr}
 80019da:	4e0d      	ldr	r6, [pc, #52]	; (8001a10 <__libc_init_array+0x38>)
 80019dc:	4c0d      	ldr	r4, [pc, #52]	; (8001a14 <__libc_init_array+0x3c>)
 80019de:	1ba4      	subs	r4, r4, r6
 80019e0:	10a4      	asrs	r4, r4, #2
 80019e2:	2500      	movs	r5, #0
 80019e4:	42a5      	cmp	r5, r4
 80019e6:	d109      	bne.n	80019fc <__libc_init_array+0x24>
 80019e8:	4e0b      	ldr	r6, [pc, #44]	; (8001a18 <__libc_init_array+0x40>)
 80019ea:	4c0c      	ldr	r4, [pc, #48]	; (8001a1c <__libc_init_array+0x44>)
 80019ec:	f000 fc7e 	bl	80022ec <_init>
 80019f0:	1ba4      	subs	r4, r4, r6
 80019f2:	10a4      	asrs	r4, r4, #2
 80019f4:	2500      	movs	r5, #0
 80019f6:	42a5      	cmp	r5, r4
 80019f8:	d105      	bne.n	8001a06 <__libc_init_array+0x2e>
 80019fa:	bd70      	pop	{r4, r5, r6, pc}
 80019fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a00:	4798      	blx	r3
 8001a02:	3501      	adds	r5, #1
 8001a04:	e7ee      	b.n	80019e4 <__libc_init_array+0xc>
 8001a06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a0a:	4798      	blx	r3
 8001a0c:	3501      	adds	r5, #1
 8001a0e:	e7f2      	b.n	80019f6 <__libc_init_array+0x1e>
 8001a10:	080025d4 	.word	0x080025d4
 8001a14:	080025d4 	.word	0x080025d4
 8001a18:	080025d4 	.word	0x080025d4
 8001a1c:	080025d8 	.word	0x080025d8

08001a20 <memset>:
 8001a20:	4402      	add	r2, r0
 8001a22:	4603      	mov	r3, r0
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d100      	bne.n	8001a2a <memset+0xa>
 8001a28:	4770      	bx	lr
 8001a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8001a2e:	e7f9      	b.n	8001a24 <memset+0x4>

08001a30 <siprintf>:
 8001a30:	b40e      	push	{r1, r2, r3}
 8001a32:	b500      	push	{lr}
 8001a34:	b09c      	sub	sp, #112	; 0x70
 8001a36:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001a3a:	ab1d      	add	r3, sp, #116	; 0x74
 8001a3c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8001a40:	9002      	str	r0, [sp, #8]
 8001a42:	9006      	str	r0, [sp, #24]
 8001a44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001a48:	480a      	ldr	r0, [pc, #40]	; (8001a74 <siprintf+0x44>)
 8001a4a:	9104      	str	r1, [sp, #16]
 8001a4c:	9107      	str	r1, [sp, #28]
 8001a4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a52:	f853 2b04 	ldr.w	r2, [r3], #4
 8001a56:	f8ad 1016 	strh.w	r1, [sp, #22]
 8001a5a:	6800      	ldr	r0, [r0, #0]
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	a902      	add	r1, sp, #8
 8001a60:	f000 f8a6 	bl	8001bb0 <_svfiprintf_r>
 8001a64:	9b02      	ldr	r3, [sp, #8]
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
 8001a6a:	b01c      	add	sp, #112	; 0x70
 8001a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a70:	b003      	add	sp, #12
 8001a72:	4770      	bx	lr
 8001a74:	2000002c 	.word	0x2000002c

08001a78 <strcat>:
 8001a78:	b510      	push	{r4, lr}
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	3201      	adds	r2, #1
 8001a80:	781c      	ldrb	r4, [r3, #0]
 8001a82:	2c00      	cmp	r4, #0
 8001a84:	d1fa      	bne.n	8001a7c <strcat+0x4>
 8001a86:	3b01      	subs	r3, #1
 8001a88:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001a8c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001a90:	2a00      	cmp	r2, #0
 8001a92:	d1f9      	bne.n	8001a88 <strcat+0x10>
 8001a94:	bd10      	pop	{r4, pc}

08001a96 <strchr>:
 8001a96:	b2c9      	uxtb	r1, r1
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a9e:	b11a      	cbz	r2, 8001aa8 <strchr+0x12>
 8001aa0:	4291      	cmp	r1, r2
 8001aa2:	d1f9      	bne.n	8001a98 <strchr+0x2>
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	4770      	bx	lr
 8001aa8:	2900      	cmp	r1, #0
 8001aaa:	bf0c      	ite	eq
 8001aac:	4618      	moveq	r0, r3
 8001aae:	2000      	movne	r0, #0
 8001ab0:	4770      	bx	lr

08001ab2 <strcpy>:
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001ab8:	f803 2b01 	strb.w	r2, [r3], #1
 8001abc:	2a00      	cmp	r2, #0
 8001abe:	d1f9      	bne.n	8001ab4 <strcpy+0x2>
 8001ac0:	4770      	bx	lr

08001ac2 <strstr>:
 8001ac2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac4:	7803      	ldrb	r3, [r0, #0]
 8001ac6:	b133      	cbz	r3, 8001ad6 <strstr+0x14>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4618      	mov	r0, r3
 8001acc:	1c5e      	adds	r6, r3, #1
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	b933      	cbnz	r3, 8001ae0 <strstr+0x1e>
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ad6:	780b      	ldrb	r3, [r1, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	bf18      	it	ne
 8001adc:	2000      	movne	r0, #0
 8001ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ae0:	1e4d      	subs	r5, r1, #1
 8001ae2:	1e44      	subs	r4, r0, #1
 8001ae4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8001ae8:	2a00      	cmp	r2, #0
 8001aea:	d0f3      	beq.n	8001ad4 <strstr+0x12>
 8001aec:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8001af0:	4297      	cmp	r7, r2
 8001af2:	4633      	mov	r3, r6
 8001af4:	d0f6      	beq.n	8001ae4 <strstr+0x22>
 8001af6:	e7e8      	b.n	8001aca <strstr+0x8>

08001af8 <__ssputs_r>:
 8001af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001afc:	688e      	ldr	r6, [r1, #8]
 8001afe:	429e      	cmp	r6, r3
 8001b00:	4682      	mov	sl, r0
 8001b02:	460c      	mov	r4, r1
 8001b04:	4691      	mov	r9, r2
 8001b06:	4698      	mov	r8, r3
 8001b08:	d835      	bhi.n	8001b76 <__ssputs_r+0x7e>
 8001b0a:	898a      	ldrh	r2, [r1, #12]
 8001b0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001b10:	d031      	beq.n	8001b76 <__ssputs_r+0x7e>
 8001b12:	6825      	ldr	r5, [r4, #0]
 8001b14:	6909      	ldr	r1, [r1, #16]
 8001b16:	1a6f      	subs	r7, r5, r1
 8001b18:	6965      	ldr	r5, [r4, #20]
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001b20:	fb95 f5f3 	sdiv	r5, r5, r3
 8001b24:	f108 0301 	add.w	r3, r8, #1
 8001b28:	443b      	add	r3, r7
 8001b2a:	429d      	cmp	r5, r3
 8001b2c:	bf38      	it	cc
 8001b2e:	461d      	movcc	r5, r3
 8001b30:	0553      	lsls	r3, r2, #21
 8001b32:	d531      	bpl.n	8001b98 <__ssputs_r+0xa0>
 8001b34:	4629      	mov	r1, r5
 8001b36:	f000 fb39 	bl	80021ac <_malloc_r>
 8001b3a:	4606      	mov	r6, r0
 8001b3c:	b950      	cbnz	r0, 8001b54 <__ssputs_r+0x5c>
 8001b3e:	230c      	movs	r3, #12
 8001b40:	f8ca 3000 	str.w	r3, [sl]
 8001b44:	89a3      	ldrh	r3, [r4, #12]
 8001b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b4a:	81a3      	strh	r3, [r4, #12]
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b54:	463a      	mov	r2, r7
 8001b56:	6921      	ldr	r1, [r4, #16]
 8001b58:	f000 fab4 	bl	80020c4 <memcpy>
 8001b5c:	89a3      	ldrh	r3, [r4, #12]
 8001b5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b66:	81a3      	strh	r3, [r4, #12]
 8001b68:	6126      	str	r6, [r4, #16]
 8001b6a:	6165      	str	r5, [r4, #20]
 8001b6c:	443e      	add	r6, r7
 8001b6e:	1bed      	subs	r5, r5, r7
 8001b70:	6026      	str	r6, [r4, #0]
 8001b72:	60a5      	str	r5, [r4, #8]
 8001b74:	4646      	mov	r6, r8
 8001b76:	4546      	cmp	r6, r8
 8001b78:	bf28      	it	cs
 8001b7a:	4646      	movcs	r6, r8
 8001b7c:	4632      	mov	r2, r6
 8001b7e:	4649      	mov	r1, r9
 8001b80:	6820      	ldr	r0, [r4, #0]
 8001b82:	f000 faaa 	bl	80020da <memmove>
 8001b86:	68a3      	ldr	r3, [r4, #8]
 8001b88:	1b9b      	subs	r3, r3, r6
 8001b8a:	60a3      	str	r3, [r4, #8]
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	441e      	add	r6, r3
 8001b90:	6026      	str	r6, [r4, #0]
 8001b92:	2000      	movs	r0, #0
 8001b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b98:	462a      	mov	r2, r5
 8001b9a:	f000 fb65 	bl	8002268 <_realloc_r>
 8001b9e:	4606      	mov	r6, r0
 8001ba0:	2800      	cmp	r0, #0
 8001ba2:	d1e1      	bne.n	8001b68 <__ssputs_r+0x70>
 8001ba4:	6921      	ldr	r1, [r4, #16]
 8001ba6:	4650      	mov	r0, sl
 8001ba8:	f000 fab2 	bl	8002110 <_free_r>
 8001bac:	e7c7      	b.n	8001b3e <__ssputs_r+0x46>
	...

08001bb0 <_svfiprintf_r>:
 8001bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bb4:	b09d      	sub	sp, #116	; 0x74
 8001bb6:	4680      	mov	r8, r0
 8001bb8:	9303      	str	r3, [sp, #12]
 8001bba:	898b      	ldrh	r3, [r1, #12]
 8001bbc:	061c      	lsls	r4, r3, #24
 8001bbe:	460d      	mov	r5, r1
 8001bc0:	4616      	mov	r6, r2
 8001bc2:	d50f      	bpl.n	8001be4 <_svfiprintf_r+0x34>
 8001bc4:	690b      	ldr	r3, [r1, #16]
 8001bc6:	b96b      	cbnz	r3, 8001be4 <_svfiprintf_r+0x34>
 8001bc8:	2140      	movs	r1, #64	; 0x40
 8001bca:	f000 faef 	bl	80021ac <_malloc_r>
 8001bce:	6028      	str	r0, [r5, #0]
 8001bd0:	6128      	str	r0, [r5, #16]
 8001bd2:	b928      	cbnz	r0, 8001be0 <_svfiprintf_r+0x30>
 8001bd4:	230c      	movs	r3, #12
 8001bd6:	f8c8 3000 	str.w	r3, [r8]
 8001bda:	f04f 30ff 	mov.w	r0, #4294967295
 8001bde:	e0c5      	b.n	8001d6c <_svfiprintf_r+0x1bc>
 8001be0:	2340      	movs	r3, #64	; 0x40
 8001be2:	616b      	str	r3, [r5, #20]
 8001be4:	2300      	movs	r3, #0
 8001be6:	9309      	str	r3, [sp, #36]	; 0x24
 8001be8:	2320      	movs	r3, #32
 8001bea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001bee:	2330      	movs	r3, #48	; 0x30
 8001bf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001bf4:	f04f 0b01 	mov.w	fp, #1
 8001bf8:	4637      	mov	r7, r6
 8001bfa:	463c      	mov	r4, r7
 8001bfc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d13c      	bne.n	8001c7e <_svfiprintf_r+0xce>
 8001c04:	ebb7 0a06 	subs.w	sl, r7, r6
 8001c08:	d00b      	beq.n	8001c22 <_svfiprintf_r+0x72>
 8001c0a:	4653      	mov	r3, sl
 8001c0c:	4632      	mov	r2, r6
 8001c0e:	4629      	mov	r1, r5
 8001c10:	4640      	mov	r0, r8
 8001c12:	f7ff ff71 	bl	8001af8 <__ssputs_r>
 8001c16:	3001      	adds	r0, #1
 8001c18:	f000 80a3 	beq.w	8001d62 <_svfiprintf_r+0x1b2>
 8001c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c1e:	4453      	add	r3, sl
 8001c20:	9309      	str	r3, [sp, #36]	; 0x24
 8001c22:	783b      	ldrb	r3, [r7, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 809c 	beq.w	8001d62 <_svfiprintf_r+0x1b2>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c30:	9304      	str	r3, [sp, #16]
 8001c32:	9307      	str	r3, [sp, #28]
 8001c34:	9205      	str	r2, [sp, #20]
 8001c36:	9306      	str	r3, [sp, #24]
 8001c38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001c3c:	931a      	str	r3, [sp, #104]	; 0x68
 8001c3e:	2205      	movs	r2, #5
 8001c40:	7821      	ldrb	r1, [r4, #0]
 8001c42:	4850      	ldr	r0, [pc, #320]	; (8001d84 <_svfiprintf_r+0x1d4>)
 8001c44:	f7fe facc 	bl	80001e0 <memchr>
 8001c48:	1c67      	adds	r7, r4, #1
 8001c4a:	9b04      	ldr	r3, [sp, #16]
 8001c4c:	b9d8      	cbnz	r0, 8001c86 <_svfiprintf_r+0xd6>
 8001c4e:	06d9      	lsls	r1, r3, #27
 8001c50:	bf44      	itt	mi
 8001c52:	2220      	movmi	r2, #32
 8001c54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001c58:	071a      	lsls	r2, r3, #28
 8001c5a:	bf44      	itt	mi
 8001c5c:	222b      	movmi	r2, #43	; 0x2b
 8001c5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001c62:	7822      	ldrb	r2, [r4, #0]
 8001c64:	2a2a      	cmp	r2, #42	; 0x2a
 8001c66:	d016      	beq.n	8001c96 <_svfiprintf_r+0xe6>
 8001c68:	9a07      	ldr	r2, [sp, #28]
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	200a      	movs	r0, #10
 8001c6e:	4627      	mov	r7, r4
 8001c70:	3401      	adds	r4, #1
 8001c72:	783b      	ldrb	r3, [r7, #0]
 8001c74:	3b30      	subs	r3, #48	; 0x30
 8001c76:	2b09      	cmp	r3, #9
 8001c78:	d951      	bls.n	8001d1e <_svfiprintf_r+0x16e>
 8001c7a:	b1c9      	cbz	r1, 8001cb0 <_svfiprintf_r+0x100>
 8001c7c:	e011      	b.n	8001ca2 <_svfiprintf_r+0xf2>
 8001c7e:	2b25      	cmp	r3, #37	; 0x25
 8001c80:	d0c0      	beq.n	8001c04 <_svfiprintf_r+0x54>
 8001c82:	4627      	mov	r7, r4
 8001c84:	e7b9      	b.n	8001bfa <_svfiprintf_r+0x4a>
 8001c86:	4a3f      	ldr	r2, [pc, #252]	; (8001d84 <_svfiprintf_r+0x1d4>)
 8001c88:	1a80      	subs	r0, r0, r2
 8001c8a:	fa0b f000 	lsl.w	r0, fp, r0
 8001c8e:	4318      	orrs	r0, r3
 8001c90:	9004      	str	r0, [sp, #16]
 8001c92:	463c      	mov	r4, r7
 8001c94:	e7d3      	b.n	8001c3e <_svfiprintf_r+0x8e>
 8001c96:	9a03      	ldr	r2, [sp, #12]
 8001c98:	1d11      	adds	r1, r2, #4
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	9103      	str	r1, [sp, #12]
 8001c9e:	2a00      	cmp	r2, #0
 8001ca0:	db01      	blt.n	8001ca6 <_svfiprintf_r+0xf6>
 8001ca2:	9207      	str	r2, [sp, #28]
 8001ca4:	e004      	b.n	8001cb0 <_svfiprintf_r+0x100>
 8001ca6:	4252      	negs	r2, r2
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	9207      	str	r2, [sp, #28]
 8001cae:	9304      	str	r3, [sp, #16]
 8001cb0:	783b      	ldrb	r3, [r7, #0]
 8001cb2:	2b2e      	cmp	r3, #46	; 0x2e
 8001cb4:	d10e      	bne.n	8001cd4 <_svfiprintf_r+0x124>
 8001cb6:	787b      	ldrb	r3, [r7, #1]
 8001cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8001cba:	f107 0101 	add.w	r1, r7, #1
 8001cbe:	d132      	bne.n	8001d26 <_svfiprintf_r+0x176>
 8001cc0:	9b03      	ldr	r3, [sp, #12]
 8001cc2:	1d1a      	adds	r2, r3, #4
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	9203      	str	r2, [sp, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	bfb8      	it	lt
 8001ccc:	f04f 33ff 	movlt.w	r3, #4294967295
 8001cd0:	3702      	adds	r7, #2
 8001cd2:	9305      	str	r3, [sp, #20]
 8001cd4:	4c2c      	ldr	r4, [pc, #176]	; (8001d88 <_svfiprintf_r+0x1d8>)
 8001cd6:	7839      	ldrb	r1, [r7, #0]
 8001cd8:	2203      	movs	r2, #3
 8001cda:	4620      	mov	r0, r4
 8001cdc:	f7fe fa80 	bl	80001e0 <memchr>
 8001ce0:	b138      	cbz	r0, 8001cf2 <_svfiprintf_r+0x142>
 8001ce2:	2340      	movs	r3, #64	; 0x40
 8001ce4:	1b00      	subs	r0, r0, r4
 8001ce6:	fa03 f000 	lsl.w	r0, r3, r0
 8001cea:	9b04      	ldr	r3, [sp, #16]
 8001cec:	4303      	orrs	r3, r0
 8001cee:	9304      	str	r3, [sp, #16]
 8001cf0:	3701      	adds	r7, #1
 8001cf2:	7839      	ldrb	r1, [r7, #0]
 8001cf4:	4825      	ldr	r0, [pc, #148]	; (8001d8c <_svfiprintf_r+0x1dc>)
 8001cf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001cfa:	2206      	movs	r2, #6
 8001cfc:	1c7e      	adds	r6, r7, #1
 8001cfe:	f7fe fa6f 	bl	80001e0 <memchr>
 8001d02:	2800      	cmp	r0, #0
 8001d04:	d035      	beq.n	8001d72 <_svfiprintf_r+0x1c2>
 8001d06:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <_svfiprintf_r+0x1e0>)
 8001d08:	b9fb      	cbnz	r3, 8001d4a <_svfiprintf_r+0x19a>
 8001d0a:	9b03      	ldr	r3, [sp, #12]
 8001d0c:	3307      	adds	r3, #7
 8001d0e:	f023 0307 	bic.w	r3, r3, #7
 8001d12:	3308      	adds	r3, #8
 8001d14:	9303      	str	r3, [sp, #12]
 8001d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d18:	444b      	add	r3, r9
 8001d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8001d1c:	e76c      	b.n	8001bf8 <_svfiprintf_r+0x48>
 8001d1e:	fb00 3202 	mla	r2, r0, r2, r3
 8001d22:	2101      	movs	r1, #1
 8001d24:	e7a3      	b.n	8001c6e <_svfiprintf_r+0xbe>
 8001d26:	2300      	movs	r3, #0
 8001d28:	9305      	str	r3, [sp, #20]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	240a      	movs	r4, #10
 8001d2e:	460f      	mov	r7, r1
 8001d30:	3101      	adds	r1, #1
 8001d32:	783a      	ldrb	r2, [r7, #0]
 8001d34:	3a30      	subs	r2, #48	; 0x30
 8001d36:	2a09      	cmp	r2, #9
 8001d38:	d903      	bls.n	8001d42 <_svfiprintf_r+0x192>
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0ca      	beq.n	8001cd4 <_svfiprintf_r+0x124>
 8001d3e:	9005      	str	r0, [sp, #20]
 8001d40:	e7c8      	b.n	8001cd4 <_svfiprintf_r+0x124>
 8001d42:	fb04 2000 	mla	r0, r4, r0, r2
 8001d46:	2301      	movs	r3, #1
 8001d48:	e7f1      	b.n	8001d2e <_svfiprintf_r+0x17e>
 8001d4a:	ab03      	add	r3, sp, #12
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	462a      	mov	r2, r5
 8001d50:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <_svfiprintf_r+0x1e4>)
 8001d52:	a904      	add	r1, sp, #16
 8001d54:	4640      	mov	r0, r8
 8001d56:	f3af 8000 	nop.w
 8001d5a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001d5e:	4681      	mov	r9, r0
 8001d60:	d1d9      	bne.n	8001d16 <_svfiprintf_r+0x166>
 8001d62:	89ab      	ldrh	r3, [r5, #12]
 8001d64:	065b      	lsls	r3, r3, #25
 8001d66:	f53f af38 	bmi.w	8001bda <_svfiprintf_r+0x2a>
 8001d6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d6c:	b01d      	add	sp, #116	; 0x74
 8001d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d72:	ab03      	add	r3, sp, #12
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	462a      	mov	r2, r5
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <_svfiprintf_r+0x1e4>)
 8001d7a:	a904      	add	r1, sp, #16
 8001d7c:	4640      	mov	r0, r8
 8001d7e:	f000 f881 	bl	8001e84 <_printf_i>
 8001d82:	e7ea      	b.n	8001d5a <_svfiprintf_r+0x1aa>
 8001d84:	08002597 	.word	0x08002597
 8001d88:	0800259d 	.word	0x0800259d
 8001d8c:	080025a1 	.word	0x080025a1
 8001d90:	00000000 	.word	0x00000000
 8001d94:	08001af9 	.word	0x08001af9

08001d98 <_printf_common>:
 8001d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d9c:	4691      	mov	r9, r2
 8001d9e:	461f      	mov	r7, r3
 8001da0:	688a      	ldr	r2, [r1, #8]
 8001da2:	690b      	ldr	r3, [r1, #16]
 8001da4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001da8:	4293      	cmp	r3, r2
 8001daa:	bfb8      	it	lt
 8001dac:	4613      	movlt	r3, r2
 8001dae:	f8c9 3000 	str.w	r3, [r9]
 8001db2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001db6:	4606      	mov	r6, r0
 8001db8:	460c      	mov	r4, r1
 8001dba:	b112      	cbz	r2, 8001dc2 <_printf_common+0x2a>
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	f8c9 3000 	str.w	r3, [r9]
 8001dc2:	6823      	ldr	r3, [r4, #0]
 8001dc4:	0699      	lsls	r1, r3, #26
 8001dc6:	bf42      	ittt	mi
 8001dc8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001dcc:	3302      	addmi	r3, #2
 8001dce:	f8c9 3000 	strmi.w	r3, [r9]
 8001dd2:	6825      	ldr	r5, [r4, #0]
 8001dd4:	f015 0506 	ands.w	r5, r5, #6
 8001dd8:	d107      	bne.n	8001dea <_printf_common+0x52>
 8001dda:	f104 0a19 	add.w	sl, r4, #25
 8001dde:	68e3      	ldr	r3, [r4, #12]
 8001de0:	f8d9 2000 	ldr.w	r2, [r9]
 8001de4:	1a9b      	subs	r3, r3, r2
 8001de6:	429d      	cmp	r5, r3
 8001de8:	db29      	blt.n	8001e3e <_printf_common+0xa6>
 8001dea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001dee:	6822      	ldr	r2, [r4, #0]
 8001df0:	3300      	adds	r3, #0
 8001df2:	bf18      	it	ne
 8001df4:	2301      	movne	r3, #1
 8001df6:	0692      	lsls	r2, r2, #26
 8001df8:	d42e      	bmi.n	8001e58 <_printf_common+0xc0>
 8001dfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001dfe:	4639      	mov	r1, r7
 8001e00:	4630      	mov	r0, r6
 8001e02:	47c0      	blx	r8
 8001e04:	3001      	adds	r0, #1
 8001e06:	d021      	beq.n	8001e4c <_printf_common+0xb4>
 8001e08:	6823      	ldr	r3, [r4, #0]
 8001e0a:	68e5      	ldr	r5, [r4, #12]
 8001e0c:	f8d9 2000 	ldr.w	r2, [r9]
 8001e10:	f003 0306 	and.w	r3, r3, #6
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	bf08      	it	eq
 8001e18:	1aad      	subeq	r5, r5, r2
 8001e1a:	68a3      	ldr	r3, [r4, #8]
 8001e1c:	6922      	ldr	r2, [r4, #16]
 8001e1e:	bf0c      	ite	eq
 8001e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e24:	2500      	movne	r5, #0
 8001e26:	4293      	cmp	r3, r2
 8001e28:	bfc4      	itt	gt
 8001e2a:	1a9b      	subgt	r3, r3, r2
 8001e2c:	18ed      	addgt	r5, r5, r3
 8001e2e:	f04f 0900 	mov.w	r9, #0
 8001e32:	341a      	adds	r4, #26
 8001e34:	454d      	cmp	r5, r9
 8001e36:	d11b      	bne.n	8001e70 <_printf_common+0xd8>
 8001e38:	2000      	movs	r0, #0
 8001e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e3e:	2301      	movs	r3, #1
 8001e40:	4652      	mov	r2, sl
 8001e42:	4639      	mov	r1, r7
 8001e44:	4630      	mov	r0, r6
 8001e46:	47c0      	blx	r8
 8001e48:	3001      	adds	r0, #1
 8001e4a:	d103      	bne.n	8001e54 <_printf_common+0xbc>
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e54:	3501      	adds	r5, #1
 8001e56:	e7c2      	b.n	8001dde <_printf_common+0x46>
 8001e58:	18e1      	adds	r1, r4, r3
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	2030      	movs	r0, #48	; 0x30
 8001e5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e62:	4422      	add	r2, r4
 8001e64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	e7c4      	b.n	8001dfa <_printf_common+0x62>
 8001e70:	2301      	movs	r3, #1
 8001e72:	4622      	mov	r2, r4
 8001e74:	4639      	mov	r1, r7
 8001e76:	4630      	mov	r0, r6
 8001e78:	47c0      	blx	r8
 8001e7a:	3001      	adds	r0, #1
 8001e7c:	d0e6      	beq.n	8001e4c <_printf_common+0xb4>
 8001e7e:	f109 0901 	add.w	r9, r9, #1
 8001e82:	e7d7      	b.n	8001e34 <_printf_common+0x9c>

08001e84 <_printf_i>:
 8001e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e88:	4617      	mov	r7, r2
 8001e8a:	7e0a      	ldrb	r2, [r1, #24]
 8001e8c:	b085      	sub	sp, #20
 8001e8e:	2a6e      	cmp	r2, #110	; 0x6e
 8001e90:	4698      	mov	r8, r3
 8001e92:	4606      	mov	r6, r0
 8001e94:	460c      	mov	r4, r1
 8001e96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001e98:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001e9c:	f000 80bc 	beq.w	8002018 <_printf_i+0x194>
 8001ea0:	d81a      	bhi.n	8001ed8 <_printf_i+0x54>
 8001ea2:	2a63      	cmp	r2, #99	; 0x63
 8001ea4:	d02e      	beq.n	8001f04 <_printf_i+0x80>
 8001ea6:	d80a      	bhi.n	8001ebe <_printf_i+0x3a>
 8001ea8:	2a00      	cmp	r2, #0
 8001eaa:	f000 80c8 	beq.w	800203e <_printf_i+0x1ba>
 8001eae:	2a58      	cmp	r2, #88	; 0x58
 8001eb0:	f000 808a 	beq.w	8001fc8 <_printf_i+0x144>
 8001eb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001eb8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001ebc:	e02a      	b.n	8001f14 <_printf_i+0x90>
 8001ebe:	2a64      	cmp	r2, #100	; 0x64
 8001ec0:	d001      	beq.n	8001ec6 <_printf_i+0x42>
 8001ec2:	2a69      	cmp	r2, #105	; 0x69
 8001ec4:	d1f6      	bne.n	8001eb4 <_printf_i+0x30>
 8001ec6:	6821      	ldr	r1, [r4, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001ece:	d023      	beq.n	8001f18 <_printf_i+0x94>
 8001ed0:	1d11      	adds	r1, r2, #4
 8001ed2:	6019      	str	r1, [r3, #0]
 8001ed4:	6813      	ldr	r3, [r2, #0]
 8001ed6:	e027      	b.n	8001f28 <_printf_i+0xa4>
 8001ed8:	2a73      	cmp	r2, #115	; 0x73
 8001eda:	f000 80b4 	beq.w	8002046 <_printf_i+0x1c2>
 8001ede:	d808      	bhi.n	8001ef2 <_printf_i+0x6e>
 8001ee0:	2a6f      	cmp	r2, #111	; 0x6f
 8001ee2:	d02a      	beq.n	8001f3a <_printf_i+0xb6>
 8001ee4:	2a70      	cmp	r2, #112	; 0x70
 8001ee6:	d1e5      	bne.n	8001eb4 <_printf_i+0x30>
 8001ee8:	680a      	ldr	r2, [r1, #0]
 8001eea:	f042 0220 	orr.w	r2, r2, #32
 8001eee:	600a      	str	r2, [r1, #0]
 8001ef0:	e003      	b.n	8001efa <_printf_i+0x76>
 8001ef2:	2a75      	cmp	r2, #117	; 0x75
 8001ef4:	d021      	beq.n	8001f3a <_printf_i+0xb6>
 8001ef6:	2a78      	cmp	r2, #120	; 0x78
 8001ef8:	d1dc      	bne.n	8001eb4 <_printf_i+0x30>
 8001efa:	2278      	movs	r2, #120	; 0x78
 8001efc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001f00:	496e      	ldr	r1, [pc, #440]	; (80020bc <_printf_i+0x238>)
 8001f02:	e064      	b.n	8001fce <_printf_i+0x14a>
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001f0a:	1d11      	adds	r1, r2, #4
 8001f0c:	6019      	str	r1, [r3, #0]
 8001f0e:	6813      	ldr	r3, [r2, #0]
 8001f10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0a3      	b.n	8002060 <_printf_i+0x1dc>
 8001f18:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001f1c:	f102 0104 	add.w	r1, r2, #4
 8001f20:	6019      	str	r1, [r3, #0]
 8001f22:	d0d7      	beq.n	8001ed4 <_printf_i+0x50>
 8001f24:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	da03      	bge.n	8001f34 <_printf_i+0xb0>
 8001f2c:	222d      	movs	r2, #45	; 0x2d
 8001f2e:	425b      	negs	r3, r3
 8001f30:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001f34:	4962      	ldr	r1, [pc, #392]	; (80020c0 <_printf_i+0x23c>)
 8001f36:	220a      	movs	r2, #10
 8001f38:	e017      	b.n	8001f6a <_printf_i+0xe6>
 8001f3a:	6820      	ldr	r0, [r4, #0]
 8001f3c:	6819      	ldr	r1, [r3, #0]
 8001f3e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001f42:	d003      	beq.n	8001f4c <_printf_i+0xc8>
 8001f44:	1d08      	adds	r0, r1, #4
 8001f46:	6018      	str	r0, [r3, #0]
 8001f48:	680b      	ldr	r3, [r1, #0]
 8001f4a:	e006      	b.n	8001f5a <_printf_i+0xd6>
 8001f4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001f50:	f101 0004 	add.w	r0, r1, #4
 8001f54:	6018      	str	r0, [r3, #0]
 8001f56:	d0f7      	beq.n	8001f48 <_printf_i+0xc4>
 8001f58:	880b      	ldrh	r3, [r1, #0]
 8001f5a:	4959      	ldr	r1, [pc, #356]	; (80020c0 <_printf_i+0x23c>)
 8001f5c:	2a6f      	cmp	r2, #111	; 0x6f
 8001f5e:	bf14      	ite	ne
 8001f60:	220a      	movne	r2, #10
 8001f62:	2208      	moveq	r2, #8
 8001f64:	2000      	movs	r0, #0
 8001f66:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001f6a:	6865      	ldr	r5, [r4, #4]
 8001f6c:	60a5      	str	r5, [r4, #8]
 8001f6e:	2d00      	cmp	r5, #0
 8001f70:	f2c0 809c 	blt.w	80020ac <_printf_i+0x228>
 8001f74:	6820      	ldr	r0, [r4, #0]
 8001f76:	f020 0004 	bic.w	r0, r0, #4
 8001f7a:	6020      	str	r0, [r4, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d13f      	bne.n	8002000 <_printf_i+0x17c>
 8001f80:	2d00      	cmp	r5, #0
 8001f82:	f040 8095 	bne.w	80020b0 <_printf_i+0x22c>
 8001f86:	4675      	mov	r5, lr
 8001f88:	2a08      	cmp	r2, #8
 8001f8a:	d10b      	bne.n	8001fa4 <_printf_i+0x120>
 8001f8c:	6823      	ldr	r3, [r4, #0]
 8001f8e:	07da      	lsls	r2, r3, #31
 8001f90:	d508      	bpl.n	8001fa4 <_printf_i+0x120>
 8001f92:	6923      	ldr	r3, [r4, #16]
 8001f94:	6862      	ldr	r2, [r4, #4]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	bfde      	ittt	le
 8001f9a:	2330      	movle	r3, #48	; 0x30
 8001f9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001fa0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001fa4:	ebae 0305 	sub.w	r3, lr, r5
 8001fa8:	6123      	str	r3, [r4, #16]
 8001faa:	f8cd 8000 	str.w	r8, [sp]
 8001fae:	463b      	mov	r3, r7
 8001fb0:	aa03      	add	r2, sp, #12
 8001fb2:	4621      	mov	r1, r4
 8001fb4:	4630      	mov	r0, r6
 8001fb6:	f7ff feef 	bl	8001d98 <_printf_common>
 8001fba:	3001      	adds	r0, #1
 8001fbc:	d155      	bne.n	800206a <_printf_i+0x1e6>
 8001fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc2:	b005      	add	sp, #20
 8001fc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fc8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001fcc:	493c      	ldr	r1, [pc, #240]	; (80020c0 <_printf_i+0x23c>)
 8001fce:	6822      	ldr	r2, [r4, #0]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001fd6:	f100 0504 	add.w	r5, r0, #4
 8001fda:	601d      	str	r5, [r3, #0]
 8001fdc:	d001      	beq.n	8001fe2 <_printf_i+0x15e>
 8001fde:	6803      	ldr	r3, [r0, #0]
 8001fe0:	e002      	b.n	8001fe8 <_printf_i+0x164>
 8001fe2:	0655      	lsls	r5, r2, #25
 8001fe4:	d5fb      	bpl.n	8001fde <_printf_i+0x15a>
 8001fe6:	8803      	ldrh	r3, [r0, #0]
 8001fe8:	07d0      	lsls	r0, r2, #31
 8001fea:	bf44      	itt	mi
 8001fec:	f042 0220 	orrmi.w	r2, r2, #32
 8001ff0:	6022      	strmi	r2, [r4, #0]
 8001ff2:	b91b      	cbnz	r3, 8001ffc <_printf_i+0x178>
 8001ff4:	6822      	ldr	r2, [r4, #0]
 8001ff6:	f022 0220 	bic.w	r2, r2, #32
 8001ffa:	6022      	str	r2, [r4, #0]
 8001ffc:	2210      	movs	r2, #16
 8001ffe:	e7b1      	b.n	8001f64 <_printf_i+0xe0>
 8002000:	4675      	mov	r5, lr
 8002002:	fbb3 f0f2 	udiv	r0, r3, r2
 8002006:	fb02 3310 	mls	r3, r2, r0, r3
 800200a:	5ccb      	ldrb	r3, [r1, r3]
 800200c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002010:	4603      	mov	r3, r0
 8002012:	2800      	cmp	r0, #0
 8002014:	d1f5      	bne.n	8002002 <_printf_i+0x17e>
 8002016:	e7b7      	b.n	8001f88 <_printf_i+0x104>
 8002018:	6808      	ldr	r0, [r1, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	6949      	ldr	r1, [r1, #20]
 800201e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002022:	d004      	beq.n	800202e <_printf_i+0x1aa>
 8002024:	1d10      	adds	r0, r2, #4
 8002026:	6018      	str	r0, [r3, #0]
 8002028:	6813      	ldr	r3, [r2, #0]
 800202a:	6019      	str	r1, [r3, #0]
 800202c:	e007      	b.n	800203e <_printf_i+0x1ba>
 800202e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002032:	f102 0004 	add.w	r0, r2, #4
 8002036:	6018      	str	r0, [r3, #0]
 8002038:	6813      	ldr	r3, [r2, #0]
 800203a:	d0f6      	beq.n	800202a <_printf_i+0x1a6>
 800203c:	8019      	strh	r1, [r3, #0]
 800203e:	2300      	movs	r3, #0
 8002040:	6123      	str	r3, [r4, #16]
 8002042:	4675      	mov	r5, lr
 8002044:	e7b1      	b.n	8001faa <_printf_i+0x126>
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	1d11      	adds	r1, r2, #4
 800204a:	6019      	str	r1, [r3, #0]
 800204c:	6815      	ldr	r5, [r2, #0]
 800204e:	6862      	ldr	r2, [r4, #4]
 8002050:	2100      	movs	r1, #0
 8002052:	4628      	mov	r0, r5
 8002054:	f7fe f8c4 	bl	80001e0 <memchr>
 8002058:	b108      	cbz	r0, 800205e <_printf_i+0x1da>
 800205a:	1b40      	subs	r0, r0, r5
 800205c:	6060      	str	r0, [r4, #4]
 800205e:	6863      	ldr	r3, [r4, #4]
 8002060:	6123      	str	r3, [r4, #16]
 8002062:	2300      	movs	r3, #0
 8002064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002068:	e79f      	b.n	8001faa <_printf_i+0x126>
 800206a:	6923      	ldr	r3, [r4, #16]
 800206c:	462a      	mov	r2, r5
 800206e:	4639      	mov	r1, r7
 8002070:	4630      	mov	r0, r6
 8002072:	47c0      	blx	r8
 8002074:	3001      	adds	r0, #1
 8002076:	d0a2      	beq.n	8001fbe <_printf_i+0x13a>
 8002078:	6823      	ldr	r3, [r4, #0]
 800207a:	079b      	lsls	r3, r3, #30
 800207c:	d507      	bpl.n	800208e <_printf_i+0x20a>
 800207e:	2500      	movs	r5, #0
 8002080:	f104 0919 	add.w	r9, r4, #25
 8002084:	68e3      	ldr	r3, [r4, #12]
 8002086:	9a03      	ldr	r2, [sp, #12]
 8002088:	1a9b      	subs	r3, r3, r2
 800208a:	429d      	cmp	r5, r3
 800208c:	db05      	blt.n	800209a <_printf_i+0x216>
 800208e:	68e0      	ldr	r0, [r4, #12]
 8002090:	9b03      	ldr	r3, [sp, #12]
 8002092:	4298      	cmp	r0, r3
 8002094:	bfb8      	it	lt
 8002096:	4618      	movlt	r0, r3
 8002098:	e793      	b.n	8001fc2 <_printf_i+0x13e>
 800209a:	2301      	movs	r3, #1
 800209c:	464a      	mov	r2, r9
 800209e:	4639      	mov	r1, r7
 80020a0:	4630      	mov	r0, r6
 80020a2:	47c0      	blx	r8
 80020a4:	3001      	adds	r0, #1
 80020a6:	d08a      	beq.n	8001fbe <_printf_i+0x13a>
 80020a8:	3501      	adds	r5, #1
 80020aa:	e7eb      	b.n	8002084 <_printf_i+0x200>
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1a7      	bne.n	8002000 <_printf_i+0x17c>
 80020b0:	780b      	ldrb	r3, [r1, #0]
 80020b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020ba:	e765      	b.n	8001f88 <_printf_i+0x104>
 80020bc:	080025b9 	.word	0x080025b9
 80020c0:	080025a8 	.word	0x080025a8

080020c4 <memcpy>:
 80020c4:	b510      	push	{r4, lr}
 80020c6:	1e43      	subs	r3, r0, #1
 80020c8:	440a      	add	r2, r1
 80020ca:	4291      	cmp	r1, r2
 80020cc:	d100      	bne.n	80020d0 <memcpy+0xc>
 80020ce:	bd10      	pop	{r4, pc}
 80020d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80020d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80020d8:	e7f7      	b.n	80020ca <memcpy+0x6>

080020da <memmove>:
 80020da:	4288      	cmp	r0, r1
 80020dc:	b510      	push	{r4, lr}
 80020de:	eb01 0302 	add.w	r3, r1, r2
 80020e2:	d803      	bhi.n	80020ec <memmove+0x12>
 80020e4:	1e42      	subs	r2, r0, #1
 80020e6:	4299      	cmp	r1, r3
 80020e8:	d10c      	bne.n	8002104 <memmove+0x2a>
 80020ea:	bd10      	pop	{r4, pc}
 80020ec:	4298      	cmp	r0, r3
 80020ee:	d2f9      	bcs.n	80020e4 <memmove+0xa>
 80020f0:	1881      	adds	r1, r0, r2
 80020f2:	1ad2      	subs	r2, r2, r3
 80020f4:	42d3      	cmn	r3, r2
 80020f6:	d100      	bne.n	80020fa <memmove+0x20>
 80020f8:	bd10      	pop	{r4, pc}
 80020fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80020fe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002102:	e7f7      	b.n	80020f4 <memmove+0x1a>
 8002104:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002108:	f802 4f01 	strb.w	r4, [r2, #1]!
 800210c:	e7eb      	b.n	80020e6 <memmove+0xc>
	...

08002110 <_free_r>:
 8002110:	b538      	push	{r3, r4, r5, lr}
 8002112:	4605      	mov	r5, r0
 8002114:	2900      	cmp	r1, #0
 8002116:	d045      	beq.n	80021a4 <_free_r+0x94>
 8002118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800211c:	1f0c      	subs	r4, r1, #4
 800211e:	2b00      	cmp	r3, #0
 8002120:	bfb8      	it	lt
 8002122:	18e4      	addlt	r4, r4, r3
 8002124:	f000 f8d6 	bl	80022d4 <__malloc_lock>
 8002128:	4a1f      	ldr	r2, [pc, #124]	; (80021a8 <_free_r+0x98>)
 800212a:	6813      	ldr	r3, [r2, #0]
 800212c:	4610      	mov	r0, r2
 800212e:	b933      	cbnz	r3, 800213e <_free_r+0x2e>
 8002130:	6063      	str	r3, [r4, #4]
 8002132:	6014      	str	r4, [r2, #0]
 8002134:	4628      	mov	r0, r5
 8002136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800213a:	f000 b8cc 	b.w	80022d6 <__malloc_unlock>
 800213e:	42a3      	cmp	r3, r4
 8002140:	d90c      	bls.n	800215c <_free_r+0x4c>
 8002142:	6821      	ldr	r1, [r4, #0]
 8002144:	1862      	adds	r2, r4, r1
 8002146:	4293      	cmp	r3, r2
 8002148:	bf04      	itt	eq
 800214a:	681a      	ldreq	r2, [r3, #0]
 800214c:	685b      	ldreq	r3, [r3, #4]
 800214e:	6063      	str	r3, [r4, #4]
 8002150:	bf04      	itt	eq
 8002152:	1852      	addeq	r2, r2, r1
 8002154:	6022      	streq	r2, [r4, #0]
 8002156:	6004      	str	r4, [r0, #0]
 8002158:	e7ec      	b.n	8002134 <_free_r+0x24>
 800215a:	4613      	mov	r3, r2
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	b10a      	cbz	r2, 8002164 <_free_r+0x54>
 8002160:	42a2      	cmp	r2, r4
 8002162:	d9fa      	bls.n	800215a <_free_r+0x4a>
 8002164:	6819      	ldr	r1, [r3, #0]
 8002166:	1858      	adds	r0, r3, r1
 8002168:	42a0      	cmp	r0, r4
 800216a:	d10b      	bne.n	8002184 <_free_r+0x74>
 800216c:	6820      	ldr	r0, [r4, #0]
 800216e:	4401      	add	r1, r0
 8002170:	1858      	adds	r0, r3, r1
 8002172:	4282      	cmp	r2, r0
 8002174:	6019      	str	r1, [r3, #0]
 8002176:	d1dd      	bne.n	8002134 <_free_r+0x24>
 8002178:	6810      	ldr	r0, [r2, #0]
 800217a:	6852      	ldr	r2, [r2, #4]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	4401      	add	r1, r0
 8002180:	6019      	str	r1, [r3, #0]
 8002182:	e7d7      	b.n	8002134 <_free_r+0x24>
 8002184:	d902      	bls.n	800218c <_free_r+0x7c>
 8002186:	230c      	movs	r3, #12
 8002188:	602b      	str	r3, [r5, #0]
 800218a:	e7d3      	b.n	8002134 <_free_r+0x24>
 800218c:	6820      	ldr	r0, [r4, #0]
 800218e:	1821      	adds	r1, r4, r0
 8002190:	428a      	cmp	r2, r1
 8002192:	bf04      	itt	eq
 8002194:	6811      	ldreq	r1, [r2, #0]
 8002196:	6852      	ldreq	r2, [r2, #4]
 8002198:	6062      	str	r2, [r4, #4]
 800219a:	bf04      	itt	eq
 800219c:	1809      	addeq	r1, r1, r0
 800219e:	6021      	streq	r1, [r4, #0]
 80021a0:	605c      	str	r4, [r3, #4]
 80021a2:	e7c7      	b.n	8002134 <_free_r+0x24>
 80021a4:	bd38      	pop	{r3, r4, r5, pc}
 80021a6:	bf00      	nop
 80021a8:	20000888 	.word	0x20000888

080021ac <_malloc_r>:
 80021ac:	b570      	push	{r4, r5, r6, lr}
 80021ae:	1ccd      	adds	r5, r1, #3
 80021b0:	f025 0503 	bic.w	r5, r5, #3
 80021b4:	3508      	adds	r5, #8
 80021b6:	2d0c      	cmp	r5, #12
 80021b8:	bf38      	it	cc
 80021ba:	250c      	movcc	r5, #12
 80021bc:	2d00      	cmp	r5, #0
 80021be:	4606      	mov	r6, r0
 80021c0:	db01      	blt.n	80021c6 <_malloc_r+0x1a>
 80021c2:	42a9      	cmp	r1, r5
 80021c4:	d903      	bls.n	80021ce <_malloc_r+0x22>
 80021c6:	230c      	movs	r3, #12
 80021c8:	6033      	str	r3, [r6, #0]
 80021ca:	2000      	movs	r0, #0
 80021cc:	bd70      	pop	{r4, r5, r6, pc}
 80021ce:	f000 f881 	bl	80022d4 <__malloc_lock>
 80021d2:	4a23      	ldr	r2, [pc, #140]	; (8002260 <_malloc_r+0xb4>)
 80021d4:	6814      	ldr	r4, [r2, #0]
 80021d6:	4621      	mov	r1, r4
 80021d8:	b991      	cbnz	r1, 8002200 <_malloc_r+0x54>
 80021da:	4c22      	ldr	r4, [pc, #136]	; (8002264 <_malloc_r+0xb8>)
 80021dc:	6823      	ldr	r3, [r4, #0]
 80021de:	b91b      	cbnz	r3, 80021e8 <_malloc_r+0x3c>
 80021e0:	4630      	mov	r0, r6
 80021e2:	f000 f867 	bl	80022b4 <_sbrk_r>
 80021e6:	6020      	str	r0, [r4, #0]
 80021e8:	4629      	mov	r1, r5
 80021ea:	4630      	mov	r0, r6
 80021ec:	f000 f862 	bl	80022b4 <_sbrk_r>
 80021f0:	1c43      	adds	r3, r0, #1
 80021f2:	d126      	bne.n	8002242 <_malloc_r+0x96>
 80021f4:	230c      	movs	r3, #12
 80021f6:	6033      	str	r3, [r6, #0]
 80021f8:	4630      	mov	r0, r6
 80021fa:	f000 f86c 	bl	80022d6 <__malloc_unlock>
 80021fe:	e7e4      	b.n	80021ca <_malloc_r+0x1e>
 8002200:	680b      	ldr	r3, [r1, #0]
 8002202:	1b5b      	subs	r3, r3, r5
 8002204:	d41a      	bmi.n	800223c <_malloc_r+0x90>
 8002206:	2b0b      	cmp	r3, #11
 8002208:	d90f      	bls.n	800222a <_malloc_r+0x7e>
 800220a:	600b      	str	r3, [r1, #0]
 800220c:	50cd      	str	r5, [r1, r3]
 800220e:	18cc      	adds	r4, r1, r3
 8002210:	4630      	mov	r0, r6
 8002212:	f000 f860 	bl	80022d6 <__malloc_unlock>
 8002216:	f104 000b 	add.w	r0, r4, #11
 800221a:	1d23      	adds	r3, r4, #4
 800221c:	f020 0007 	bic.w	r0, r0, #7
 8002220:	1ac3      	subs	r3, r0, r3
 8002222:	d01b      	beq.n	800225c <_malloc_r+0xb0>
 8002224:	425a      	negs	r2, r3
 8002226:	50e2      	str	r2, [r4, r3]
 8002228:	bd70      	pop	{r4, r5, r6, pc}
 800222a:	428c      	cmp	r4, r1
 800222c:	bf0d      	iteet	eq
 800222e:	6863      	ldreq	r3, [r4, #4]
 8002230:	684b      	ldrne	r3, [r1, #4]
 8002232:	6063      	strne	r3, [r4, #4]
 8002234:	6013      	streq	r3, [r2, #0]
 8002236:	bf18      	it	ne
 8002238:	460c      	movne	r4, r1
 800223a:	e7e9      	b.n	8002210 <_malloc_r+0x64>
 800223c:	460c      	mov	r4, r1
 800223e:	6849      	ldr	r1, [r1, #4]
 8002240:	e7ca      	b.n	80021d8 <_malloc_r+0x2c>
 8002242:	1cc4      	adds	r4, r0, #3
 8002244:	f024 0403 	bic.w	r4, r4, #3
 8002248:	42a0      	cmp	r0, r4
 800224a:	d005      	beq.n	8002258 <_malloc_r+0xac>
 800224c:	1a21      	subs	r1, r4, r0
 800224e:	4630      	mov	r0, r6
 8002250:	f000 f830 	bl	80022b4 <_sbrk_r>
 8002254:	3001      	adds	r0, #1
 8002256:	d0cd      	beq.n	80021f4 <_malloc_r+0x48>
 8002258:	6025      	str	r5, [r4, #0]
 800225a:	e7d9      	b.n	8002210 <_malloc_r+0x64>
 800225c:	bd70      	pop	{r4, r5, r6, pc}
 800225e:	bf00      	nop
 8002260:	20000888 	.word	0x20000888
 8002264:	2000088c 	.word	0x2000088c

08002268 <_realloc_r>:
 8002268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800226a:	4607      	mov	r7, r0
 800226c:	4614      	mov	r4, r2
 800226e:	460e      	mov	r6, r1
 8002270:	b921      	cbnz	r1, 800227c <_realloc_r+0x14>
 8002272:	4611      	mov	r1, r2
 8002274:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002278:	f7ff bf98 	b.w	80021ac <_malloc_r>
 800227c:	b922      	cbnz	r2, 8002288 <_realloc_r+0x20>
 800227e:	f7ff ff47 	bl	8002110 <_free_r>
 8002282:	4625      	mov	r5, r4
 8002284:	4628      	mov	r0, r5
 8002286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002288:	f000 f826 	bl	80022d8 <_malloc_usable_size_r>
 800228c:	4284      	cmp	r4, r0
 800228e:	d90f      	bls.n	80022b0 <_realloc_r+0x48>
 8002290:	4621      	mov	r1, r4
 8002292:	4638      	mov	r0, r7
 8002294:	f7ff ff8a 	bl	80021ac <_malloc_r>
 8002298:	4605      	mov	r5, r0
 800229a:	2800      	cmp	r0, #0
 800229c:	d0f2      	beq.n	8002284 <_realloc_r+0x1c>
 800229e:	4631      	mov	r1, r6
 80022a0:	4622      	mov	r2, r4
 80022a2:	f7ff ff0f 	bl	80020c4 <memcpy>
 80022a6:	4631      	mov	r1, r6
 80022a8:	4638      	mov	r0, r7
 80022aa:	f7ff ff31 	bl	8002110 <_free_r>
 80022ae:	e7e9      	b.n	8002284 <_realloc_r+0x1c>
 80022b0:	4635      	mov	r5, r6
 80022b2:	e7e7      	b.n	8002284 <_realloc_r+0x1c>

080022b4 <_sbrk_r>:
 80022b4:	b538      	push	{r3, r4, r5, lr}
 80022b6:	4c06      	ldr	r4, [pc, #24]	; (80022d0 <_sbrk_r+0x1c>)
 80022b8:	2300      	movs	r3, #0
 80022ba:	4605      	mov	r5, r0
 80022bc:	4608      	mov	r0, r1
 80022be:	6023      	str	r3, [r4, #0]
 80022c0:	f7ff fb32 	bl	8001928 <_sbrk>
 80022c4:	1c43      	adds	r3, r0, #1
 80022c6:	d102      	bne.n	80022ce <_sbrk_r+0x1a>
 80022c8:	6823      	ldr	r3, [r4, #0]
 80022ca:	b103      	cbz	r3, 80022ce <_sbrk_r+0x1a>
 80022cc:	602b      	str	r3, [r5, #0]
 80022ce:	bd38      	pop	{r3, r4, r5, pc}
 80022d0:	20000d60 	.word	0x20000d60

080022d4 <__malloc_lock>:
 80022d4:	4770      	bx	lr

080022d6 <__malloc_unlock>:
 80022d6:	4770      	bx	lr

080022d8 <_malloc_usable_size_r>:
 80022d8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80022dc:	2800      	cmp	r0, #0
 80022de:	f1a0 0004 	sub.w	r0, r0, #4
 80022e2:	bfbc      	itt	lt
 80022e4:	580b      	ldrlt	r3, [r1, r0]
 80022e6:	18c0      	addlt	r0, r0, r3
 80022e8:	4770      	bx	lr
	...

080022ec <_init>:
 80022ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ee:	bf00      	nop
 80022f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022f2:	bc08      	pop	{r3}
 80022f4:	469e      	mov	lr, r3
 80022f6:	4770      	bx	lr

080022f8 <_fini>:
 80022f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022fa:	bf00      	nop
 80022fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022fe:	bc08      	pop	{r3}
 8002300:	469e      	mov	lr, r3
 8002302:	4770      	bx	lr
