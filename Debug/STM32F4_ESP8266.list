
STM32F4_ESP8266.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013cc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001554  08001554  00011554  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001574  08001574  00011574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800157c  0800157c  0001157c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001580  08001580  00011580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          0000016c  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000178  20000178  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00007b16  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001839  00000000  00000000  00027b52  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000028d5  00000000  00000000  0002938b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000570  00000000  00000000  0002bc60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000700  00000000  00000000  0002c1d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00002e0d  00000000  00000000  0002c8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000026a9  00000000  00000000  0002f6dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00031d86  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000e04  00000000  00000000  00031e04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800153c 	.word	0x0800153c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800153c 	.word	0x0800153c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_InitTick+0x3c>)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_InitTick+0x40>)
{
 80004de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ea:	6810      	ldr	r0, [r2, #0]
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 f8aa 	bl	8000648 <HAL_SYSTICK_Config>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b958      	cbnz	r0, 8000510 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	2d0f      	cmp	r5, #15
 80004fa:	d809      	bhi.n	8000510 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	4602      	mov	r2, r0
 80004fe:	4629      	mov	r1, r5
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 f85e 	bl	80005c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_InitTick+0x44>)
 800050a:	4620      	mov	r0, r4
 800050c:	601d      	str	r5, [r3, #0]
 800050e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000512:	bd38      	pop	{r3, r4, r5, pc}
 8000514:	20000008 	.word	0x20000008
 8000518:	20000000 	.word	0x20000000
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_Init>:
{
 8000520:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x30>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f82f 	bl	80005a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffc8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000548:	f000 fef2 	bl	8001330 <HAL_MspInit>
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <HAL_IncTick+0x10>)
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <HAL_IncTick+0x14>)
 8000558:	6811      	ldr	r1, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	440b      	add	r3, r1
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	2000002c 	.word	0x2000002c
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800056c:	4b01      	ldr	r3, [pc, #4]	; (8000574 <HAL_GetTick+0x8>)
 800056e:	6818      	ldr	r0, [r3, #0]
}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	2000002c 	.word	0x2000002c

08000578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000578:	b538      	push	{r3, r4, r5, lr}
 800057a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800057c:	f7ff fff6 	bl	800056c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000580:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000582:	bf1c      	itt	ne
 8000584:	4b05      	ldrne	r3, [pc, #20]	; (800059c <HAL_Delay+0x24>)
 8000586:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000588:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800058a:	bf18      	it	ne
 800058c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800058e:	f7ff ffed 	bl	800056c <HAL_GetTick>
 8000592:	1b40      	subs	r0, r0, r5
 8000594:	4284      	cmp	r4, r0
 8000596:	d8fa      	bhi.n	800058e <HAL_Delay+0x16>
  {
  }
}
 8000598:	bd38      	pop	{r3, r4, r5, pc}
 800059a:	bf00      	nop
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005a2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005a8:	041b      	lsls	r3, r3, #16
 80005aa:	0c1b      	lsrs	r3, r3, #16
 80005ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005b0:	0200      	lsls	r0, r0, #8
 80005b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ba:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005bc:	60d3      	str	r3, [r2, #12]
 80005be:	4770      	bx	lr
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005c6:	b530      	push	{r4, r5, lr}
 80005c8:	68dc      	ldr	r4, [r3, #12]
 80005ca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ce:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	bf28      	it	cs
 80005d8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005da:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	f04f 0501 	mov.w	r5, #1
 80005e0:	fa05 f303 	lsl.w	r3, r5, r3
 80005e4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e8:	bf8c      	ite	hi
 80005ea:	3c03      	subhi	r4, #3
 80005ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ee:	4019      	ands	r1, r3
 80005f0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f2:	fa05 f404 	lsl.w	r4, r5, r4
 80005f6:	3c01      	subs	r4, #1
 80005f8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fc:	ea42 0201 	orr.w	r2, r2, r1
 8000600:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	bfad      	iteet	ge
 8000606:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060a:	f000 000f 	andlt.w	r0, r0, #15
 800060e:	4b06      	ldrlt	r3, [pc, #24]	; (8000628 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000610:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	bfb5      	itete	lt
 8000616:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00
 8000628:	e000ed14 	.word	0xe000ed14

0800062c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800062c:	2800      	cmp	r0, #0
 800062e:	db08      	blt.n	8000642 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000630:	0942      	lsrs	r2, r0, #5
 8000632:	2301      	movs	r3, #1
 8000634:	f000 001f 	and.w	r0, r0, #31
 8000638:	fa03 f000 	lsl.w	r0, r3, r0
 800063c:	4b01      	ldr	r3, [pc, #4]	; (8000644 <HAL_NVIC_EnableIRQ+0x18>)
 800063e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000642:	4770      	bx	lr
 8000644:	e000e100 	.word	0xe000e100

08000648 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000648:	3801      	subs	r0, #1
 800064a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800064e:	d20a      	bcs.n	8000666 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	4a07      	ldr	r2, [pc, #28]	; (8000670 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000654:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000656:	21f0      	movs	r1, #240	; 0xf0
 8000658:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800065c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000660:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000666:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000e010 	.word	0xe000e010
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000674:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000678:	2b02      	cmp	r3, #2
 800067a:	d003      	beq.n	8000684 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000680:	2001      	movs	r0, #1
 8000682:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000684:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000686:	2305      	movs	r3, #5
 8000688:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800068c:	6813      	ldr	r3, [r2, #0]
 800068e:	f023 0301 	bic.w	r3, r3, #1
 8000692:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000694:	2000      	movs	r0, #0
}
 8000696:	4770      	bx	lr

08000698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800069c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800069e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000850 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006a4:	4a68      	ldr	r2, [pc, #416]	; (8000848 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006a6:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000854 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006aa:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006ac:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80006ae:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b0:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 80006b2:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b4:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80006b6:	42ac      	cmp	r4, r5
 80006b8:	f040 80b0 	bne.w	800081c <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006bc:	684c      	ldr	r4, [r1, #4]
 80006be:	f024 0c10 	bic.w	ip, r4, #16
 80006c2:	f10c 36ff 	add.w	r6, ip, #4294967295
 80006c6:	2e01      	cmp	r6, #1
 80006c8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80006cc:	d812      	bhi.n	80006f4 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 80006ce:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006d0:	2603      	movs	r6, #3
 80006d2:	fa06 f60e 	lsl.w	r6, r6, lr
 80006d6:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006da:	68ce      	ldr	r6, [r1, #12]
 80006dc:	fa06 f60e 	lsl.w	r6, r6, lr
 80006e0:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80006e2:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80006e4:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006e6:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006ea:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006ee:	409e      	lsls	r6, r3
 80006f0:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80006f2:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006f4:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 80006f6:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006f8:	fa06 f60e 	lsl.w	r6, r6, lr
 80006fc:	43f6      	mvns	r6, r6
 80006fe:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000702:	688f      	ldr	r7, [r1, #8]
 8000704:	fa07 f70e 	lsl.w	r7, r7, lr
 8000708:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800070c:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000710:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000712:	d116      	bne.n	8000742 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000714:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000718:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800071c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000720:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000724:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000728:	f04f 0c0f 	mov.w	ip, #15
 800072c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000730:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000734:	690f      	ldr	r7, [r1, #16]
 8000736:	fa07 f70b 	lsl.w	r7, r7, fp
 800073a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 800073e:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000742:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000744:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000746:	f004 0703 	and.w	r7, r4, #3
 800074a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800074e:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000752:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000754:	00e6      	lsls	r6, r4, #3
 8000756:	d561      	bpl.n	800081c <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000758:	f04f 0b00 	mov.w	fp, #0
 800075c:	f8cd b00c 	str.w	fp, [sp, #12]
 8000760:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000764:	4e39      	ldr	r6, [pc, #228]	; (800084c <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800076a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800076e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000772:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000776:	9703      	str	r7, [sp, #12]
 8000778:	9f03      	ldr	r7, [sp, #12]
 800077a:	f023 0703 	bic.w	r7, r3, #3
 800077e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000782:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000786:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800078a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800078e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000792:	f04f 0e0f 	mov.w	lr, #15
 8000796:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800079a:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800079c:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007a0:	d043      	beq.n	800082a <HAL_GPIO_Init+0x192>
 80007a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007a6:	42b0      	cmp	r0, r6
 80007a8:	d041      	beq.n	800082e <HAL_GPIO_Init+0x196>
 80007aa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007ae:	42b0      	cmp	r0, r6
 80007b0:	d03f      	beq.n	8000832 <HAL_GPIO_Init+0x19a>
 80007b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007b6:	42b0      	cmp	r0, r6
 80007b8:	d03d      	beq.n	8000836 <HAL_GPIO_Init+0x19e>
 80007ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007be:	42b0      	cmp	r0, r6
 80007c0:	d03b      	beq.n	800083a <HAL_GPIO_Init+0x1a2>
 80007c2:	4548      	cmp	r0, r9
 80007c4:	d03b      	beq.n	800083e <HAL_GPIO_Init+0x1a6>
 80007c6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80007ca:	42b0      	cmp	r0, r6
 80007cc:	d039      	beq.n	8000842 <HAL_GPIO_Init+0x1aa>
 80007ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007d2:	42b0      	cmp	r0, r6
 80007d4:	bf14      	ite	ne
 80007d6:	2608      	movne	r6, #8
 80007d8:	2607      	moveq	r6, #7
 80007da:	fa06 f60c 	lsl.w	r6, r6, ip
 80007de:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007e2:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80007e4:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007e6:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007e8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007ec:	bf0c      	ite	eq
 80007ee:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007f0:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80007f2:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80007f4:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007f6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007fa:	bf0c      	ite	eq
 80007fc:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007fe:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000800:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000802:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000804:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000808:	bf0c      	ite	eq
 800080a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800080c:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 800080e:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000810:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000812:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000814:	bf54      	ite	pl
 8000816:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000818:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800081a:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800081c:	3301      	adds	r3, #1
 800081e:	2b10      	cmp	r3, #16
 8000820:	f47f af45 	bne.w	80006ae <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000824:	b005      	add	sp, #20
 8000826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800082a:	465e      	mov	r6, fp
 800082c:	e7d5      	b.n	80007da <HAL_GPIO_Init+0x142>
 800082e:	2601      	movs	r6, #1
 8000830:	e7d3      	b.n	80007da <HAL_GPIO_Init+0x142>
 8000832:	2602      	movs	r6, #2
 8000834:	e7d1      	b.n	80007da <HAL_GPIO_Init+0x142>
 8000836:	2603      	movs	r6, #3
 8000838:	e7cf      	b.n	80007da <HAL_GPIO_Init+0x142>
 800083a:	2604      	movs	r6, #4
 800083c:	e7cd      	b.n	80007da <HAL_GPIO_Init+0x142>
 800083e:	2605      	movs	r6, #5
 8000840:	e7cb      	b.n	80007da <HAL_GPIO_Init+0x142>
 8000842:	2606      	movs	r6, #6
 8000844:	e7c9      	b.n	80007da <HAL_GPIO_Init+0x142>
 8000846:	bf00      	nop
 8000848:	40013c00 	.word	0x40013c00
 800084c:	40020000 	.word	0x40020000
 8000850:	40023800 	.word	0x40023800
 8000854:	40021400 	.word	0x40021400

08000858 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000858:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800085c:	4604      	mov	r4, r0
 800085e:	b908      	cbnz	r0, 8000864 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000860:	2001      	movs	r0, #1
 8000862:	e03f      	b.n	80008e4 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000864:	6803      	ldr	r3, [r0, #0]
 8000866:	07dd      	lsls	r5, r3, #31
 8000868:	d410      	bmi.n	800088c <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800086a:	6823      	ldr	r3, [r4, #0]
 800086c:	0798      	lsls	r0, r3, #30
 800086e:	d45a      	bmi.n	8000926 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000870:	6823      	ldr	r3, [r4, #0]
 8000872:	071a      	lsls	r2, r3, #28
 8000874:	f100 809c 	bmi.w	80009b0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000878:	6823      	ldr	r3, [r4, #0]
 800087a:	075b      	lsls	r3, r3, #29
 800087c:	f100 80ba 	bmi.w	80009f4 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000880:	69a0      	ldr	r0, [r4, #24]
 8000882:	2800      	cmp	r0, #0
 8000884:	f040 811b 	bne.w	8000abe <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000888:	2000      	movs	r0, #0
 800088a:	e02b      	b.n	80008e4 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800088c:	4ba4      	ldr	r3, [pc, #656]	; (8000b20 <HAL_RCC_OscConfig+0x2c8>)
 800088e:	689a      	ldr	r2, [r3, #8]
 8000890:	f002 020c 	and.w	r2, r2, #12
 8000894:	2a04      	cmp	r2, #4
 8000896:	d007      	beq.n	80008a8 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000898:	689a      	ldr	r2, [r3, #8]
 800089a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800089e:	2a08      	cmp	r2, #8
 80008a0:	d10a      	bne.n	80008b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	0259      	lsls	r1, r3, #9
 80008a6:	d507      	bpl.n	80008b8 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008a8:	4b9d      	ldr	r3, [pc, #628]	; (8000b20 <HAL_RCC_OscConfig+0x2c8>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	039a      	lsls	r2, r3, #14
 80008ae:	d5dc      	bpl.n	800086a <HAL_RCC_OscConfig+0x12>
 80008b0:	6863      	ldr	r3, [r4, #4]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d1d9      	bne.n	800086a <HAL_RCC_OscConfig+0x12>
 80008b6:	e7d3      	b.n	8000860 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008b8:	6863      	ldr	r3, [r4, #4]
 80008ba:	4d99      	ldr	r5, [pc, #612]	; (8000b20 <HAL_RCC_OscConfig+0x2c8>)
 80008bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008c0:	d113      	bne.n	80008ea <HAL_RCC_OscConfig+0x92>
 80008c2:	682b      	ldr	r3, [r5, #0]
 80008c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008c8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008ca:	f7ff fe4f 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ce:	4d94      	ldr	r5, [pc, #592]	; (8000b20 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80008d0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008d2:	682b      	ldr	r3, [r5, #0]
 80008d4:	039b      	lsls	r3, r3, #14
 80008d6:	d4c8      	bmi.n	800086a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008d8:	f7ff fe48 	bl	800056c <HAL_GetTick>
 80008dc:	1b80      	subs	r0, r0, r6
 80008de:	2864      	cmp	r0, #100	; 0x64
 80008e0:	d9f7      	bls.n	80008d2 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 80008e2:	2003      	movs	r0, #3
}
 80008e4:	b002      	add	sp, #8
 80008e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008ee:	d104      	bne.n	80008fa <HAL_RCC_OscConfig+0xa2>
 80008f0:	682b      	ldr	r3, [r5, #0]
 80008f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008f6:	602b      	str	r3, [r5, #0]
 80008f8:	e7e3      	b.n	80008c2 <HAL_RCC_OscConfig+0x6a>
 80008fa:	682a      	ldr	r2, [r5, #0]
 80008fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000900:	602a      	str	r2, [r5, #0]
 8000902:	682a      	ldr	r2, [r5, #0]
 8000904:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000908:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800090a:	2b00      	cmp	r3, #0
 800090c:	d1dd      	bne.n	80008ca <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 800090e:	f7ff fe2d 	bl	800056c <HAL_GetTick>
 8000912:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000914:	682b      	ldr	r3, [r5, #0]
 8000916:	039f      	lsls	r7, r3, #14
 8000918:	d5a7      	bpl.n	800086a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800091a:	f7ff fe27 	bl	800056c <HAL_GetTick>
 800091e:	1b80      	subs	r0, r0, r6
 8000920:	2864      	cmp	r0, #100	; 0x64
 8000922:	d9f7      	bls.n	8000914 <HAL_RCC_OscConfig+0xbc>
 8000924:	e7dd      	b.n	80008e2 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000926:	4b7e      	ldr	r3, [pc, #504]	; (8000b20 <HAL_RCC_OscConfig+0x2c8>)
 8000928:	689a      	ldr	r2, [r3, #8]
 800092a:	f012 0f0c 	tst.w	r2, #12
 800092e:	d007      	beq.n	8000940 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000930:	689a      	ldr	r2, [r3, #8]
 8000932:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000936:	2a08      	cmp	r2, #8
 8000938:	d111      	bne.n	800095e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	025e      	lsls	r6, r3, #9
 800093e:	d40e      	bmi.n	800095e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000940:	4b77      	ldr	r3, [pc, #476]	; (8000b20 <HAL_RCC_OscConfig+0x2c8>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	0795      	lsls	r5, r2, #30
 8000946:	d502      	bpl.n	800094e <HAL_RCC_OscConfig+0xf6>
 8000948:	68e2      	ldr	r2, [r4, #12]
 800094a:	2a01      	cmp	r2, #1
 800094c:	d188      	bne.n	8000860 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	6921      	ldr	r1, [r4, #16]
 8000952:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000956:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800095a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800095c:	e788      	b.n	8000870 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800095e:	68e2      	ldr	r2, [r4, #12]
 8000960:	4b70      	ldr	r3, [pc, #448]	; (8000b24 <HAL_RCC_OscConfig+0x2cc>)
 8000962:	b1b2      	cbz	r2, 8000992 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000964:	2201      	movs	r2, #1
 8000966:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000968:	f7ff fe00 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800096c:	4d6c      	ldr	r5, [pc, #432]	; (8000b20 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800096e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000970:	682b      	ldr	r3, [r5, #0]
 8000972:	0798      	lsls	r0, r3, #30
 8000974:	d507      	bpl.n	8000986 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000976:	682b      	ldr	r3, [r5, #0]
 8000978:	6922      	ldr	r2, [r4, #16]
 800097a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800097e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000982:	602b      	str	r3, [r5, #0]
 8000984:	e774      	b.n	8000870 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000986:	f7ff fdf1 	bl	800056c <HAL_GetTick>
 800098a:	1b80      	subs	r0, r0, r6
 800098c:	2802      	cmp	r0, #2
 800098e:	d9ef      	bls.n	8000970 <HAL_RCC_OscConfig+0x118>
 8000990:	e7a7      	b.n	80008e2 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000992:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000994:	f7ff fdea 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000998:	4d61      	ldr	r5, [pc, #388]	; (8000b20 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800099a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800099c:	682b      	ldr	r3, [r5, #0]
 800099e:	0799      	lsls	r1, r3, #30
 80009a0:	f57f af66 	bpl.w	8000870 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009a4:	f7ff fde2 	bl	800056c <HAL_GetTick>
 80009a8:	1b80      	subs	r0, r0, r6
 80009aa:	2802      	cmp	r0, #2
 80009ac:	d9f6      	bls.n	800099c <HAL_RCC_OscConfig+0x144>
 80009ae:	e798      	b.n	80008e2 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009b0:	6962      	ldr	r2, [r4, #20]
 80009b2:	4b5d      	ldr	r3, [pc, #372]	; (8000b28 <HAL_RCC_OscConfig+0x2d0>)
 80009b4:	b17a      	cbz	r2, 80009d6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80009b6:	2201      	movs	r2, #1
 80009b8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009ba:	f7ff fdd7 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009be:	4d58      	ldr	r5, [pc, #352]	; (8000b20 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80009c0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009c2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009c4:	079f      	lsls	r7, r3, #30
 80009c6:	f53f af57 	bmi.w	8000878 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009ca:	f7ff fdcf 	bl	800056c <HAL_GetTick>
 80009ce:	1b80      	subs	r0, r0, r6
 80009d0:	2802      	cmp	r0, #2
 80009d2:	d9f6      	bls.n	80009c2 <HAL_RCC_OscConfig+0x16a>
 80009d4:	e785      	b.n	80008e2 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 80009d6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009d8:	f7ff fdc8 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009dc:	4d50      	ldr	r5, [pc, #320]	; (8000b20 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80009de:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009e0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009e2:	0798      	lsls	r0, r3, #30
 80009e4:	f57f af48 	bpl.w	8000878 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009e8:	f7ff fdc0 	bl	800056c <HAL_GetTick>
 80009ec:	1b80      	subs	r0, r0, r6
 80009ee:	2802      	cmp	r0, #2
 80009f0:	d9f6      	bls.n	80009e0 <HAL_RCC_OscConfig+0x188>
 80009f2:	e776      	b.n	80008e2 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009f4:	4b4a      	ldr	r3, [pc, #296]	; (8000b20 <HAL_RCC_OscConfig+0x2c8>)
 80009f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009f8:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80009fc:	d128      	bne.n	8000a50 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	9201      	str	r2, [sp, #4]
 8000a00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a06:	641a      	str	r2, [r3, #64]	; 0x40
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	9301      	str	r3, [sp, #4]
 8000a10:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a12:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a14:	4d45      	ldr	r5, [pc, #276]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
 8000a16:	682b      	ldr	r3, [r5, #0]
 8000a18:	05d9      	lsls	r1, r3, #23
 8000a1a:	d51b      	bpl.n	8000a54 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a1c:	68a3      	ldr	r3, [r4, #8]
 8000a1e:	4d40      	ldr	r5, [pc, #256]	; (8000b20 <HAL_RCC_OscConfig+0x2c8>)
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d127      	bne.n	8000a74 <HAL_RCC_OscConfig+0x21c>
 8000a24:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000a2c:	f7ff fd9e 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a30:	4d3b      	ldr	r5, [pc, #236]	; (8000b20 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a32:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a34:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a38:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a3a:	079b      	lsls	r3, r3, #30
 8000a3c:	d539      	bpl.n	8000ab2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	f43f af1e 	beq.w	8000880 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a44:	4a36      	ldr	r2, [pc, #216]	; (8000b20 <HAL_RCC_OscConfig+0x2c8>)
 8000a46:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4e:	e717      	b.n	8000880 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000a50:	2600      	movs	r6, #0
 8000a52:	e7df      	b.n	8000a14 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a54:	682b      	ldr	r3, [r5, #0]
 8000a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000a5c:	f7ff fd86 	bl	800056c <HAL_GetTick>
 8000a60:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a62:	682b      	ldr	r3, [r5, #0]
 8000a64:	05da      	lsls	r2, r3, #23
 8000a66:	d4d9      	bmi.n	8000a1c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a68:	f7ff fd80 	bl	800056c <HAL_GetTick>
 8000a6c:	1bc0      	subs	r0, r0, r7
 8000a6e:	2802      	cmp	r0, #2
 8000a70:	d9f7      	bls.n	8000a62 <HAL_RCC_OscConfig+0x20a>
 8000a72:	e736      	b.n	80008e2 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a74:	2b05      	cmp	r3, #5
 8000a76:	d104      	bne.n	8000a82 <HAL_RCC_OscConfig+0x22a>
 8000a78:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a7a:	f043 0304 	orr.w	r3, r3, #4
 8000a7e:	672b      	str	r3, [r5, #112]	; 0x70
 8000a80:	e7d0      	b.n	8000a24 <HAL_RCC_OscConfig+0x1cc>
 8000a82:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a84:	f022 0201 	bic.w	r2, r2, #1
 8000a88:	672a      	str	r2, [r5, #112]	; 0x70
 8000a8a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a8c:	f022 0204 	bic.w	r2, r2, #4
 8000a90:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d1ca      	bne.n	8000a2c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000a96:	f7ff fd69 	bl	800056c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a9a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a9e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000aa0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aa2:	0798      	lsls	r0, r3, #30
 8000aa4:	d5cb      	bpl.n	8000a3e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aa6:	f7ff fd61 	bl	800056c <HAL_GetTick>
 8000aaa:	1bc0      	subs	r0, r0, r7
 8000aac:	4540      	cmp	r0, r8
 8000aae:	d9f7      	bls.n	8000aa0 <HAL_RCC_OscConfig+0x248>
 8000ab0:	e717      	b.n	80008e2 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ab2:	f7ff fd5b 	bl	800056c <HAL_GetTick>
 8000ab6:	1bc0      	subs	r0, r0, r7
 8000ab8:	4540      	cmp	r0, r8
 8000aba:	d9bd      	bls.n	8000a38 <HAL_RCC_OscConfig+0x1e0>
 8000abc:	e711      	b.n	80008e2 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000abe:	4d18      	ldr	r5, [pc, #96]	; (8000b20 <HAL_RCC_OscConfig+0x2c8>)
 8000ac0:	68ab      	ldr	r3, [r5, #8]
 8000ac2:	f003 030c 	and.w	r3, r3, #12
 8000ac6:	2b08      	cmp	r3, #8
 8000ac8:	d047      	beq.n	8000b5a <HAL_RCC_OscConfig+0x302>
 8000aca:	4e19      	ldr	r6, [pc, #100]	; (8000b30 <HAL_RCC_OscConfig+0x2d8>)
 8000acc:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ace:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000ad0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ad2:	d135      	bne.n	8000b40 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000ad4:	f7ff fd4a 	bl	800056c <HAL_GetTick>
 8000ad8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ada:	682b      	ldr	r3, [r5, #0]
 8000adc:	0199      	lsls	r1, r3, #6
 8000ade:	d429      	bmi.n	8000b34 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ae0:	6a22      	ldr	r2, [r4, #32]
 8000ae2:	69e3      	ldr	r3, [r4, #28]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ae8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000aec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000aee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000af2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000af4:	4c0a      	ldr	r4, [pc, #40]	; (8000b20 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000af6:	0852      	lsrs	r2, r2, #1
 8000af8:	3a01      	subs	r2, #1
 8000afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000afe:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b00:	2301      	movs	r3, #1
 8000b02:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b04:	f7ff fd32 	bl	800056c <HAL_GetTick>
 8000b08:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b0a:	6823      	ldr	r3, [r4, #0]
 8000b0c:	019a      	lsls	r2, r3, #6
 8000b0e:	f53f aebb 	bmi.w	8000888 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b12:	f7ff fd2b 	bl	800056c <HAL_GetTick>
 8000b16:	1b40      	subs	r0, r0, r5
 8000b18:	2802      	cmp	r0, #2
 8000b1a:	d9f6      	bls.n	8000b0a <HAL_RCC_OscConfig+0x2b2>
 8000b1c:	e6e1      	b.n	80008e2 <HAL_RCC_OscConfig+0x8a>
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800
 8000b24:	42470000 	.word	0x42470000
 8000b28:	42470e80 	.word	0x42470e80
 8000b2c:	40007000 	.word	0x40007000
 8000b30:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b34:	f7ff fd1a 	bl	800056c <HAL_GetTick>
 8000b38:	1bc0      	subs	r0, r0, r7
 8000b3a:	2802      	cmp	r0, #2
 8000b3c:	d9cd      	bls.n	8000ada <HAL_RCC_OscConfig+0x282>
 8000b3e:	e6d0      	b.n	80008e2 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000b40:	f7ff fd14 	bl	800056c <HAL_GetTick>
 8000b44:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b46:	682b      	ldr	r3, [r5, #0]
 8000b48:	019b      	lsls	r3, r3, #6
 8000b4a:	f57f ae9d 	bpl.w	8000888 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b4e:	f7ff fd0d 	bl	800056c <HAL_GetTick>
 8000b52:	1b00      	subs	r0, r0, r4
 8000b54:	2802      	cmp	r0, #2
 8000b56:	d9f6      	bls.n	8000b46 <HAL_RCC_OscConfig+0x2ee>
 8000b58:	e6c3      	b.n	80008e2 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000b5a:	2801      	cmp	r0, #1
 8000b5c:	f43f aec2 	beq.w	80008e4 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8000b60:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b62:	69e3      	ldr	r3, [r4, #28]
 8000b64:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	f47f ae79 	bne.w	8000860 <HAL_RCC_OscConfig+0x8>
 8000b6e:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b70:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b74:	4293      	cmp	r3, r2
 8000b76:	f47f ae73 	bne.w	8000860 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000b80:	4003      	ands	r3, r0
 8000b82:	4293      	cmp	r3, r2
 8000b84:	f47f ae6c 	bne.w	8000860 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000b88:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000b8a:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	f47f ae66 	bne.w	8000860 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000b94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000b96:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000b9a:	1ac0      	subs	r0, r0, r3
 8000b9c:	bf18      	it	ne
 8000b9e:	2001      	movne	r0, #1
 8000ba0:	e6a0      	b.n	80008e4 <HAL_RCC_OscConfig+0x8c>
 8000ba2:	bf00      	nop

08000ba4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ba4:	4913      	ldr	r1, [pc, #76]	; (8000bf4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000ba6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ba8:	688b      	ldr	r3, [r1, #8]
 8000baa:	f003 030c 	and.w	r3, r3, #12
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	d003      	beq.n	8000bba <HAL_RCC_GetSysClockFreq+0x16>
 8000bb2:	2b08      	cmp	r3, #8
 8000bb4:	d003      	beq.n	8000bbe <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000bb6:	4810      	ldr	r0, [pc, #64]	; (8000bf8 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000bb8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000bba:	4810      	ldr	r0, [pc, #64]	; (8000bfc <HAL_RCC_GetSysClockFreq+0x58>)
 8000bbc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bbe:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bc0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bc2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bc4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bc8:	bf14      	ite	ne
 8000bca:	480c      	ldrne	r0, [pc, #48]	; (8000bfc <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bcc:	480a      	ldreq	r0, [pc, #40]	; (8000bf8 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bce:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000bd2:	bf18      	it	ne
 8000bd4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bd6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bda:	fba1 0100 	umull	r0, r1, r1, r0
 8000bde:	f7ff faf3 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000be2:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <HAL_RCC_GetSysClockFreq+0x50>)
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000bea:	3301      	adds	r3, #1
 8000bec:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000bee:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bf2:	bd08      	pop	{r3, pc}
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	00f42400 	.word	0x00f42400
 8000bfc:	007a1200 	.word	0x007a1200

08000c00 <HAL_RCC_ClockConfig>:
{
 8000c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c04:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c06:	4604      	mov	r4, r0
 8000c08:	b910      	cbnz	r0, 8000c10 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c10:	4b44      	ldr	r3, [pc, #272]	; (8000d24 <HAL_RCC_ClockConfig+0x124>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	f002 020f 	and.w	r2, r2, #15
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	d329      	bcc.n	8000c70 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c1c:	6821      	ldr	r1, [r4, #0]
 8000c1e:	078f      	lsls	r7, r1, #30
 8000c20:	d42e      	bmi.n	8000c80 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c22:	07c8      	lsls	r0, r1, #31
 8000c24:	d441      	bmi.n	8000caa <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c26:	4b3f      	ldr	r3, [pc, #252]	; (8000d24 <HAL_RCC_ClockConfig+0x124>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	f002 020f 	and.w	r2, r2, #15
 8000c2e:	4295      	cmp	r5, r2
 8000c30:	d367      	bcc.n	8000d02 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c32:	6822      	ldr	r2, [r4, #0]
 8000c34:	0751      	lsls	r1, r2, #29
 8000c36:	d46d      	bmi.n	8000d14 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c38:	0713      	lsls	r3, r2, #28
 8000c3a:	d507      	bpl.n	8000c4c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c3c:	4a3a      	ldr	r2, [pc, #232]	; (8000d28 <HAL_RCC_ClockConfig+0x128>)
 8000c3e:	6921      	ldr	r1, [r4, #16]
 8000c40:	6893      	ldr	r3, [r2, #8]
 8000c42:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c46:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c4a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c4c:	f7ff ffaa 	bl	8000ba4 <HAL_RCC_GetSysClockFreq>
 8000c50:	4b35      	ldr	r3, [pc, #212]	; (8000d28 <HAL_RCC_ClockConfig+0x128>)
 8000c52:	4a36      	ldr	r2, [pc, #216]	; (8000d2c <HAL_RCC_ClockConfig+0x12c>)
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c5a:	5cd3      	ldrb	r3, [r2, r3]
 8000c5c:	40d8      	lsrs	r0, r3
 8000c5e:	4b34      	ldr	r3, [pc, #208]	; (8000d30 <HAL_RCC_ClockConfig+0x130>)
 8000c60:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000c62:	4b34      	ldr	r3, [pc, #208]	; (8000d34 <HAL_RCC_ClockConfig+0x134>)
 8000c64:	6818      	ldr	r0, [r3, #0]
 8000c66:	f7ff fc37 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c70:	b2ca      	uxtb	r2, r1
 8000c72:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	4299      	cmp	r1, r3
 8000c7c:	d1c5      	bne.n	8000c0a <HAL_RCC_ClockConfig+0xa>
 8000c7e:	e7cd      	b.n	8000c1c <HAL_RCC_ClockConfig+0x1c>
 8000c80:	4b29      	ldr	r3, [pc, #164]	; (8000d28 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c82:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c86:	bf1e      	ittt	ne
 8000c88:	689a      	ldrne	r2, [r3, #8]
 8000c8a:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c8e:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c90:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c92:	bf42      	ittt	mi
 8000c94:	689a      	ldrmi	r2, [r3, #8]
 8000c96:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c9a:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	68a0      	ldr	r0, [r4, #8]
 8000ca0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000ca4:	4302      	orrs	r2, r0
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	e7bb      	b.n	8000c22 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000caa:	6862      	ldr	r2, [r4, #4]
 8000cac:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <HAL_RCC_ClockConfig+0x128>)
 8000cae:	2a01      	cmp	r2, #1
 8000cb0:	d11d      	bne.n	8000cee <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb8:	d0a7      	beq.n	8000c0a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cba:	4e1b      	ldr	r6, [pc, #108]	; (8000d28 <HAL_RCC_ClockConfig+0x128>)
 8000cbc:	68b3      	ldr	r3, [r6, #8]
 8000cbe:	f023 0303 	bic.w	r3, r3, #3
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000cc6:	f7ff fc51 	bl	800056c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cca:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cce:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cd0:	68b3      	ldr	r3, [r6, #8]
 8000cd2:	6862      	ldr	r2, [r4, #4]
 8000cd4:	f003 030c 	and.w	r3, r3, #12
 8000cd8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000cdc:	d0a3      	beq.n	8000c26 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cde:	f7ff fc45 	bl	800056c <HAL_GetTick>
 8000ce2:	1bc0      	subs	r0, r0, r7
 8000ce4:	4540      	cmp	r0, r8
 8000ce6:	d9f3      	bls.n	8000cd0 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000ce8:	2003      	movs	r0, #3
}
 8000cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cee:	1e91      	subs	r1, r2, #2
 8000cf0:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cf2:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cf4:	d802      	bhi.n	8000cfc <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cf6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000cfa:	e7dd      	b.n	8000cb8 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cfc:	f013 0f02 	tst.w	r3, #2
 8000d00:	e7da      	b.n	8000cb8 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d02:	b2ea      	uxtb	r2, r5
 8000d04:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 030f 	and.w	r3, r3, #15
 8000d0c:	429d      	cmp	r5, r3
 8000d0e:	f47f af7c 	bne.w	8000c0a <HAL_RCC_ClockConfig+0xa>
 8000d12:	e78e      	b.n	8000c32 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d14:	4904      	ldr	r1, [pc, #16]	; (8000d28 <HAL_RCC_ClockConfig+0x128>)
 8000d16:	68e0      	ldr	r0, [r4, #12]
 8000d18:	688b      	ldr	r3, [r1, #8]
 8000d1a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d1e:	4303      	orrs	r3, r0
 8000d20:	608b      	str	r3, [r1, #8]
 8000d22:	e789      	b.n	8000c38 <HAL_RCC_ClockConfig+0x38>
 8000d24:	40023c00 	.word	0x40023c00
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	08001559 	.word	0x08001559
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20000004 	.word	0x20000004

08000d38 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d3a:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000d42:	5cd3      	ldrb	r3, [r2, r3]
 8000d44:	4a03      	ldr	r2, [pc, #12]	; (8000d54 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d46:	6810      	ldr	r0, [r2, #0]
}
 8000d48:	40d8      	lsrs	r0, r3
 8000d4a:	4770      	bx	lr
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	08001569 	.word	0x08001569
 8000d54:	20000008 	.word	0x20000008

08000d58 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <HAL_RCC_GetPCLK2Freq+0x14>)
 8000d5a:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000d62:	5cd3      	ldrb	r3, [r2, r3]
 8000d64:	4a03      	ldr	r2, [pc, #12]	; (8000d74 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000d66:	6810      	ldr	r0, [r2, #0]
}
 8000d68:	40d8      	lsrs	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	08001569 	.word	0x08001569
 8000d74:	20000008 	.word	0x20000008

08000d78 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000d78:	6803      	ldr	r3, [r0, #0]
 8000d7a:	68da      	ldr	r2, [r3, #12]
 8000d7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000d80:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000d82:	695a      	ldr	r2, [r3, #20]
 8000d84:	f022 0201 	bic.w	r2, r2, #1
 8000d88:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000d8a:	2320      	movs	r3, #32
 8000d8c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000d90:	4770      	bx	lr
	...

08000d94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000d94:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d96:	6803      	ldr	r3, [r0, #0]
 8000d98:	68c1      	ldr	r1, [r0, #12]
 8000d9a:	691a      	ldr	r2, [r3, #16]
{
 8000d9c:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d9e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000da2:	430a      	orrs	r2, r1
 8000da4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000da6:	6925      	ldr	r5, [r4, #16]
 8000da8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8000daa:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000dac:	69c0      	ldr	r0, [r0, #28]
 8000dae:	432a      	orrs	r2, r5
 8000db0:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000db2:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000db6:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8000db8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000dbc:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000dc2:	695a      	ldr	r2, [r3, #20]
 8000dc4:	69a1      	ldr	r1, [r4, #24]
 8000dc6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000dca:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000dcc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000dd0:	615a      	str	r2, [r3, #20]
 8000dd2:	4a25      	ldr	r2, [pc, #148]	; (8000e68 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000dd4:	d129      	bne.n	8000e2a <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d003      	beq.n	8000de2 <UART_SetConfig+0x4e>
 8000dda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d120      	bne.n	8000e24 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000de2:	f7ff ffb9 	bl	8000d58 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000de6:	6862      	ldr	r2, [r4, #4]
 8000de8:	6825      	ldr	r5, [r4, #0]
 8000dea:	1892      	adds	r2, r2, r2
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	f04f 0119 	mov.w	r1, #25
 8000df4:	415b      	adcs	r3, r3
 8000df6:	fba0 0101 	umull	r0, r1, r0, r1
 8000dfa:	f7ff f9e5 	bl	80001c8 <__aeabi_uldivmod>
 8000dfe:	2164      	movs	r1, #100	; 0x64
 8000e00:	fbb0 f4f1 	udiv	r4, r0, r1
 8000e04:	fb01 0314 	mls	r3, r1, r4, r0
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	3332      	adds	r3, #50	; 0x32
 8000e0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e10:	f003 0207 	and.w	r2, r3, #7
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8000e1a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000e1e:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000e20:	60ab      	str	r3, [r5, #8]
 8000e22:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8000e24:	f7ff ff88 	bl	8000d38 <HAL_RCC_GetPCLK1Freq>
 8000e28:	e7dd      	b.n	8000de6 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d002      	beq.n	8000e34 <UART_SetConfig+0xa0>
 8000e2e:	4a0f      	ldr	r2, [pc, #60]	; (8000e6c <UART_SetConfig+0xd8>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d116      	bne.n	8000e62 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8000e34:	f7ff ff90 	bl	8000d58 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000e38:	6863      	ldr	r3, [r4, #4]
 8000e3a:	6825      	ldr	r5, [r4, #0]
 8000e3c:	2119      	movs	r1, #25
 8000e3e:	009a      	lsls	r2, r3, #2
 8000e40:	fba0 0101 	umull	r0, r1, r0, r1
 8000e44:	0f9b      	lsrs	r3, r3, #30
 8000e46:	f7ff f9bf 	bl	80001c8 <__aeabi_uldivmod>
 8000e4a:	2264      	movs	r2, #100	; 0x64
 8000e4c:	fbb0 f1f2 	udiv	r1, r0, r2
 8000e50:	fb02 0311 	mls	r3, r2, r1, r0
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	3332      	adds	r3, #50	; 0x32
 8000e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e5c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8000e60:	e7de      	b.n	8000e20 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8000e62:	f7ff ff69 	bl	8000d38 <HAL_RCC_GetPCLK1Freq>
 8000e66:	e7e7      	b.n	8000e38 <UART_SetConfig+0xa4>
 8000e68:	40011000 	.word	0x40011000
 8000e6c:	40011400 	.word	0x40011400

08000e70 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e72:	4604      	mov	r4, r0
 8000e74:	460e      	mov	r6, r1
 8000e76:	4617      	mov	r7, r2
 8000e78:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000e7a:	6821      	ldr	r1, [r4, #0]
 8000e7c:	680b      	ldr	r3, [r1, #0]
 8000e7e:	ea36 0303 	bics.w	r3, r6, r3
 8000e82:	d101      	bne.n	8000e88 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000e84:	2000      	movs	r0, #0
}
 8000e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000e88:	1c6b      	adds	r3, r5, #1
 8000e8a:	d0f7      	beq.n	8000e7c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e8c:	b995      	cbnz	r5, 8000eb4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000e8e:	6823      	ldr	r3, [r4, #0]
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000e96:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000e98:	695a      	ldr	r2, [r3, #20]
 8000e9a:	f022 0201 	bic.w	r2, r2, #1
 8000e9e:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000ea0:	2320      	movs	r3, #32
 8000ea2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000ea6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000eb4:	f7ff fb5a 	bl	800056c <HAL_GetTick>
 8000eb8:	1bc0      	subs	r0, r0, r7
 8000eba:	4285      	cmp	r5, r0
 8000ebc:	d2dd      	bcs.n	8000e7a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000ebe:	e7e6      	b.n	8000e8e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000ec0 <HAL_UART_Init>:
{
 8000ec0:	b510      	push	{r4, lr}
  if (huart == NULL)
 8000ec2:	4604      	mov	r4, r0
 8000ec4:	b340      	cbz	r0, 8000f18 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8000ec6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000eca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ece:	b91b      	cbnz	r3, 8000ed8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000ed0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000ed4:	f000 fa48 	bl	8001368 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8000ed8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000eda:	2324      	movs	r3, #36	; 0x24
 8000edc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000ee0:	68d3      	ldr	r3, [r2, #12]
 8000ee2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ee6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000ee8:	4620      	mov	r0, r4
 8000eea:	f7ff ff53 	bl	8000d94 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000eee:	6823      	ldr	r3, [r4, #0]
 8000ef0:	691a      	ldr	r2, [r3, #16]
 8000ef2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000ef6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000ef8:	695a      	ldr	r2, [r3, #20]
 8000efa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000efe:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000f00:	68da      	ldr	r2, [r3, #12]
 8000f02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f06:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f08:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8000f0a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f0c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000f0e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000f12:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000f16:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f18:	2001      	movs	r0, #1
}
 8000f1a:	bd10      	pop	{r4, pc}

08000f1c <HAL_UART_Transmit>:
{
 8000f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f20:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8000f22:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f26:	2b20      	cmp	r3, #32
{
 8000f28:	4604      	mov	r4, r0
 8000f2a:	460d      	mov	r5, r1
 8000f2c:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8000f2e:	d151      	bne.n	8000fd4 <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8000f30:	2900      	cmp	r1, #0
 8000f32:	d04c      	beq.n	8000fce <HAL_UART_Transmit+0xb2>
 8000f34:	2a00      	cmp	r2, #0
 8000f36:	d04a      	beq.n	8000fce <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8000f38:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d049      	beq.n	8000fd4 <HAL_UART_Transmit+0xb8>
 8000f40:	2301      	movs	r3, #1
 8000f42:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f46:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000f4a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f4c:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000f50:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000f54:	f7ff fb0a 	bl	800056c <HAL_GetTick>
    huart->TxXferSize = Size;
 8000f58:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8000f5c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8000f5e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8000f62:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8000f66:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	b95b      	cbnz	r3, 8000f84 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	4632      	mov	r2, r6
 8000f70:	2140      	movs	r1, #64	; 0x40
 8000f72:	4620      	mov	r0, r4
 8000f74:	f7ff ff7c 	bl	8000e70 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000f78:	b9a0      	cbnz	r0, 8000fa4 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 8000f7a:	2320      	movs	r3, #32
 8000f7c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 8000f84:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000f86:	3b01      	subs	r3, #1
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000f8c:	68a3      	ldr	r3, [r4, #8]
 8000f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f92:	4632      	mov	r2, r6
 8000f94:	463b      	mov	r3, r7
 8000f96:	f04f 0180 	mov.w	r1, #128	; 0x80
 8000f9a:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000f9c:	d10e      	bne.n	8000fbc <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f9e:	f7ff ff67 	bl	8000e70 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000fa2:	b110      	cbz	r0, 8000faa <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000faa:	882b      	ldrh	r3, [r5, #0]
 8000fac:	6822      	ldr	r2, [r4, #0]
 8000fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fb2:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000fb4:	6923      	ldr	r3, [r4, #16]
 8000fb6:	b943      	cbnz	r3, 8000fca <HAL_UART_Transmit+0xae>
          pData += 2U;
 8000fb8:	3502      	adds	r5, #2
 8000fba:	e7d4      	b.n	8000f66 <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000fbc:	f7ff ff58 	bl	8000e70 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000fc0:	2800      	cmp	r0, #0
 8000fc2:	d1ef      	bne.n	8000fa4 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000fc4:	6823      	ldr	r3, [r4, #0]
 8000fc6:	782a      	ldrb	r2, [r5, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	3501      	adds	r5, #1
 8000fcc:	e7cb      	b.n	8000f66 <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 8000fce:	2001      	movs	r0, #1
 8000fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8000fd4:	2002      	movs	r0, #2
}
 8000fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000fda <HAL_UART_TxCpltCallback>:
 8000fda:	4770      	bx	lr

08000fdc <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8000fdc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8000fe0:	2b22      	cmp	r3, #34	; 0x22
{
 8000fe2:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8000fe4:	d136      	bne.n	8001054 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000fe6:	6883      	ldr	r3, [r0, #8]
 8000fe8:	6901      	ldr	r1, [r0, #16]
 8000fea:	6802      	ldr	r2, [r0, #0]
 8000fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ff0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000ff2:	d123      	bne.n	800103c <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000ff4:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8000ff6:	b9e9      	cbnz	r1, 8001034 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000ff8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ffc:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001000:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001002:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001004:	3c01      	subs	r4, #1
 8001006:	b2a4      	uxth	r4, r4
 8001008:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800100a:	b98c      	cbnz	r4, 8001030 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800100c:	6803      	ldr	r3, [r0, #0]
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	f022 0220 	bic.w	r2, r2, #32
 8001014:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001016:	68da      	ldr	r2, [r3, #12]
 8001018:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800101c:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800101e:	695a      	ldr	r2, [r3, #20]
 8001020:	f022 0201 	bic.w	r2, r2, #1
 8001024:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001026:	2320      	movs	r3, #32
 8001028:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800102c:	f000 f97e 	bl	800132c <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8001030:	2000      	movs	r0, #0
}
 8001032:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	f823 2b01 	strh.w	r2, [r3], #1
 800103a:	e7e1      	b.n	8001000 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800103c:	b921      	cbnz	r1, 8001048 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800103e:	1c59      	adds	r1, r3, #1
 8001040:	6852      	ldr	r2, [r2, #4]
 8001042:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001044:	701a      	strb	r2, [r3, #0]
 8001046:	e7dc      	b.n	8001002 <UART_Receive_IT+0x26>
 8001048:	6852      	ldr	r2, [r2, #4]
 800104a:	1c59      	adds	r1, r3, #1
 800104c:	6281      	str	r1, [r0, #40]	; 0x28
 800104e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001052:	e7f7      	b.n	8001044 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001054:	2002      	movs	r0, #2
 8001056:	bd10      	pop	{r4, pc}

08001058 <HAL_UART_ErrorCallback>:
 8001058:	4770      	bx	lr
	...

0800105c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800105c:	6803      	ldr	r3, [r0, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001060:	68d9      	ldr	r1, [r3, #12]
{
 8001062:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001064:	0716      	lsls	r6, r2, #28
{
 8001066:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001068:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800106a:	d107      	bne.n	800107c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800106c:	0696      	lsls	r6, r2, #26
 800106e:	d55c      	bpl.n	800112a <HAL_UART_IRQHandler+0xce>
 8001070:	068d      	lsls	r5, r1, #26
 8001072:	d55a      	bpl.n	800112a <HAL_UART_IRQHandler+0xce>
}
 8001074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001078:	f7ff bfb0 	b.w	8000fdc <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800107c:	f015 0501 	ands.w	r5, r5, #1
 8001080:	d102      	bne.n	8001088 <HAL_UART_IRQHandler+0x2c>
 8001082:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001086:	d050      	beq.n	800112a <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001088:	07d0      	lsls	r0, r2, #31
 800108a:	d505      	bpl.n	8001098 <HAL_UART_IRQHandler+0x3c>
 800108c:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800108e:	bf42      	ittt	mi
 8001090:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001092:	f043 0301 	orrmi.w	r3, r3, #1
 8001096:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001098:	0756      	lsls	r6, r2, #29
 800109a:	d504      	bpl.n	80010a6 <HAL_UART_IRQHandler+0x4a>
 800109c:	b11d      	cbz	r5, 80010a6 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800109e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80010a6:	0790      	lsls	r0, r2, #30
 80010a8:	d504      	bpl.n	80010b4 <HAL_UART_IRQHandler+0x58>
 80010aa:	b11d      	cbz	r5, 80010b4 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80010ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80010b4:	0713      	lsls	r3, r2, #28
 80010b6:	d506      	bpl.n	80010c6 <HAL_UART_IRQHandler+0x6a>
 80010b8:	068e      	lsls	r6, r1, #26
 80010ba:	d400      	bmi.n	80010be <HAL_UART_IRQHandler+0x62>
 80010bc:	b11d      	cbz	r5, 80010c6 <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80010be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80010c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d066      	beq.n	800119a <HAL_UART_IRQHandler+0x13e>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80010cc:	0695      	lsls	r5, r2, #26
 80010ce:	d504      	bpl.n	80010da <HAL_UART_IRQHandler+0x7e>
 80010d0:	0688      	lsls	r0, r1, #26
 80010d2:	d502      	bpl.n	80010da <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 80010d4:	4620      	mov	r0, r4
 80010d6:	f7ff ff81 	bl	8000fdc <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80010de:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80010e0:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80010e2:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80010e4:	d402      	bmi.n	80010ec <HAL_UART_IRQHandler+0x90>
 80010e6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80010ea:	d01a      	beq.n	8001122 <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 80010ec:	f7ff fe44 	bl	8000d78 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80010f0:	6823      	ldr	r3, [r4, #0]
 80010f2:	695a      	ldr	r2, [r3, #20]
 80010f4:	0652      	lsls	r2, r2, #25
 80010f6:	d510      	bpl.n	800111a <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80010f8:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80010fa:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80010fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001100:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001102:	b150      	cbz	r0, 800111a <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001104:	4b25      	ldr	r3, [pc, #148]	; (800119c <HAL_UART_IRQHandler+0x140>)
 8001106:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001108:	f7ff fab4 	bl	8000674 <HAL_DMA_Abort_IT>
 800110c:	2800      	cmp	r0, #0
 800110e:	d044      	beq.n	800119a <HAL_UART_IRQHandler+0x13e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001110:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001116:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001118:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800111a:	4620      	mov	r0, r4
 800111c:	f7ff ff9c 	bl	8001058 <HAL_UART_ErrorCallback>
 8001120:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001122:	f7ff ff99 	bl	8001058 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001126:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001128:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800112a:	0616      	lsls	r6, r2, #24
 800112c:	d527      	bpl.n	800117e <HAL_UART_IRQHandler+0x122>
 800112e:	060d      	lsls	r5, r1, #24
 8001130:	d525      	bpl.n	800117e <HAL_UART_IRQHandler+0x122>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001132:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001136:	2a21      	cmp	r2, #33	; 0x21
 8001138:	d12f      	bne.n	800119a <HAL_UART_IRQHandler+0x13e>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800113a:	68a2      	ldr	r2, [r4, #8]
 800113c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001140:	6a22      	ldr	r2, [r4, #32]
 8001142:	d117      	bne.n	8001174 <HAL_UART_IRQHandler+0x118>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001144:	8811      	ldrh	r1, [r2, #0]
 8001146:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800114a:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800114c:	6921      	ldr	r1, [r4, #16]
 800114e:	b979      	cbnz	r1, 8001170 <HAL_UART_IRQHandler+0x114>
        huart->pTxBuffPtr += 2U;
 8001150:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001152:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8001154:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001156:	3a01      	subs	r2, #1
 8001158:	b292      	uxth	r2, r2
 800115a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800115c:	b9ea      	cbnz	r2, 800119a <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800115e:	68da      	ldr	r2, [r3, #12]
 8001160:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001164:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001170:	3201      	adds	r2, #1
 8001172:	e7ee      	b.n	8001152 <HAL_UART_IRQHandler+0xf6>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001174:	1c51      	adds	r1, r2, #1
 8001176:	6221      	str	r1, [r4, #32]
 8001178:	7812      	ldrb	r2, [r2, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	e7ea      	b.n	8001154 <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800117e:	0650      	lsls	r0, r2, #25
 8001180:	d50b      	bpl.n	800119a <HAL_UART_IRQHandler+0x13e>
 8001182:	064a      	lsls	r2, r1, #25
 8001184:	d509      	bpl.n	800119a <HAL_UART_IRQHandler+0x13e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800118c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800118e:	2320      	movs	r3, #32
 8001190:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001194:	4620      	mov	r0, r4
 8001196:	f7ff ff20 	bl	8000fda <HAL_UART_TxCpltCallback>
 800119a:	bd70      	pop	{r4, r5, r6, pc}
 800119c:	080011a1 	.word	0x080011a1

080011a0 <UART_DMAAbortOnError>:
{
 80011a0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80011a2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80011a8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80011aa:	f7ff ff55 	bl	8001058 <HAL_UART_ErrorCallback>
 80011ae:	bd08      	pop	{r3, pc}

080011b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b0:	b530      	push	{r4, r5, lr}
 80011b2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b4:	2230      	movs	r2, #48	; 0x30
 80011b6:	2100      	movs	r1, #0
 80011b8:	a808      	add	r0, sp, #32
 80011ba:	f000 f9af 	bl	800151c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011be:	2100      	movs	r1, #0
 80011c0:	2214      	movs	r2, #20
 80011c2:	a803      	add	r0, sp, #12
 80011c4:	f000 f9aa 	bl	800151c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c8:	2400      	movs	r4, #0
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <SystemClock_Config+0x8c>)
 80011cc:	9401      	str	r4, [sp, #4]
 80011ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011d4:	641a      	str	r2, [r3, #64]	; 0x40
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e0:	4b17      	ldr	r3, [pc, #92]	; (8001240 <SystemClock_Config+0x90>)
 80011e2:	9402      	str	r4, [sp, #8]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ee:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f4:	9302      	str	r3, [sp, #8]
 80011f6:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f8:	2301      	movs	r3, #1
 80011fa:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011fc:	2310      	movs	r3, #16
 80011fe:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001200:	2308      	movs	r3, #8
 8001202:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001204:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001206:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001208:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800120c:	2304      	movs	r3, #4
 800120e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001210:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001212:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001214:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001216:	f7ff fb1f 	bl	8000858 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121a:	230f      	movs	r3, #15
 800121c:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800121e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001222:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001224:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800122a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122c:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122e:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001230:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001232:	f7ff fce5 	bl	8000c00 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001236:	b015      	add	sp, #84	; 0x54
 8001238:	bd30      	pop	{r4, r5, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40007000 	.word	0x40007000

08001244 <ESP8266_Init>:
  __HAL_RCC_GPIOB_CLK_ENABLE();

}

/* USER CODE BEGIN 4 */
void ESP8266_Init(void){
 8001244:	b538      	push	{r3, r4, r5, lr}

	static uint8_t Case = 0;
	switch(Case){
 8001246:	4c0b      	ldr	r4, [pc, #44]	; (8001274 <ESP8266_Init+0x30>)
 8001248:	7825      	ldrb	r5, [r4, #0]
 800124a:	b98d      	cbnz	r5, 8001270 <ESP8266_Init+0x2c>
	case 0:
		HAL_UART_Transmit(&huart2,(uint8_t*)TX_Buffer, sprintf(TX_Buffer,"AT\r\n"), 1000);
 800124c:	490a      	ldr	r1, [pc, #40]	; (8001278 <ESP8266_Init+0x34>)
 800124e:	480b      	ldr	r0, [pc, #44]	; (800127c <ESP8266_Init+0x38>)
 8001250:	f000 f96c 	bl	800152c <strcpy>
 8001254:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001258:	2204      	movs	r2, #4
 800125a:	4908      	ldr	r1, [pc, #32]	; (800127c <ESP8266_Init+0x38>)
 800125c:	4808      	ldr	r0, [pc, #32]	; (8001280 <ESP8266_Init+0x3c>)
 800125e:	f7ff fe5d 	bl	8000f1c <HAL_UART_Transmit>
		Case = 0;
 8001262:	7025      	strb	r5, [r4, #0]
		HAL_Delay(2000);
 8001264:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0





}
 8001268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_Delay(2000);
 800126c:	f7ff b984 	b.w	8000578 <HAL_Delay>
 8001270:	bd38      	pop	{r3, r4, r5, pc}
 8001272:	bf00      	nop
 8001274:	20000028 	.word	0x20000028
 8001278:	08001554 	.word	0x08001554
 800127c:	200000d4 	.word	0x200000d4
 8001280:	20000138 	.word	0x20000138

08001284 <main>:
{
 8001284:	b58f      	push	{r0, r1, r2, r3, r7, lr}
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001286:	2400      	movs	r4, #0
  HAL_Init();
 8001288:	f7ff f94a 	bl	8000520 <HAL_Init>
  SystemClock_Config();
 800128c:	f7ff ff90 	bl	80011b0 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001290:	4b21      	ldr	r3, [pc, #132]	; (8001318 <main+0x94>)
 8001292:	9401      	str	r4, [sp, #4]
 8001294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  huart2.Instance = USART2;
 8001296:	4d21      	ldr	r5, [pc, #132]	; (800131c <main+0x98>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001298:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800129c:	631a      	str	r2, [r3, #48]	; 0x30
 800129e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012a0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80012a4:	9201      	str	r2, [sp, #4]
 80012a6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	9402      	str	r4, [sp, #8]
 80012aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012ac:	f042 0201 	orr.w	r2, r2, #1
 80012b0:	631a      	str	r2, [r3, #48]	; 0x30
 80012b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012b4:	f002 0201 	and.w	r2, r2, #1
 80012b8:	9202      	str	r2, [sp, #8]
 80012ba:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012bc:	9403      	str	r4, [sp, #12]
 80012be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012c0:	f042 0202 	orr.w	r2, r2, #2
 80012c4:	631a      	str	r2, [r3, #48]	; 0x30
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012c8:	60ac      	str	r4, [r5, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	9303      	str	r3, [sp, #12]
 80012d0:	9b03      	ldr	r3, [sp, #12]
  huart2.Init.BaudRate = 115200;
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <main+0x9c>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012d4:	60ec      	str	r4, [r5, #12]
  huart2.Init.BaudRate = 115200;
 80012d6:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012da:	260c      	movs	r6, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012dc:	4628      	mov	r0, r5
  huart2.Init.BaudRate = 115200;
 80012de:	e885 0088 	stmia.w	r5, {r3, r7}
  huart2.Init.Parity = UART_PARITY_NONE;
 80012e2:	612c      	str	r4, [r5, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012e4:	616e      	str	r6, [r5, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e6:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e8:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ea:	f7ff fde9 	bl	8000ec0 <HAL_UART_Init>
  huart3.Instance = USART3;
 80012ee:	480d      	ldr	r0, [pc, #52]	; (8001324 <main+0xa0>)
 80012f0:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <main+0xa4>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012f2:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 115200;
 80012f4:	e880 0088 	stmia.w	r0, {r3, r7}
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012f8:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012fa:	6104      	str	r4, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012fc:	6146      	str	r6, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001300:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001302:	f7ff fddd 	bl	8000ec0 <HAL_UART_Init>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8001306:	682a      	ldr	r2, [r5, #0]
 8001308:	68d3      	ldr	r3, [r2, #12]
 800130a:	f043 0320 	orr.w	r3, r3, #32
 800130e:	60d3      	str	r3, [r2, #12]
	  ESP8266_Init();
 8001310:	f7ff ff98 	bl	8001244 <ESP8266_Init>
 8001314:	e7fc      	b.n	8001310 <main+0x8c>
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	20000138 	.word	0x20000138
 8001320:	40004400 	.word	0x40004400
 8001324:	20000030 	.word	0x20000030
 8001328:	40004800 	.word	0x40004800

0800132c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800132c:	4770      	bx	lr
	...

08001330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001330:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <HAL_MspInit+0x34>)
 8001334:	2100      	movs	r1, #0
 8001336:	9100      	str	r1, [sp, #0]
 8001338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800133a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800133e:	645a      	str	r2, [r3, #68]	; 0x44
 8001340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001342:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001346:	9200      	str	r2, [sp, #0]
 8001348:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	9101      	str	r1, [sp, #4]
 800134c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800134e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001352:	641a      	str	r2, [r3, #64]	; 0x40
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	9301      	str	r3, [sp, #4]
 800135c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135e:	b002      	add	sp, #8
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800

08001368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001368:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	2214      	movs	r2, #20
{
 800136c:	b08a      	sub	sp, #40	; 0x28
 800136e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	2100      	movs	r1, #0
 8001372:	eb0d 0002 	add.w	r0, sp, r2
 8001376:	f000 f8d1 	bl	800151c <memset>
  if(huart->Instance==USART2)
 800137a:	6823      	ldr	r3, [r4, #0]
 800137c:	4a2c      	ldr	r2, [pc, #176]	; (8001430 <HAL_UART_MspInit+0xc8>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d12d      	bne.n	80013de <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001382:	4b2c      	ldr	r3, [pc, #176]	; (8001434 <HAL_UART_MspInit+0xcc>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	482c      	ldr	r0, [pc, #176]	; (8001438 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001386:	2400      	movs	r4, #0
 8001388:	9401      	str	r4, [sp, #4]
 800138a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800138c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001390:	641a      	str	r2, [r3, #64]	; 0x40
 8001392:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001394:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001398:	9201      	str	r2, [sp, #4]
 800139a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	9402      	str	r4, [sp, #8]
 800139e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013a0:	f042 0201 	orr.w	r2, r2, #1
 80013a4:	631a      	str	r2, [r3, #48]	; 0x30
 80013a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	9302      	str	r3, [sp, #8]
 80013ae:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013b0:	230c      	movs	r3, #12
 80013b2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c0:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013c2:	2307      	movs	r3, #7
 80013c4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c6:	f7ff f967 	bl	8000698 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013ca:	2026      	movs	r0, #38	; 0x26
 80013cc:	4622      	mov	r2, r4
 80013ce:	4621      	mov	r1, r4
 80013d0:	f7ff f8f8 	bl	80005c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013d4:	2026      	movs	r0, #38	; 0x26
 80013d6:	f7ff f929 	bl	800062c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013da:	b00a      	add	sp, #40	; 0x28
 80013dc:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 80013de:	4a17      	ldr	r2, [pc, #92]	; (800143c <HAL_UART_MspInit+0xd4>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d1fa      	bne.n	80013da <HAL_UART_MspInit+0x72>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <HAL_UART_MspInit+0xcc>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e6:	4816      	ldr	r0, [pc, #88]	; (8001440 <HAL_UART_MspInit+0xd8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80013e8:	2100      	movs	r1, #0
 80013ea:	9103      	str	r1, [sp, #12]
 80013ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013ee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80013f2:	641a      	str	r2, [r3, #64]	; 0x40
 80013f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80013fa:	9203      	str	r2, [sp, #12]
 80013fc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	9104      	str	r1, [sp, #16]
 8001400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001402:	f042 0202 	orr.w	r2, r2, #2
 8001406:	631a      	str	r2, [r3, #48]	; 0x30
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	9304      	str	r3, [sp, #16]
 8001410:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001412:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001416:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800141c:	2301      	movs	r3, #1
 800141e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	2303      	movs	r3, #3
 8001422:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001424:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001426:	2307      	movs	r3, #7
 8001428:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142a:	f7ff f935 	bl	8000698 <HAL_GPIO_Init>
}
 800142e:	e7d4      	b.n	80013da <HAL_UART_MspInit+0x72>
 8001430:	40004400 	.word	0x40004400
 8001434:	40023800 	.word	0x40023800
 8001438:	40020000 	.word	0x40020000
 800143c:	40004800 	.word	0x40004800
 8001440:	40020400 	.word	0x40020400

08001444 <NMI_Handler>:
 8001444:	4770      	bx	lr

08001446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001446:	e7fe      	b.n	8001446 <HardFault_Handler>

08001448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001448:	e7fe      	b.n	8001448 <MemManage_Handler>

0800144a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144a:	e7fe      	b.n	800144a <BusFault_Handler>

0800144c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800144c:	e7fe      	b.n	800144c <UsageFault_Handler>

0800144e <SVC_Handler>:
 800144e:	4770      	bx	lr

08001450 <DebugMon_Handler>:
 8001450:	4770      	bx	lr

08001452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001452:	4770      	bx	lr

08001454 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001454:	f7ff b87e 	b.w	8000554 <HAL_IncTick>

08001458 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001458:	4801      	ldr	r0, [pc, #4]	; (8001460 <USART2_IRQHandler+0x8>)
 800145a:	f7ff bdff 	b.w	800105c <HAL_UART_IRQHandler>
 800145e:	bf00      	nop
 8001460:	20000138 	.word	0x20000138

08001464 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <SystemInit+0x18>)
 8001466:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800146a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800146e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001472:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001484:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001486:	e003      	b.n	8001490 <LoopCopyDataInit>

08001488 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800148a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800148c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800148e:	3104      	adds	r1, #4

08001490 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001490:	480b      	ldr	r0, [pc, #44]	; (80014c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001494:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001496:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001498:	d3f6      	bcc.n	8001488 <CopyDataInit>
  ldr  r2, =_sbss
 800149a:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800149c:	e002      	b.n	80014a4 <LoopFillZerobss>

0800149e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800149e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014a0:	f842 3b04 	str.w	r3, [r2], #4

080014a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014a8:	d3f9      	bcc.n	800149e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014aa:	f7ff ffdb 	bl	8001464 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ae:	f000 f811 	bl	80014d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014b2:	f7ff fee7 	bl	8001284 <main>
  bx  lr    
 80014b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80014bc:	08001584 	.word	0x08001584
  ldr  r0, =_sdata
 80014c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014c4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80014c8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80014cc:	20000178 	.word	0x20000178

080014d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d0:	e7fe      	b.n	80014d0 <ADC_IRQHandler>
	...

080014d4 <__libc_init_array>:
 80014d4:	b570      	push	{r4, r5, r6, lr}
 80014d6:	4e0d      	ldr	r6, [pc, #52]	; (800150c <__libc_init_array+0x38>)
 80014d8:	4c0d      	ldr	r4, [pc, #52]	; (8001510 <__libc_init_array+0x3c>)
 80014da:	1ba4      	subs	r4, r4, r6
 80014dc:	10a4      	asrs	r4, r4, #2
 80014de:	2500      	movs	r5, #0
 80014e0:	42a5      	cmp	r5, r4
 80014e2:	d109      	bne.n	80014f8 <__libc_init_array+0x24>
 80014e4:	4e0b      	ldr	r6, [pc, #44]	; (8001514 <__libc_init_array+0x40>)
 80014e6:	4c0c      	ldr	r4, [pc, #48]	; (8001518 <__libc_init_array+0x44>)
 80014e8:	f000 f828 	bl	800153c <_init>
 80014ec:	1ba4      	subs	r4, r4, r6
 80014ee:	10a4      	asrs	r4, r4, #2
 80014f0:	2500      	movs	r5, #0
 80014f2:	42a5      	cmp	r5, r4
 80014f4:	d105      	bne.n	8001502 <__libc_init_array+0x2e>
 80014f6:	bd70      	pop	{r4, r5, r6, pc}
 80014f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014fc:	4798      	blx	r3
 80014fe:	3501      	adds	r5, #1
 8001500:	e7ee      	b.n	80014e0 <__libc_init_array+0xc>
 8001502:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001506:	4798      	blx	r3
 8001508:	3501      	adds	r5, #1
 800150a:	e7f2      	b.n	80014f2 <__libc_init_array+0x1e>
 800150c:	0800157c 	.word	0x0800157c
 8001510:	0800157c 	.word	0x0800157c
 8001514:	0800157c 	.word	0x0800157c
 8001518:	08001580 	.word	0x08001580

0800151c <memset>:
 800151c:	4402      	add	r2, r0
 800151e:	4603      	mov	r3, r0
 8001520:	4293      	cmp	r3, r2
 8001522:	d100      	bne.n	8001526 <memset+0xa>
 8001524:	4770      	bx	lr
 8001526:	f803 1b01 	strb.w	r1, [r3], #1
 800152a:	e7f9      	b.n	8001520 <memset+0x4>

0800152c <strcpy>:
 800152c:	4603      	mov	r3, r0
 800152e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001532:	f803 2b01 	strb.w	r2, [r3], #1
 8001536:	2a00      	cmp	r2, #0
 8001538:	d1f9      	bne.n	800152e <strcpy+0x2>
 800153a:	4770      	bx	lr

0800153c <_init>:
 800153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153e:	bf00      	nop
 8001540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001542:	bc08      	pop	{r3}
 8001544:	469e      	mov	lr, r3
 8001546:	4770      	bx	lr

08001548 <_fini>:
 8001548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800154a:	bf00      	nop
 800154c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800154e:	bc08      	pop	{r3}
 8001550:	469e      	mov	lr, r3
 8001552:	4770      	bx	lr
